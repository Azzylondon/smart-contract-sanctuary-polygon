/**
 *Submitted for verification at polygonscan.com on 2021-10-30
*/

// SPDX-License-Identifier: MIT
pragma solidity 0.8.7;


/**
 * @dev Interface for totem in addition to the standard ERC721 interface.
 */
interface totemNFTInterface {
    /**
     * @dev Mint token if it is currently available.
     */
    function mint() external;

    /**
     * @dev Mint token if it is currently available to another address.
     */
    function mint(address to) external;

    /**
     * @dev Burn token if it is owned or approved.
     */
    function burn() external;
}


/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}


/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}


/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}


/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}


/**
 * @dev Implementation of the {IERC165} interface.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}


/// [MIT License]
/// @title Base64
/// @notice Provides a function for encoding some bytes in base64
/// @author Brecht Devos <[emailÂ protected]>
library Base64 {
    bytes internal constant TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

    /// @notice Encodes some bytes to the base64 representation
    function encode(bytes memory data) internal pure returns (string memory) {
        uint256 len = data.length;
        if (len == 0) return "";

        // multiply by 4/3 rounded up
        uint256 encodedLen = 4 * ((len + 2) / 3);

        // Add some extra buffer at the end
        bytes memory result = new bytes(encodedLen + 32);

        bytes memory table = TABLE;

        assembly {
            let tablePtr := add(table, 1)
            let resultPtr := add(result, 32)

            for {
                let i := 0
            } lt(i, len) {

            } {
                i := add(i, 3)
                let input := and(mload(add(data, i)), 0xffffff)

                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))
                out := shl(8, out)
                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))
                out := shl(224, out)

                mstore(resultPtr, out)

                resultPtr := add(resultPtr, 4)
            }

            switch mod(len, 3)
            case 1 {
                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))
            }
            case 2 {
                mstore(sub(resultPtr, 1), shl(248, 0x3d))
            }

            mstore(result, encodedLen)
        }

        return string(result);
    }
}


/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is ERC165, IERC721, IERC721Metadata {
    // Token name
    bytes5 private immutable _name;

    // Token symbol
    bytes5 private immutable _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(bytes5 name_, bytes5 symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() external view virtual override returns (string memory) {
        return string(abi.encodePacked(_name));
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() external view virtual override returns (string memory) {
        return string(abi.encodePacked(_symbol));
    }

    /**
     * @dev NOTE: standard functionality overridden.
     */
    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {}

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) external virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            msg.sender == owner || isApprovedForAll(owner, msg.sender),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) external virtual override {
        require(operator != msg.sender, "ERC721: approve to caller");

        _operatorApprovals[msg.sender][operator] = approved;
        emit ApprovalForAll(msg.sender, operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(msg.sender, tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, ""),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        uint256 size;
        assembly { size := extcodesize(to) }
        if (size > 0) {
            try IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver(to).onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}


/**
 * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
 * enumerability of all the token ids in the contract as well as all token ids owned by each
 * account.
 */
abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    // Mapping from owner to list of owned token IDs
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    // Mapping from token ID to index of the owner tokens list
    mapping(uint256 => uint256) private _ownedTokensIndex;

    // Array with all token ids, used for enumeration
    uint256[] private _allTokens;

    // Mapping from token id to position in the allTokens array
    mapping(uint256 => uint256) private _allTokensIndex;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    /**
     * @dev See {IERC721Enumerable-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    /**
     * @dev See {IERC721Enumerable-tokenByIndex}.
     */
    function tokenByIndex(uint256 index) external view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    /**
     * @dev Private function to add a token to this extension's ownership-tracking data structures.
     * @param to address representing the new owner of the given token ID
     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
     */
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    /**
     * @dev Private function to add a token to this extension's token tracking data structures.
     * @param tokenId uint256 ID of the token to be added to the tokens list
     */
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    /**
     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
     * This has O(1) time complexity, but alters the order of the _ownedTokens array.
     * @param from address representing the previous owner of the given token ID
     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
     */
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
        }

        // This also deletes the contents at the last position of the array
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    /**
     * @dev Private function to remove a token from this extension's token tracking data structures.
     * This has O(1) time complexity, but alters the order of the _allTokens array.
     * @param tokenId uint256 ID of the token to be removed from the tokens list
     */
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index

        // This also deletes the contents at the last position of the array
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}



contract StorageOne {
    constructor() {
        string memory data = '\';
        assembly {
            return(add(data, 0x20), mload(data))
        }
    }
}

contract StorageTwo {
    constructor() {
        string memory data = '\';
        assembly {
            return(add(data, 0x20), mload(data))
        }
    }
}

contract StorageThree {
    constructor() {
        string memory data = '\';
        assembly {
            return(add(data, 0x20), mload(data))
        }
    }
}

contract StorageFour {
    constructor() {
        string memory data = '\';
        assembly {
            return(add(data, 0x20), mload(data))
        }
    }
}

contract StorageFive {
    constructor() {
        string memory data = '\x00YU1PWmRoUnQ5TWpBVXQ0NWlVL3dsRFVNN2tEazVMN1RjK0hJTVY5NFVVNmhlK2UxOXJIc0Z2bVlEZDNJN0IySmtqQmtKek53YlYvQlQ4TjgySUJFQ0RtVzNyNkJjWEx1R3hpdVhvemhmRWRqMXc5UnY4Wkhhd2wzRHZlSHMrRGJTcGt4WVBPcHhCZjdJbjlnQW5KdmZScXBhYWVJaU16T1VNVThCQnlnZ0lRZk1adWdSM2ZRbER1ZStCRS9mQkhHUS9sdTdnNnJRS0E5aUpPdUdGVnpta1E5K0x4NzZWVVVTRUU5cUxmR3NlS0FwRUNlR01kRVZoeGNPSTcrODYva0t0MHV6NTZENkJRd3J3TzI3OWlmSUc3Wmc1YzI5UUZNcUU4MlZROEtLTm9LM1NyRW1jOFJsYkhieWoxbkpqcDQyRXZzZ2dvMVdSQnp1Q0JiVHVYbVV4ZkdaT1A4VnJLamdoRUFHUTA4UkhHYUJDUElOaWJRenRyemJZbC8vQ3Z4NHRrdzMrdElBQUFBWkVoQUpEdWNSQk92LzZwcGtlYkFuZGlBU2pya3MwSHJZZXFBcFZhZmlOT3Y3RTlBUTFQQjBuMzJyR1o1K1g3dzc1bEpwY0ExNTNad0VwVzg5OFBTRlBLdUJsck0xZmRzeWd0S0V4UGZIblZDK1YyejlYKzAwQlUvYzJyVm1NRkdWMU10T2l6V21aVVBGZUZIc1ljV0M1Q2FCQ1hoSlhXQkRETmhNcndOV2JTczh4QVltUlBIWWhrVlZyZkl5WlFBRXZleGpZbXU4KzVKYVNrUllDemdJWDIwNGZxOUJRSkVnOUg1aGZzeTR3aEdtMkxiTmdwV0JDcmhWZzRvbitCMGM4ZGpGY0pYdGk4d1ZadUtyWUxUSnJXMDBVTElMZDM4Z0NQNm5MQk9mYSsrZlpPUU9kWmJXQUFEWmZ5Yk5ja1hMR2FvUys3emswcVBvNXJQbm5vbEpkRUxaN3ZTam11dWIxSlpDbG1wOCtPdXZWY3dlVm9HT3JSUFlZUDFBQmJ1U1FFS0Q4SEZTUTFSU2lNaFdnSXV4UlNxaGFHSnJXN2o5VGlCcG54R3hoK1hORlBOS0FPb3h4UnJ4blpYbExJb2grQW83akJOeXF4MWJWd1pBQStXR0tXbmp4OHd1ei9lV2YrRklrOFBKdXNxbzE4dVVBdFZ5aXFpV09DVDhaQ2NCYzdQQmRiTVR4M1daa3lkS3pqWmprMzBBQUFBWDhoQUVnN25FUVRyLzZwcDkxSERCTzdFQWxIWEhsUWV0aDZvQ2xWcDdDR3gzSGl5QXMraFdyY3pVSDlxZnk4RFhEOVpxTE9JcnYrZ0pUZ3hNY0p1eDZybTNpckFyNFMwYk04ZjZiTmtVLzFweUkrOThSRldrZEo0TlNNYXpTc0p0TGgxUVlQZUlZQXVqMk1QcDF1dHMvOWNJMTArMjlYVnVjSXlKaWtrSEpMVWZaQkY2WUsveFVWblYyL1VKVWZpd0FsY0NVS0xKTWRkZkNZYVIvWDA4Zkh0a3RaQjZEL3dQTEc0RUZKdFR0V21XNVFFRmVVQUFPblYxOEV1K2QyR0RMYUQrM2RIS25ucHhQMjVqbTAreFRMN3BaSEk2aTh2MDFzRldmR21BTTdKR3lpNlhNZVp2SVBuR1lZQUFFNzdZZ1FpaEcva3ZPNEkwZnRvVHBBczVHRVo5VkphNDBlcXdDQXV6YnhlYTB2Vi9uc09scU0wSmFDSnJhRGdCb1BEVnp0aXgrRXd4ZFdCZCtCMklNaFU1U2dlbUR3NkpGVjlPazV2TzRFcUZsRGVCb2NZSnJnT2VKNFJWcTdDa2NRUzcxOEJPc2VZS1haUXJmR0ZRVGtabnZkYTJTajZtVVlzSFI1Y1pXWEFZTWFoakFxY2tRQUdxYnI0elVxQUI1QmdBQUFBWkVoQUd3N25FUVRyLzZwcDFHNHdUdXhBSlIxeDVVSHJZZXFBcFZhZXYxaGFwYUxETUdSSmZ1ajljU1ZkQWYvaG1BSEVjT3RSekplUjJlZ0pUZFFQdjBiY08zSU5BYlE3dzdmM0xqcTdJRDc4QVpMVTVKNElHZFI5eml0aVpNV0poV2pFK0hYTmxaaEVqT3Vac1R5OVQzQzRmQlovN3JBWGdydzB1bGhQZEJGMUJnOXcxQjNnYTRqeEoyZWtSMFZnUU44aFdEQUQ2R3lyRWNoVjBMSDBtV3ljOGpuZllSenF3WnhBRzZTa3JpYlBmM3RVeWY4ODYyRVNub1R4ZjRNbjhBT0RqVUl0VGw2K05OeUV0c1hPUDlFTXhPc1YvVFBDY0ZYZEhaWjRIM1Y5Ulk4R2R4M1c3VnRUb3N0Mml2Q1EwcjIvZ0FBSmg4Zzd0MnZCNnRURmpRVWlzbGhtbmRTa1lMTmJEVko1dktzTTZXbzZ3N3E5WVBmZmx3YXdLNFBBYWVuS2RFbFFBc3EvNmc1dENmNFlCSW1vQk94eHQ1ZE5jT1EzV3lvb2RVRHNvYmtpTXJWbFNncHpCcWtqaHBva29CYzV3QmJ1RldibVA3cjVwMGxkbFlsY3BCaTdWVjVJK3N6Y0ppbEtYTXJCU1F4cXp4VXJFV0hYand5T0hHQnJpQXBNOFlJaTBWOXVsSXR1bkQ5aXA2TVlBQUFBWndoQUNRTzV4RUU2LzZwcDFHNHdUdXhBSWowenhLZzlnRjBRSzk1UUpqcXQ5SkdkTDFyNG1lOTgxR3hQK0dvUXNWWHhnRjhHS2dsVnNpQVJIL1FFcHJzbU9FM1pObU52T1VhVW1JZndCcC9uVGcyTFFtSzloRmNNcTNKcVdiRXlZc1RDdEdKOE91Ykt6Q0lneC8yTWxwenlCeWFUbjVBSnVKRG9nVEd3U09wdGhmdWQyeHMySG9pWUI0MCt0SExIeHVtWXJVOEZnb0FnY3pyUm9xK3lsUVFmWmlMdlJNK2laNjNIWU5CNVlUakIvMldBdFhnVWVpTXVEK2hiMVlweVlJT2kyV3ZDVHN1d2tmdHJlekZHeWxqMlh3V1JaU0NnclZRTHBXN2ZiWnJxY0JJei9MVjcyNkNWUzVBQWJJU1FmTFlrMVJ2M2wvUjJnQUFDQUEybVJtK0t6dU03Z0ZHYjJ3NGFITVJoSEhTVjQxL3UxSzVpMTBCMEJySlB0QVhrUEdvYS9iS0oxT05uTjZpd0FiY21MdHpOK2draU02a0JNR24xcExSM2svMFFzdlRVbGFyUUIwTEgwYmlEYWZZOHhzSXZwYkR1Q3M5OVk2YVM4ZE01SUJDcXNVRi8xdWxyRm5uOHJnWkJLZUc4R2pjUWhURlB0eHNqRTR6OVM4RGdLcTZFdUhZNk9WRkdWS3hvQ0hYbEJyT3VLYUxhNUZFbDNkZmMvRGpBQUFCamlFQUxRN25FUVRyL3FtbVR1ejBsOWlBU2pya3VnMG43L1JBZU9uTkxDTUZLanBkbWRoQk83WkMvRFl0UkkvKzhPK1pTYVhBTmVkMmNCS1Z3SklXWTFpcHhHR2hyYXBNSytZNmNmeFBmRXlMa2NlaXo5WGhCcys1dFdyTVlLTXJxWmFkRm10TXlvZUs4S1BZd3hCOXZ5WWJ1d0FNM0lRS1FqTE93V29vVVlmT1ZnM05lU0Z2UWc5WldRQU5aemRSTjUrUHlkWFRPajVlR0RGaDBWdHhKMnlTNnI5VWZNekNJdjI3UFJRakdlL3JhREhzNHlkNE5GZEZ3N3VvWlJLR2dTTFA3ZU05WU42NXY5MmJHdjFHSk9CSUlVek85TXV6VnJGQXY4ZnVOMXhsSUNDVG5sV3dnQUEyUDlSRjdaMU9GejV5R3IzQlJSTXYyRkFReDl2NGJ4QnUxNk5taU5PL2VjaFpVNldUS2hqOXVsMnlGM2dkRFM2UlBBQm1idXNpL0lzUFJMNkF4WXNMMVdQMzQyWklpa1Ivck4yc0V4NkxQVUNRMHVPbmg1eElDelFFREF0UGEyTWhxMTdQV0kwQmh5VDZnSU1nWU9GYTN6L2ZjUGtsaTIwMWxPZENpNXFWM1M1UTNqVy95OW43cGswK0V4cTB3SUhNWEdpaUNNUldnNU02SHBHUW4wTGpUdmprbGo3bUFBQUJmQ0VBTmc3bkVRVHIvcW1uM1VjTUU3c1FDVWRjZVZCNjJIcWdLVlduc0liSGNlTElDZ0NDSkJtWnFEKzFQNWVCcmgrczFGbkVWMy9RRXB3WW1PRTNZOVZ6YnhWZ1Y4SmFObWVQOU5teUtmNjA1RWZlK0lpclNPazhHcEdOWnBXRTJsdzZvTUh2RUxyRzVEVjFSMzYra3dVMElZRnFzakhPZ3pGcnI3bXFkbURRSFJnRGUrS2lzNnUzNmhLajhXQUUxZ1NoUlpKanJ0b1REU1A2K25qNDlzbHJJUFFmK0I1WTNBZ3BOcWRzMHp5bHFpbnlnQUVqbzBNWnI4c1ZoaWtoaVh3aG5GYVZkdkNQNG1yMnB3OVBDZVA5OVljY3dGY1IxTU9udmk2TEFadk1BZklTTmxGMHVZOHplUWZQTXdRQUFKNTJ4RkxXOXNpbUVtVFl5T0t2anQ2alJldlBjMmFyQUFrVmJoMEhFNW52RkFmUzFHYUV0QkUxdEJnQXduaHFNelc1TkVKWnNLaUpBREdiQlpxVUcwZUhSRkZFeFpVRzU4Z0laR1c3ZUJvY1lKcmdPZkIzczNIVzNrR0YzajJwdDBRa2UwZkRLMDVUczJ6ZVk0RnE5RHdmVVpyOExRZE9GZ1Q0dGVneTZhMi94cHl6STJQUkxaMEY5R21vQUFBQlNDRUFQdzduRVFUci9xbW5VYWlKZEd1RGRsdzhNbm1reWZWQXdNUHF4d08wWGZaUTVSWDN2c2JRTTd1NE1WNG9mL1BLN0JDaEZNdFpSNWpXaTR1ellRMVpnSXV5R2psWk4wb0JLbE1FMlhPN1JWbllxS3Y3ZTF1UUtUUDFIWUk2QXU4N1JPUFZzUmNXTDV2ZGFCeFJhM0Y3SElYemZkTGtaV2JEZXdGY2krZFgrTHhUQjgvQjZTL0p5Z2RqUGk3WlJoRTJUc3NrejhHcGxjK2xFZW9yZjdwY09YNFZpK1k3UGg3UExZKzhFSExVdXd1QzBMd2g1Qm5HaDJKUEdBa3I3dFhEZHp1L3E4aDlwRDNxQ2JXNExBOUFEY2xtei9rbVpsMW1EQitWUUdUTFBpc3M3Q3orSW44MGxLbkJpQS9iWS9abjVTaXA5V29NbU5WREpaLzgwcGtqb3krb20veFE0aGtLMnA5Z0k5QkVWWlJkbzB3dVJ2dkYzU1B6ZTE3VHNZWTRoeSszMWZ5TzQvQzhlRVZudkUxamhtcWlUSkM3NktVNUxxRjljd1F1R0FYRGJWTXNBMllBQUFBVkJnVVJBNGYwVHMwS1M5eWhsRHJEMUpzWEh3Q0FBQUFBWUFHcjIySUkxd0FCUHRQb0NLRnZiZXFmdlZrQUFZOFVBRUhmYlFpd0ZNeUYwT0dCbU03ZVBaRGMwb3Jrc2ExTmY4ZnNQb1QyTFZacDh3YVNjSkxjQzA2YkJHWVhEcHo3Mjhyb2E4aVpuSkRVeHlIS25WeUJ0c1FlcHh1THpkMitGQUFBQWN3QkFKQ3IyMklJMXdrakVlM1RnUndWbUprQUM4alBXRXRPQlQrNldxZDNQY3VVWlJ1WGpKcFcwbWpRekVyeDZMYzViWm02K3FPNk5OTWpzNXllaWxmd1ZibmY0N3BpSzYvMGhaRjVaZERCVnZ5Nm5WYkNDeWwybnloOThhVUlwWDFLT09DcndMbVF6SC9hbWZuZCtoNFB5NElLZDlDV0lSRWhybXhvcS9CYkRORHlOMEw1TUtQTE1qWStwTkg3Yi9ibHlDS1FxRkliN0ZHQlprZ09iN1pvV25FdVhNZ2tyZ3hLQ3dQc2k4bS9abHo5b0paKzBKbVlSYSs4ZWtKOTNGTjBFZGFGSFppTXl2MlNsNVN0MHp5YWloUVV3Qk1zY1huR1QyN2hvc0c1RWJTZmpvOVZIaWg2aUo3SkVPdE5pck1xL0h2b1NTOGlzb0MzQkRSck1Pd1JDOSt6OVVyOHJ4UlZ4U3BOK3Y5ZmEveW1rTkc3QkVtZDZnMWx5U2YyU0c2RE5UaUtzL1RnZFRoUzFZMUpPZDZ0NCtOYjB4MkZqbkFjcXprTFdPbVM4YmkrNHgrcDQ3cUxzMHJlbGZZZ1VFakszSFh0UkRGT1dHdjVXTVhsUWF1azJuYTdHeERYdDFnQmFENDRkVkxMbmlXaHF2ckh6VGIveVFieVI0ckpBSVVaREw4blJFOHE5cHJwQm1VeW1ibGlMMXZ3V3FIZWhDK1VZVEFGeFk5azRjd1dzYzZYc1VmemJMUWNqcTNwdEE4WUNqQVJIWUNGRnFERVVKeS9KVXVva0tGak5aSGV3UytIZGt4QUFBQUJ6QUVBU0NyMjJJSTFDU01JTHBJTTZTcmdCRUwvU3dxaEJYOFFadHVSYUx1ank0bHNjVHRjNjV6WEtRRzBpa2hzR085YURpMUxKdXJwbGFhZzBvamwwdWpTcElZQ0pzM2Vvd3lRRExvd0ttc3A5U2ZrQU9UTlcyZ0tMdjIwQnB2eXNNazRqRDNKcGZQL0xSaVRoK3ZzK25HWnJmck0yRXNVRlo5Y2JMOFdGY2ZQMVRWSFNPRXdnLzQzc1NHLzdRZmYrWlBGSEtFY3g3VTF5UzA1VFlHOWpyTHpCOVUzZTNMS0VGbDJPSzM0V3NSRkF0cnl0ZkpNT05rMFpaZW5oTytlM1MrSUNVc2s1VlRPMXhFT1lGN2sxQkNTamRLczMyYm5yV3FoQy9Xbm50SnBVREtPdHFyNDFzRzd2Y29sWGVrV0NHK0xTUk94N1pKbE5oOWRPcytVUWErM3ArcHk4b09uRmtHZ1pZaHJFaDd0amxZalV2eHBqbjlubFhOZVkrTVlSai9xYUlGbTZnc1BmazlwVm5RTG5xWm9GUzVpN045UmJuRW9OOC93aTFpVENEeTlkejlUU0pmeFd6S1BudVQzbS95akVhc29NU3FCblkza2VzdzFCZ1pXWnhGbzBZUkpnNzhheCtGc29CUEVjNEFlUlVFS0xUaVB6QlpwT1VEMm15RzlUejlTbWI5NXZYYk9xaUpQWHNqdGFmZjJZY1FaRkh6OUJlZUptSC8rZ0NUS2FFT3BkaGFBTHdXd2g0dHo4RkxpUmdmaWhRZmloT1g1S2wxRWhSRU5USmIwNG4zU0VjZU8veFVBQUFIYUFRQnNLdmJZZ2pVSkl3Z3lCVndBQUFNQUg1UitJcEtkU3ROQmtJYlNmcXU4WTdYZmtaTC9kQnNObEh3ZnN0Q1JTZDM0M3B0OGorb1RRLzdkT085aGtlK1hUUC9NZ1g0b05yTWRIUXFacWFxakl5K1FFdWNEYlp4cG8vYk9sRTh3M2tjNnBnNlRZUUhHU25ZZm1XN3ZwYWxSTWVzeStTa1YzTjlpeHR3VjV1ZTdkYXdTZlF0ams3YVlWODdLdWJSZlZYa0dVeDFXR2tRUGIraS9VaTY3cGRLdi9tNEFvNWdJV2VyRzJBaGxwQldxN0RsSjhOTUc3ZzJUUjdkNmVQMzU3OUw0anc2ZFUvWDVWVm5FYzdkakJad2NkRFFWK3NtZUlLWXY5bXFuNVh6alYvZUZ0Q0hHMzdPWWZDNzZKQVlManNxZVBMTDlROVBMNjlQTmxkV2R1UEZtdTdKRWlyRlFiN0tRa2RBZTE2QWljOS8zaVJtaWdDckhKWXZTZFk1YytJNThpTjR4QlVOaWRQZkVpNkxGVVorOXFJNGZmZXFHZThBa2lGNEZ5bU5VMVdDZnNvMnlIWVRCODRsekYycHR0YnlRTG85VGNkQVh1RHVQcUF4WFZHTENWMjZuMndTTnFjZGtRNno3YUozbWR2cDVBNnpNOEFkWVhGKy9VcU1vL3poZ1N6aGdzNUgzc1ZhZkNTYVNnNGpWWmpTM3lSQ3N0Qi9iKzAwUHNROWRUdzZPcVo3ZlhsOEJOK1FCajdweHYwOUovczA1b095LzNiTDkvSVhKZGZlWkdtaVM4VG5DK1p5UHRmNXN1V0E4akpmOTB4bVV3NEVPQUFBQjJ3RUFKQXE5dGlDTmZ3a2pDQzZTQUFBREFBK2J3RkxDcG1nQXhaQVpDSEVuNnNER081bjVJUU4zWE5wdTZsZHB1TjdRYnlNQVVERGZ0WWkwQWtKNVhSVHFXL1RCbVc1a0QxeWZXNWpvNlJUZFRWWUcrbnlBbHpnYmJPTk5IN1owb25tRzhqblZNSFNiQ0E0eVU3RDh5M2Q5TFVxSmowMlh5TkN1NXZzV051Q3VkSkVKT3Y3WVoxRmhkVGcwd3I0d1dXV2lPSVhrR1JoMVdHWENQYitnWXV5cVVGL284SHpiK0Njd0R3VGsza1pBRVRzSVNhcmxJRFpUOW9HS2NwcytKa0craUtmZUs0d29sa21EY0lrZHNEaGlReC9UTFVXVEFKbW9jY1NVSllLOVB2NzltQms5bnhod21kcEtIamdmT0VaNEJzQ2lIYzNEMmVkTUVxdk44VDJlbmxyeVRJQXlUSS9KdEw5b2h5bzQ1NWNXQ1h2VFBLcjFCeWlTKzVxRUVPRXFNcStrbjJRN2FHTjUxWEdXNjVNY256ZTV4aFRuY01uL3ZOQ1pYTlFrajdvelFLL0I4NlZOSmlaWVdNbEZqUEQwR05KODVaOGxIZTVEWm1tUHFoTGhhZE1nUm9uTFBQQTRtZlFRSkMwWlE0MVo2ZXNIektzdjN6VHZxUzhoYW1YT0dBVE9HQy9rZlhyelpaWUI1RGkvN3BrMkRCcWlxTlp0K2syUUFqeXNiWXpEV2Jwa3hDTEdjM3dMUWYwSkExTStEMS9OeWl4QTVNN3cxT2dBNVFSc0xGZ3poZ0V6aGd2NUgxNjgyV1dBZVEzYmMrb3dmc0FoMDlvQUFBSEVBUUF0Q3IyMklJMS9DU01SN2RPQkhCV1ltUUFMeU05WVMwNEZQN3BhcDNjOXk1UmxHNWVNbWxiU2FORE1TdkhvdHpsdG1icjZvN28wMHlPem5KNktWL0JWdWQvanVtSXJyL1NGa1hsbDBNRlcvTHFkVnNJTEtYYWZLSDN4cFFpbGZVbzQ0S3ZBdVpETWY5cVorZDM2SGcvTGdncDMwSlloRVNHdWJHaXI4RnNNMFBJM1F2a3dvOHN5Tmo2azBmdHY5dVhJSXBDb1VodnNVWUZtU0E1dnRtaGFjUzVjeUNTdURFb0xBK3lMeWI5bVhQMmdsbjdRbVpoRnUxUnVvS1U1VUhYVk5CNUtzWXFJeGtYQTNNTUt4QjlGREdQVGYvYWxHanBjbjkvVWtzaHd6MXp1aXJOeTNKclRvT1hpZ213OEdHOEVleVhlbjFFZnhISk02NnRFTVZSa29mVXZQM0JiZTBaQndjN2V0T3dwaXNDdUtYNkw0RVgvc015aDVIYlhvQ1dFd1NZdjJVVFZjQ3phM3BhcU1xRkE1VmVJV3NWSTkrenRlZmdqQlJ5alBuT05LenNZY01TRkErRWRFNXR3cklnQzJOVGxxaXBiYjFtVFpYRFk5SlBYcXMrRVhTUVJFbDVIT0Y5VGtmYS96WmNzQjVHVVFvdVI2RGtKMUVnelBsWitZamwvRDlQUCt3UE15YzlJdHhranowL0t0aGJBNzgvQUU2eEtlVVd6R2ZjMzFpeThqNndBUEgrQ0ZGUGlGRmhERVVPajhVU1MvSlpPb2tmbGdIZGoxeUlBQUFIS0FRQTJDcjIySUkxL0NTTUlMKzNPQUFHZW9IOFNxRUZnTkFWeTR3RzRad2dSRkpzZlMvM1FUSE5VTjVCTWhwS1R1MmdWSzgzaHFoTXB6SFBoRTJHUlU5TDFOblM1Q2pEQ01rQVlVTHVwcWdaZUQ0LzhLOTd0bUpNRDlzazJiOHJSWURzTGRGbUhQSWh2Qk16amd2QWNxVkV4NmZOaEgxQldybSt4S0lmWnlkdmppUndtRVJGcmFzU0JlaWtDcERneGdpSDhkY2YwbjY5RGFmSzkyQmdBenJuU2hrYmhSU1NyMXFQOUdNSlRubUZwMGNST05kdklFakdCN2UrZTN5K0lHVXIrVzBiM1prTjY4SStLM2I4WENFd1lUMDlRSFRrOFFUU1g0aFlxOEdVZGJWWHhyWU4zZTVSS3U5SXNFTjhXa2lkajJ5VEtiRDY2ZFo4b2cxOXZUOVRsNG5jK0xEaEF5eERXSkQyL0hLeEdwZmpUSFA3UEt1YTh4OFl3akgvVTBRTE4xQlllL0o3U3JPZ1hQVXpRS2x6RjJiNmkzT0pRYjUvaEZyRW1FSGw2N242bWtTb0p0bVVmUGNucjkvbEdJMVpRWWxVRE94dkk5WmhxREF5c3ppTFJvd2lUQjM0MWo4TFpRQ2VJNXdBOGlvSVVXbkVmbUN6U2NvSHROa042bm42bE0zK2kydTJkVkVTZXZaR2kwKy9zdzRneUtQbjZDODhUTVAvOUFFbVUwSWRTN0MwQVhndGhEeGJuNEtYRWpBL0ZDZy9GQ2N2eVZMcUpDaUlhbVMzcHhQdWtJOWRCN2VRQUFBQkhBUUEvQ3IyMklJMS9DU01SNmtRQUFBVklEVWNFa2ZoY3EvcjNwY3p2NEh4b1BwQnhKeitDVDhYYXN3ZE1BQmZUNEdjYXR4dXllNmJ3YjlKU3VTai9zdU9rS3BsZ1VFQUFBQUFWQmdVUkE0ZjBUczBLUzl5aGxEckQxSnNYSHdDQUFBQUErQUh2ZFNDTmYvNmVFQUFMRURqSE5RS1l1NGlDMitFelQwVGFvL0lyV1hKNHZlVkx0OGhua1BDd2Q4VGUyZUJ3ZmtWVzYvc2htRUtwU1Fta3RMbGczTzY4RVQvS2xPN2xQNGJtVjVLY0YvcjljQksvU29vR3QvbmlYSHdtVVBqME5qT3l5R1FjeVI0MlV0QkhKVGJ1VlErVEdxNXVHZ1ZON1BRS0tmVWxDbTd0Ym81S2RpeHpGWTU3T3BXYk1DNWpGb0E2dU43bU02akxRTkM4OTR4UmlveUY1WUl1eXljWURSZzhmYUJBWFNrdVVucXFQTnpyaGM2ZEpIZWxDY3Raa3p0NGZLVUNKT0ZVOFlNQjNKOUc5dkRNMDZSYnZXZVlSNzFjd1gzN2JFeUJENUNpaGU1SUNtb2I4NEEvWXZGVURQQXorYXQ5OWpkQUFBQUJPQUVBa085MUlJMS8vcDVTWnZxK1Q2bUhlZzZUTllsemR2M0xCNWZlOWZ5M25vRzhKbWlydDRaK2VBUG1HOEJ4SlM5RSt3U2NtOVZjR3diQzJ6Y3U0R1pWU1JiVFJmWjJ5L1RueGoyNFZpZTJuOGxFVmllK0wyYXE0Z0FBVExVeE1jay9XUWtVd0NYcVlEaXYyb2JEUUFidFdUbkIwUkpkdmNueHVGeEZtMVlzelN1ZXZOSUxiazFwY3JYNVRzaW5LT0RmSCsrb0JkYnRndDFFTnp3c1kvVkp4Z0hhNlBZeG1meVdUbTFBSEpmTkE2aEdtQW44SEtHN3IxQnVJQUFTR2tpTXJCd3BLKzI0Wk9WNm04RlY1emd6VmFvZ3VnSHRNb0hxSlUzc0NLSXRFQU55MGVicUczUU1nZnZMSVVKclkyRHdYU2dvWCtmclRtQVdjTVpOUTFaekFSWlhlREFYalFGUFhYQUR3MTR0dEZDMFI2bWtQMDY2QVNQQmR0K2NRcmNXVHlWVEJwYTRBQnFnaGh4am9TdE10cE42NXFIMWFBQUFBVHNCQUVnNzNVZ2pYLzZlVW1iNnZrK3BoM29Pa3pXS0dRL2lvVWN6TXU0MU82KzZRczU4V09RbjRBK1o3SklTVWxtbWd6WlIxNkFGeGZCeXpSTmRjSEtMNFYrMFZLVjl6ZmNYQnpFNXVHdWZjdVNoRldWWGkwYURqNGdkc2hjZTUrT0NnQUNzYU9jOWdUQVhxbjZEQUlYOEYwdlRWQW0yM09JV3dhNUhLMHI0Zm1hYkxGblBTU1FoTVNXT3l2QWJtOUJGanRyNTFJSWJseXFueVJqdUVjZmdvYmFPREpjSGpDd0ZtWHJIUy9ZK0Z6MUl2MVRsOTBweWdKbWNNd0FBUnlWcGltN1NUUTE2ZlYreEE1TFk5TkVMUWpxMEZGaytyM0dvSnpuUG5qSSt1Ukl0eXJTeHlnQ0trbGVCUVYwb0o0NXJxenpEQ0toTDA1ZFk2TjNON292c0V2MVRtTDcrd0hTcEdDZ2hMeUFLak5pY01WTGZLMEhjUTVwSmlQSnNIZXdMNWY4ZUgzVHEwWWRsSGVRQ2FCV1ZwcGdIbjNaMS9Wb3dwREFBQUFFNUFRQnNPOTFJSTEvK25sSm0rcjVQcVlkNkRwR1dLTXQzWGNvZU83Z2RmNnFJd0lxeGg2dFR3Qjh4NFR3a3BMUEczZlBYVDVUSVg4OW5aZVFSR1BBUHRORjluYkw5T2ZHUGJoV0o3YWZ5VVJXSjc0dlpxb1ZDR0pUMWVwZHRiZjh1SVBsUC9sVUFSSnhSV3R4L0V1enFkVitZdmMzT2JHY1BKQ3RoWCtRRTNSM3JSQmYzQlA5aTU5TjlIWDN5QUJDWDNlMjdKd25NaWZvT0Z3WFBvR2J0KytIYzZ6MmM1bnI3V0VuOXM0Y2JyZng2REVqOXIwVEFBQUJBODVFMFBxVStVNEtFclhqUTVFdnpqNktheDZVQk0zeHFsS0JCN3JtYmxxa29LYTBBRkhkV0FHQjU2R3kvOUxwd1JmNU1RYkVhSDN4dXI2K0dTRU9tdXNVblhyZU9wSERaSkNRRUl5MXRmckNpNFB2cjZzSEVyWS82UnZYT29scldXMjJxYm5RZnFIcTNhUUN5NjVrYzNOZWdER2ZVMzQ0R0pyKzhySThCZ0FBQUFUOEJBQ1FPOTFJSTEvNmVVdEtVVjhuMU1PODFEajcwWCtlQUhPSEw3NUgvOTZDYWdiem5aUitBUGxucWNKS1M2T0o2Vno1d3VBUm1MZ3JOc3hnVnU2NTR0cG92czdaZnB6NHg3Y0t4UGJUK1NpS3hSTzRnUXJUb3lwK3EvWUU3WTAyeDJpTTNCaEc0QXp1cElvT05qSDI0ZnZ4cFZlMTdwZWJKU1ZPYkFoQTVnSDBxY0l0bnRnclBYdjVLM0NFK29BQmIrWityb0hEd05vQmZXQk5QSEhubldHcTJNRENrS0VBQUFrQ0E5V0FCV2pNcFkxS2sxcExlQkFBRWM1RU9KZU1Odm9tQ050dDZpL09KanlYeFdHWGtWN1k5NklsL01iYkVWYzZLaU9qV3V6aGxDcDhBRm55TnJVa2tBb3VDRVV2YjVBZHYvdTBlVnFGN0NvTGpXQzgyOHFIUkp2VE9LZDdCWldnZWJLOStLRWQyNk9YQ1FPY200QkZOMmJiL3JtYi9JVXBoUHVFa3VMY1o2ZmczK21lY3lJT2xlMmVGZ1BIMjNZRGxYYlhRQUFBQk93RUFMUTczVWdqWC9wNVNadnErVDZtSGVnNlR1K1pWM2I5eXdlWDN2WDh0NzBEZUQvUlYyOE0vUEFIekRsTFdtbzNNL3R2QkhDSTNaVE9TMnpjdTRHWlZTUmJUUmZaMnkvVG54ajI0VmllMm44bEVWaWUrTDJhcEFBZ1lHSHpoM0hOZmdNVmVrVHRUWC9SWDdVTmhvQVIvVmZwVDBnZCtsaUdYSXhJaVR4SWVMQkZaZm01bUJ1TTFwY3JYNVRtaW94NG9zU0duWGdVbVQ1SXpOMW5NY0htUWgzUVZucExuWDY4bnhkVFpiVXlsQ0JiSGNxdjF4VXlodTY5T2IwQUFEMEpWNDRObndxbnJ4R0NJUGFBSWdWUXFyZTRMdHFzRXRTM2VqQ0ttOWdSUkVvUUIzWGphUExxTUd3NDZNVnRpQjR4VUx6N3R2SzhrYkFVQ0xtd1hpMFJQdGxkNExwV01GSzNYakttcjdWV1JMZ3dvU3FDdEdyOFVUMlQyMG55elJzbXgwMUVLUGE0azNFT1FHdXBJY25DKzhmemRCOExJd2VTdU9nQUFBVDBCQURZTzkxSUkxLzZlVW1iNnZrK3BoM29Pa3pXS0dRcXp0ZGx5SnpEcit2dDNBR250UWZVL0FIelBaSkNTa3MwMEdiS092UUF1TDRPV2FKcnJnNVJmQ3YyaXBTdnViN2k0T1luTncxejdseVVJcXlxOFpSdEtGUHJpQUFBck5NVVZnM0FPT1R3WVl1SmdMMVQ5QmdFTCtDNlhwcWdUYmJuRUxZTmNqbGFWOFB6Tk5saXpucEpJUW1KTEhaWGdOemVnaXgyb1VuZVg5V3dsRHp4Z2MyY01kOU1xTjB5OGFsWHNCdTRlNmJudnlIT01qOTRidUFSVTV5KzZVNVFFek9HWUFBSTVLcWQ0b3V3Znp6UmhEVjFxY1Y3V2FuNFhPeU9vL0dyM3FVUm5YdlBFVlZJYXhibFdsamxBRVZJMVdvY3pkY3RLemZjc3JIRkY0VnI1cUpKZW13YXFiamlucENCUFY1RHBVakJRUW8ySzEwZmQvOFRJa0czdkVSNlZrd3dkN2V0UEMyeTd4Mnk5RHNvN3hJTVdNL1Y2QWpXcS9lOUcxWVdlSmdBQUFRZ0JBRDhPOTFJSTEvNmVVbWIvUEQ3aC92RzlPeERhRDhoNHE0SkRtSlgrWS9wTzVXM29rQVF1aXJpbGk1L3JlNWRHSTZkN2tsbU5DLzY4WlZOR0FKUEVySFNVRm1oVm55QndIa3krR0RGZDR0SHZqdzQ0SEI4YUJSRWxzWHhMamc1QzNEV0hWTnNHWS9adDVRSlcvdTJOdGhobGQ0VlRWYTRReUJNZWUwaVBJd0pwQ25keUM0ODlkYXA3aVRSWmx4WlNkSzBPSlVhWEMxMGhMRnJwSFN4UkVJU1NnRlB3M0pPWnFVQndOTmdKZUMvcUdWV29reVRTaS9mbE9yTUdBSlVLbTNTYUhVRUdneEl5bEcrTlF3OGZmTnpMcW15dTNCd3V2dExlL255V0c4L2YwQ3JndmhiYStyOGVPV3BoSjhrc0M2bU9WOVJvWUJnR0lNT3RVaHNmZ0Y5MjFUTEFROEFBQUFBVkJnVVJBNGYwVHMwS1M5eWhsRHJEMUpzWEh3Q0FBQUFDbXlXNEdBZ0oxOW44RDRINlFVL2VjWi8zc3BYUFBYNDdST0kzQzA4RmNObEFRZ0FBQXdBQUF3QUFBd0FBQmhtcDdpZ2ZFNVRQRVNBQUFBTUFWMEFrQUZWQTl0NWE4VDUvOS9FNDk4NjRzYnhVMjRRcVZIS0pqQi9YK09IU2FMbC8vVnNpSzJudUg3QU9idUp2bFV6Y0tFVjU1V0hDam1NREI1MzJjWjg0dEY3MnhCY3NBNmNScFora2pTOTc2eWZ5cDhuMkFpbkMrT3ZlcW5ub3pUMkkvRGVCd0l5MjRqWmM3NFMydk1IbGFXNUFQMFZGbWJ1MGhMSkRoaE1NZDdaZ3F0Y3Z1TEgva1NJVXRnUDJMVy9wMEV1SmtHVUl3YWNCaHVuNk96SGxVNWxmTEwrWGwrajNGb1JSV0dyanFiM21zR1k1K1h1RjUwOTB6b1cwUzVBRllyMDFSaCtSOHIzbFlsQXFOSWd0Ulo1bXJ2S2hSbVRwYnFUbElBYk5wdFo1ekhmSlBndFpqdnZuY2h0V3VwZGFBeDFsbHcva1hYZ3RCZUJQS2RqWHZJVGZ5VXZaT05wTzJoWmlnQ3VvdWdMdy9GYnBOQUgyZWdTTHI5dlFmSmRxSG9ybUVkOWN2QWg2amNOcEhBQzVjcHgwcEl5OHczL1cyNFRwa2R3L0o0bWxseTZHbXQ2QmdTRE9uNGhCWVpJR0NsT0VGbjlnYnNOd0FDSFJoT2hocVNiSWJIMXlqTVJBclFhQzFQd2xDZmlKZldLcXVobGNXQkxnT1FBQ2lCYzZTSlk0WW1XMkN6emxCZnNpSnE2bDlOOC9helFEcHNLRUNFQ0RYZG1xUUpJRkRkek1qOEJicys5akdtUG5hVWw1UVFwZ1QwNkFVaHFnendOVVhNNXdtRGlPcyszV1dvZXdXS3p6NkpGYTZNa0x6WE5QYWNjNlROTndoRVI1YlR3TFVSdHFLSmt3TXkvUmkzeFVvODdSd3J4dWpZc0M5U1NxcFgvMExpMFRRRmRQZWhVTWVBTDFMSEsxT20rZDZodTNnZ3lhMUNRN0ZSM3ZpRkdzVnZjOGczWlZsQnkxMUdOOStteW1kamptRVFKSUdNbGRVZEpBMVljSVNnWG1jRGYvZ1RlK2xadXhqb3dhMTl6SkFkQXY2aTBCT1VkQjBxVXVZQUFBTFdBQUFBSXBKUUNRdUJnSUNkZlovQStCK2tGUDNuR2Y5N0tWenoxK08wVGlOd3RQQlhEWlFVLzlIZ2dHVjBEUUs3Mk9yenN2LzRxUGR3bjBLUVNwQTZCSGc5SVU3YmdLSDk1dFRKUHNkWEF0em9IY0pXbE82czcvYXB1SjhWNkpIam5KYml4eGlDeFV3MmtBSTUzSExDaWltOXRSUEdwM0dqRnlsTHV5Q2FyRlBXVVJSVFZvQUFBREFBQURBRVp5V0sxSnZDdHBVRTRYcENuOE1ETGVPNE1yOXBCRlMxbktlTzFRNFJrYVFVcHVHdk1nV1pwU2lPMmNkMldOckVQUTBVQzRZVy9NYkJBQk5PWWlrKzh1MitQZzIzZUFHUFF1dXRsaURlYWlEWUxQSTFzVGIrdU53aC9hRi8vNWVUYXFuSUdKUUJiTXNVVHIrenNEY0JyYWQ4cm1oc0tua3JFMUFDa2ZyNEdsMEdxQUFCdjdQNFNSOUlVa29CSXhTOFdOUTFSWm1hZWZ2dGF4QkFqTTM1YytpTkNJOGlaS0lPalh4VUU0RGFsRlJ5OTZWTVNkY2hjS2I3Q3lad2o4WDRZQnZCbWtJZTJlK0t0VVQ2cXp3YUVEdFJFVzhNV2hpaithcXUzbjNNSnRsd3R0T3NrVzNvUFo1WXpnOHQvckpiTWZ5czAzODdXbnRMZlJrR3R0YVQyZmU4Y0xIUVpyb29yQUZKb2pxelBINWtDNDMxRHh1c25TTys5TEp1OFpxUFZ4UTVuZVlwQzBMdXdMeDllVEdCa3g4TVdWbkVvQ0ZRSkZ5QWdXeUZscFpiMHFURDJVSHZVNCt2bFJjK3RjTTlMNDIwL2ZtdjRLWUpLenRLN3lJR3h0R3gyT0tDbXVxLzZHZ1YxVmtCVW5OQ0xPaThiNG1QMEJsejZUZ21NcGsxTkdLN1hxMStDV0NZVkRuNmlZY0duVUZMQkUrMkdRbVpSY29XVWd4cm5rd0FBQUFmb2xBRWd1QmdJQ2RkbjhENEg2UVUvZWNaLzNzcFhQUFg0N1JPSTNDMDhGY05sQlQvMGVDQVpXQmx5RTNGRFRyV0EvZi9DWnYrV3FXL0h0NkZVdDRYcGxva3orWkcvenlvajRQY3lCSTZnTVN0WDRSa2dwaENWd3hHN2RmOXF6dC9HNjl5SEZJT2pYdmVBak10NVJwSnY5Y01CQmxkR1Q3YTYyT1JwSEpZbUFBQUFEQUFBbm1tVkxTWlBSa0N5dVVaRHY5WG9FSVdhLzJXVkg0SWxRRTgzVTVqT1MwbmFLTEZ3SnJiS2Y0QUw1eXpsTkoySVRDKzhFQ2NVbU9uUmdDYTloSkwrSjIzTndKSXhWUVhGaWpCYVhCQ1o5YURQcmR0Z2x5VHppUEozZ0hrRHdrWk1iRHdMN2ZwWHpYOXA0TzB1YVdBQUFVVHRuMmxybi9udWplTkVTNFFWckdhMnBSV0JwRWxLTzVlTEtBWURMZ204VFJ3TkY3VWZra0E5T2dsSVp2UmtLZW9zYkFsZUJNS0JvekJuQmc1SnhTNExCS08veWVzTGMzWnk0K2VrNmk2OFllaVl3Y1VqajltdXBwTGRaMUlCd3dHVjBVREx0YzNaSEJDSVhQb2dUV0Nlem03ZENPL3dKWG14aW5xcjJPbXpuK2VjNkV1dmlmcnJpTjloKzRWVEhISEJJOGJTcHUrcDRWTXM0Vldxc3YwNVAvZEFUc1VuSlZCVkF5QXpqZHNROUN0bHBQb0hrMUcwalJ3bU8vZzEySjJUUG9aUVFMWEtRcmpvUkpxVGcxNzkvOFFIVStQVFVOblEvQlpEQXNaSzczTm9aUFhmQXQxS0dFTWFXYlNRT20yRFZ3QU5QalNaTjQ5NjhWdEpnSVFKc3RJZEo4QUFBQWdRbEFHd3VCZ0lDZGRuOEQ0SDZRVS9lY1ovM3NwWFBQWDQ3Uk9JM0MwOEZjTmxCVC8wZUNBWllBWHV5RTNGRFRyV3YvNlY0ZGJGV1RCbjI1VzNZN3ZDOU10RGF6cVNCTXVBa2ZCN21RSXozSWptVHJnNnovdmhMbUhCdzRvOW1uRFM2UlNMMjE3MGErak41NDQ0aFI3dC90VWcrRHdWWk9jSWplUmpZaEFBQUF3QUFBd0UrNjJwK0VNM3VWQlovak9KUmYyc3FWdDQxVzBLSDIranNDQzNPNHpGaUZ2VnJ6SGlmOEhqVDFLZFExQ3hqTUQ4cXNSMmh3bStMMEUwOW8wTkFER1RJSkwrSjIzTndJeCtBTWhDLzRaZnNkQmhIOGlIWnJaVTZjNXI2QTNIRXhncCtlQ25ITFBtbDNaOGNkY00rUkZQb1FVazBTalRnQUFGbzI0WHpQZDlwVC9KUk8wZkg2NHEvdGM4N0cxS3pFZlFPSS9GRFJIRHhHRVB6M0w1ZjlteWIvNVp0Y1oyd3kwMnBqRGgvNWhIby9DMUQwakxYYld4VVVuSFZIQ0VydEpBbG9PRytIY0hFTU1HcHdOWjk4YThSSk5Wb1hkQllSRW1zakZFQkZxWVhGSnpWR3lrVjJyMExzSkoxRkJiMkd1RFlOSXNPSHFTSDRVVlEwUmhpY2ZzTVN1aXlWQUNmY1hHVVMvSFBEZ0hBbENLdmZjNzlEaGM2aWczMXZkanJLMU5XS2g0UmZDL1hJZytqbXppRkNWa1hGYXowNTZpemlGdURUZ29mV0hPV21DUXN6Mk1FODViU3ZBUDFNdnRBQ25ZT0EwVndtMmxoZVBvQjNqWTJZd0hsb05JQmVmMFNxNEF1TjJhOWxBeW8ya2dCYkVNRGJYNm0rN05ZZ3pSL0lmMEFBQUlmSlFBa0M0R0FnSjEvMmZ3UGdmcEJUOTV4bi9leWxjODlmanRFNGpjTFR3VncyVUZQL1I0SUJsWDQ3SVRjVU5PdFlEK04yd1QvT3k1UHhQN2g0anJOeUxOTlNkenFTQ0pQc2FSQmJtUGJTeVpjUUlKRCsxN05lSUY0ZmtQeXA3bk9la2xmTElKSUFZT2paM1JkR0NhYVFWQUhCU0VHb2hqM2pzb3R3TC82U1pNQUFBTUFBQU1BVHByNWtJRzVuOUtsVUl3MmRiWk5WNDl0b05sNDZ5a3VSMDA0MytQd0xmQjU4eDRuL0I0MDl1YlV6dVNCZ0FUTHJkNk1oeXFxQWJWSFlSbmdCRDhYMkIvdUJkUzRUbGZBWGVmY1hWMytpSDlDenJYTFlKT0x5L1hXbTV1bk4wOU5GV3dScjFrZWsxbEZFTjNlK0psdlpCRndBQUZjODVSR2V6U2hLMmp4MVRTdXRwN1pXbkdqRUJxenloOVRaQWVCblFIRFJhcXg5VmlIZFQvWTJJakF1Ly8vQmd4OVlEZzNKemovK1p6VWNHSVJ4N1NjYmgvb21lSE5ncEpBckkvZEpCRzYvMzhqaENqaENNOUJCdTlLSUovVGVucmx0ZFl3WUJLZzhJbjQxOGJYenNkSUxGQXhOSmlCOWRUcHBwUVI5ZW9SYXBheG1XeHJwZzgvMXp4dzBYdDN0UkM5QnJwcFlTYkgwUEo1ZW4vVStNOHowTkwxdEdyS01aVzZyZVkwcTBmTVI5YVdwUlcvMjU5WXRUeDJrUFdKSmVPSWtFYkVKZUxKT3YrSGVWZXJlM2JnL0ZDL1Z3U3RsenY2MVh4N2k3c1BEemVRR3pRcENPamZ6MnkrZFNrbXJaM05vcVdKTkpWRWNBQkxKaGYvMHp6Wi9HUUFXYzcrQVVrc2NwWTlETXZaODhMVGQzRlo5ZVZXNUFMMms5aFRlTU9ibm1Xa0FBQUNLaVVBTFF1QmdJQ2RmOW44RDRINlFVL2VjWi8zc3BYUFBYNDdST0kzQzA4RmNObEJULzBlQ0FaWFFOQXJ2WTZ2T3kvL2lvOTNDZlFwQktrRG9FZUQwaFR0dUFvZjNtMU1rK3gxY0MzT2dkd2xhVTdxenY5cW00bnhYb2tlT2NsdUxIR0lMRlREYVFBam5jY3NLS0tiMjFFOGFuY2FNWEtVdTdJSnFzVTlaUkZGTldnQUFBTUFBQU1BUm5KWXJVbThLMmxRVGhla0tmd3dNdDQ3Z3l2MmtFVkxXY3A0N1ZEaEdScEJTbTRhOHlCWm1sS0k3WngzWlkyc1E5RFJRTGhoYjh4c0VBRTA1aUtUN3k3YjQrRGJkNEFZOUM2NjJXSU41cUlOZ3M4ald4TnY2NDNDSDlvWC8vbDVOcXFjZ1lsQUZzeXhST3Y3T3dOd0d0cDN5dWFHd3FlU3NUVUFLUit2Z2FYUWFvQUFHL3MvaEpIMGhTU2dFakZMeFkxRFZGbVpwNSsrMXJFRUNNemZsejZJMElqeUprb2c2TmZGUVRnTnFVVkhMM3BVeEoxeUZ3cHZzTEpuQ1B4ZmhnRzhHYVFoN1o3NHExUlBxclBCb1FPMUVSYnd4YUdLUDVxcTdlZmN3bTJYQzIwNnlSYmVnOW5sak9EeTMrc2xzeC9LelRmenRhZTB0OUdRYTIxcFBaOTd4d3NkQm11aWlzQVVtaU9yTThmbVFMamZVUEc2eWRJNzcwc203eG1vOVhGRG1kNWlrTFF1N0F2SDE1TVlHVEh3eFpXY1NnSVZBa1hJQ0JiSVdXbGx2U3BNUFpRZTlUajYrVkZ6NjF3ejB2amJUOSthL2dwZ2tyTzBydklnYkcwYkhZNG9LYTZyL29hQlhWV1FGU2MwSXM2THh2aVkvUUdYUHBPQ1l5bVRVMFlydGVyWDRKWUpoVU9mcUpod2FkUVVzRVQ3WVpDWmxGeWhaU0RHdWVUQUFBQUIreVVBTmd1QmdJQ2RmOW44RDRINlFVL2VjWi8zc3BYUFBYNDdST0kzQzA4RmNObEJULzBlQ0FaV0JseUUzRkRUcldBL2YvQ1p2K1dxVy9IdDZGVXQ0WHBsb2t6K1pHL3p5b2o0UGN5Qkk2Z01TdFg0UmtncGhDVnd4RzdkZjlxenQvRzY5eUhGSU9qWHZlQWpNdDVScEp2OWNNQkJsZEdUN2E2Mk9ScEhKWW1BQUFBREFBQW5tbVZMU1pQUmtDeXVVWkR2OVhvRUlXYS8yV1ZINElsUUU4M1U1ak9TMG5hS0xGd0pyYktmNEFMNXl6bE5KMklUQys4RUNjVW1PblJnQ2E5aEpMK0oyM053Skl4VlFYRmlqQmFYQkNaOWFEUHJkdGdseVR6aVBKM2dIa0R3a1pNYkR3TDdmcFh6WDlwNE8wdWFXQUFBVVR0bjJscm4vbnVqZU5FUzRRVnJHYTJwUldCcEVsS081ZUxLQVlETGdtOFRSd05GN1Vma2tBOU9nbEladlJrS2Vvc2JBbGVCTUtCb3pCbkJnNUp4UzRMQktPL3llc0xjM1p5NCtlazZpNjhZZWlZd2NVamo5bXVwcExkWjFJQnd3R1YwVURMdGMzWkhCQ0lYUG9nVFdDZXptN2RDTy93SlhteGlucXIyT216bitlYzZFdXZpZnJyaU45aCs0VlRISEhCSThiU3B1K3A0Vk1zNFZXcXN2MDVQL2RBVHNVbkpWQlZBeUF6amRzUTlDdGxwUG9IazFHMGpSd21PL2cxMkoyVFBvWlFRTFhLUXJqb1JKcVRnMTc5LzhRSFUrUFRVTm5RL0JaREFzWks3M05vWlBYZkF0MUtHRU1hV2JTUU9tMkRWd0FOUGpTWk40OTY4VnRKZ0lRSnN0SWRKOEFBQUFmY2xBRDhMZ1lDQW5YL1ovQStCK2tGUDNuR2Y5N0tWenoxK08wVGlOd3RQQlhEWlFWQUNub2JBTXNBTDNaQ2JpaHAxclgvOUs3K25QT0dsNnc0V0VETDBWaU1mOGtRRE1HelRVbmJockpzOFEwbXhTWFBsa2ZYWDdiMG5MZVYrd3VyazZlbEYvL3poYVROclg3Z3NSUDVOZ0tJVW5OTG9pQTZ4THUrWU5ETXYxSll1enpwRkdUdGJFTC9iR0pkcjJieTI4OTFsOEhzLzdVNFdNSnQ1RmhENS9JSDBkM2NPV0RuT2FCbE93T3RtRDVNaXBBUCtTMStlYS9pK2FXZUI0eGRTcjdkcDFVb21UQUoyb0pUdkZLQWlTWHNuU2lrNXBvbDJRNUhIQ2t4T3JoaFZzUGJPSzVVUDdvKzNycC91TmtsNlBNZ0dNaUNmQU8vNzh1cGhhenEvYm4vSlAxMVpGbWJsY3Axb2JWQnhBaFE4RHNIakRoRFJLVTRkYnB4cmxHZG1kdytNSWVOeE04L0p3RWM5cU9WL28xekhkSjNvSXg3TG5ndEgrZklwVGxCMlpZUHFwRG12VU0yTm1rODR0Y2NXa0l5Y0l3OWNtK214SGhQT2VBMnFFMUNxVWUxMEJyUkF4YzU2Q25MY2JYdisrUU1lNitEMHdGT285RFFYSzF5VE9ocm1JOUdzSmpSVWdjdXl3NnFIbE81M3ZuYm0wd1lrVE1pcmZYWWhOTUMvZ21mQjBDM1dKSXZoUUJrZFR1WW4rWW5mQmxDWFN3aUU0MGFCZ1d3eG1yM1VURXBUSVFQZDZQVmFuTmtORm80b0picDRBM1NzL2x2Ny9lYnlFeHl0QUFBREFCQndHRHF5bGdKMVpjeFlJZUJNZ01LRVBBQUFBQlVHQlJFRGgvUk96UXBMM0tHVU9zUFVteGNmQUlBQUFBSEVJZUVKRUU2Ly9xbVdBQUZ1RjB1N3pDWlh6Ny9ESlZ2REhJenlPei8wR2x6K01uREpjRVVaS0N6aEpFeWJZOHd6cElNNXZHMFRwR2plM1lpUEp6UUczaFV6bUN3QVl4VGlFZmkyRHZ3OWdVUHIxOWVlbzFXeUdvZ2Q0MVpYcTRlWGxYMHlxWDZQNmpuV3BxZG1RZHYwT1JCK0lDd1dnYkxHanhKRW5NY1ZpVU10ZE5NclZOUGYxVjZzbTlvNWhIZjVLMTl3QVBSNGlacE9DYzJoNU40QmFZbTI5OXhTSHFkY3JUUGtLbGpNWmRVb1ViWlI2a2RZR1Mwa1BHV21FVjZjRmdidGFGejFPcTRTRVB5RG1BWXh2SzI4N3FrWEpxSTNIM09Nem01S0YyeXdjUjBEU0JKdFBOZTVEZ2lqUGllZjg2bUp4UTdhS2tEOVl5Qmo1NnNvZ3dwamdSN0pvcWVWS3pWRlZXa0VNNW1QeVlGWHdvM0lw';
        assembly {
            return(add(data, 0x20), mload(data))
        }
    }
}

contract StorageSix {
    constructor() {
        string memory data = '\';
        assembly {
            return(add(data, 0x20), mload(data))
        }
    }
}

contract StorageSeven {
    constructor() {
        string memory data = '\x00S2E1ekhwS3J6M2J4ZU1BNjd2SGNxRnRzQWtlMnFaWUJzd0FBQUFWQmdVUkE0ZjBUczBLUzl5aGxEckQxSnNYSHdDQUFBQUFFd0dwUjJJSTF3QUJQdFBvQ0g5Nk5wUXhUR1FBQUFBUUFRQ1FxVWRpQ05jS3BMQm00MnRaNFFBQUFCSUJBRWdxVWRpQ05RQUNvaklGMjA0YmpVQUFBQUFhQVFCc0tsSFlnalVLcExxK3NndTJNTnlyb0JaVmE1WTRpa0FBQUFBaEFRQWtDcFIySUkxL0NxUzZ0a3IxV09YdUFGdzNwSEljTHhJSDRPK1VPWjlBQUFBQUVRRUFMUXFVZGlDTmZ3cWtzR2JqYTFuaEFBQUFFd0VBTmdxVWRpQ05md0FDb2pJRjIwNGJqVUFBQUFBUEFRQS9DcFIySUkxL0NxUzBqbnpBQUFBQUZRWUZFUU9IOUU3TkNrdmNvWlE2dzlTYkZ4OEFnQUFBQVpNaDVTa1FUci8rcVpZQUFXNFhTZk5JV0EzVmkxNERXam1kYXJQNXN6YUU3aDFLTlRKUXRRNWc4RW1VblpSVmVFMWtxUmRUdHM2dkp6UHN0aE5WMkN1UER3ZzZNeFFhYjBKa092bGo3d0xNS2x0T2k1UUlmZnFVTFJWcDNkRllSUE1aeDBGc2NpVHBOQU9jMTI1MGZxY3pIL3pvQUJHL2FyUFo1SzB2TVRsYUJEcmNQNVBMNG82TDJmS1FHOHNwTzBHUGJNdzNtK1RGeHpQVVVoZGRxaEFNcUk3RGYvOC9FVGQyODJzOGlyclEzL2owYVNma3FRWmNjcGoxTDdJTldLQTYxOVpMc1FWMnl5S1VoVjQ1M1dtRVFZQTI5K2ExMXpCV3g0ZzdjQUdlTXpybWRNS2sybmZEblg1T0pBMjFtQWM4VXlDdTBydVlCRklIWWdMV1RWQWtLcGFaVjhFNXN3bFlFL2xIZmdGTkpIOWFzbW12dksyME9ZQ3ZYblY2R0Q4R21vby83YW9oSUl4ZlFBQ0h0bEZSSGkzdDJFaEFEWTRQQ0pWV0ViS0EzUlIxMmg4eEhHSDcwOXBoVkZWT1JPWEZkcVd5ZEFDMEczT0VXZ1Zuc0RqeW1tL3ZocmhOc1BaS1FtWFBIeitjUDZXT0VDYy9XdUovTmJHQmNQYTFPTHQ1UkxQK1pQaXJSbWd6Zi9aaXZMeGNqVUVoQUFBQmxpRUFrT1VwRUU2Ly9xbW1vRjVZMS9ockdWZ0xtbVcxODcrNXd3Y093TU9hcjNGaVVRdkJ3bTNobUgxS0Y3L1A0aGFCVXg5VUdmdTNhSFFHNzJ5S0F6RXVJMTJlVFBOdUFDaHVWQzBMZTNKcVdiRXlZc1RDdEdKOE91Ykt6QTkyVDhkc1ZGUlArbEt6YVpWdThZKzlJbkxqTTIwTUFLY2tIVXJuWFkwZ3FvR0N4WFcxMjhGcU9XM0RBRmZXZ010QlJnWGlFQnJCODRoWURlL1BoelQ0NWk4UjZnWjRacDUrM3ZrMEFCdE1KRFBuUUhLaGJDWEdBZmFRMGxiSmlVcUFrMW91RFF4bVkrU2pRRCtpeCtkRnJ3QmFKRGQ5ZElDYWVudEoxalRWZlZPTVZ3QUFUZU41UlQ0N2I5bDFTVjlIQXBxVVhiMlVQUUJ4UTl1T0tPZEJkYTlHMHFiWitMUEZDbEg5MHJsb0F6ODVVcjM5U0xuQWVnSmNxWU0zaVp6ekVnUDhncWkyMDl4RjlYVVZuUWIxb3ZFM1U2MVNvbDJnMXlHQ29xU2Q0VjRnN05qRlhPenFWR25Cd2w4WTZUeTNCc0xwRTJOL3ZjWTgwVzdtR1hLNVBUdlc3bG5sZVhpT2ZiZlkrSDk4RkJYNytkSHRiSHdJYUdlNDJyM2pWbzI5enZ1OS9TQkMrWWFpbE51MmxLNzQ0cDVFWlNjbncwQUFBQUdFSVFCSU9VcEVFNi8rcWFhZ1hsZzBiQTFqTHJuR2Q4cFRsMlo0Unh4TWo0T1g4SnZsQ29DZ2paa3VudVhiYy9rQktkUkc3NXpyWG5iYm9WVkJmVXBXa25CLy9HQW8rYzFUWnZuMmhiMjVOU3pZbVRGaVlWb3hQaDF6WldZSHV5ZVB5akhoUWJtRHhoaktGandMRjE5THIzRnBQZkFDbklqN0wxLzhGVTVrSVpKa3Z1UlEzYjdtWU1ZdWVOOCtrRHAyKzNyeHVUeUFHcmo0bzB5RG5RVWpsa0QxT3ozOGtzVUZYUnVnbk9oUk1oSndZTFVhYUlpVmZFUEtwOExtOFo2bjlDODNFRWQzVGwzWkZ1YXFhRVptRG10MVVuR0JBQUJaTlBKRzZQeXdhVTRaVm1TajVoODk5bEFPaDlkS1dHNG9TaWFZWWNhZFdhOEhPczYvVHB2S01nSk02REU0U0xpTDR6ZlcrZU1vUS9Gb1hwTEdBRkUzUjQ3OFdpQ1dIUDVoTEl5MDk0TTZSLzF1eG5qTFUvNmM2N2ZwQWcrMDM5YUd3enZQQTZlRFlCaEJhOUE1OWFCc3Y1eTcyMmJ3Q09KL1JMYWtnNlE2V1R4WW4yelRhMzhOK0JXSHRzNThrZFVCSFhDdkVXSm9PK2RpUTFzME9ocHUzTVl6QkxkL2hwK3p1R3NRbUFBQUFZOGhBR3c1U2tRVHIvNnBwcDlVQzByODNZeXV0YzFxWGNQYkNQalIwbjMycWdUWU0xcVFJd0ViS3MvRlJoVS95QWxPb2t3T3R2WmwwWm5JNFpnRGpiTXBqNER1dkp2RWpteWZ6emRGM3R5YWxteE1tTEV3clJpZkRybXlzd1BkazcvbDh4U2xMdFlZUHZwRENEdlB1L3BPQUllRFAvUmdBcmhQY1VWaWx2cy9vSExCYnlZM010eVJuZCs4VjBCZUlVOWVERm9RbkxTaTZWUy80VUo2Z1VMN1hSWFhoMWh2TWpsa0VNMExNOUMvQnlLdVd3TnZwalIxRHQrVFFhSjRNTU9wVUFWNnVmUWUyL2g4b2tIQm9LdTNQbXJ4OGM1QTEwSVBWRmR3QlRZYm5WTFd3QUFZblFTYzYrWGlLa1BPZi8rbG1IMTVOeGUvVmZPOGFobmF3TDJJZUQ1ejgxVEJGZ1JjeHZscmpnUmdsYUc1SE0yRXowMkFDR2hESHNUZTFaVDRtNGoxSCtETDBTenpEa0U4eE8yd0xKaWZKU3Y0N3ZCWERGRmZmMXd0d0d6UkxHSmNnZ3U4NXB1RnZKKzlFdUg3MWtCaFduc2tacnhJUFRmUzMydmV0eVc4TkZxU29CSmovVFBWZHBOTmlhcE8yakx5L1R0UWdBY1M4UWV0TTB1OVlZYUk1Z1dUZFYxREFSQUhIWUFBQUFHVElRQWtEbEtSQk92K3FhYWdYbGpYNXV4bGRhNXJVdTJLZWt0MndtV29LZmE3bEZDb0VSTWFOZmQyZFo1L0lDVTZpTjV4M1hLZkhrZVZrYlVPTm9QRUgvQ0cvNjRkaisyMEs1dEYzdHlhbG14TW1MRXdyUmlmRHJteXN3UGRrL0hhKzNEeXAvMTNKZEorSUI1K0w2R3ZXRmVXbFU0QUs2c1RPVzhJNDkvT3h1WkV3VUVJNmxxN2tyOFhiWU9kNnZXd0FMY1NETFp1VUhIWjRwVWk0aEx5N1UyWkhMSUhxZG1HNjc1M2Q2UTNBWmZ3NVhJQWNDZk9nSWp3UURvRnV2ZGFVaUVQQlZIUklJeklpMkExc01wR0FwNGlzRWtDZzRZcFZvV1d2QndSU1dsTFNPNUlBQWNqcjFHZVNEdllpYmV5cFV1N00wUXRzMW9nZmJOR2plVjBnb2dYcnV0SzdEZ2cyaXZXRzdoUjdobzBaZ2VjM0xGaWhoUVhFeFl3d1lBQ1FvZ29xOUdrWUlHSzdDUEtYc09xZVZNSEprS1ZoS0FYejRiR0szak5NQjY2OE11SG5xVkR3eWZ4ayt1b3NEL3JNQWgvSDZQcEFwL2pqZ0V5SDdEeFZLeld5ZnFiK3YxdVJJUWh2Q2szK2xCV1ZFb3lwZFlFZ2VvNTM1Tm9EVUdXQkFPL21yUkgzdmcvdXc3Sk5UTE1ZdEhhVUFBQUFaWWhBQzBPVXBFRTYvNnBwcUJlV05mNGF4bFlDNXBsdGZPL3VjTUhEc0REbXE5eFlsRUx3Y0p0NFpoOVNoZS96K0lXZ1ZNZlZCbjd0MmgwQnU5c2lnTXhMaU5kbmt6emJnQW9ibFF0QzN0eWFsbXhNbUxFd3JSaWZEcm15c3dQZGsvSGJGUlVUL3BTczJtVmJ2R1B2U0p5NHpOdERBQ25KQjFLNTEyTklLcUJnc1YxdGR2QmFqbHR3d0JYMW9ETFFVWUY0aEFhd2ZPSVdBM3Z6NGMwK09ZdkVlb0dlR2FlZnQ3NU5BQWJUQ1F6NTBCeW9Xd2x4Z0gya05KV3lZbEtnSk5hTGcwTVptUGtvMEEvb3NmblJhOEFXaVEzZlhTQW1ucDdTZFkwMVgxVGpGY0FBRTNqZVVVK08yL1pkVWxmUndLYWxGMjlsRDBBY1VQYmppam5RWFd2UnRLbTJmaXp4UXBSL2RLNWFBTS9PVks5L1VpNXdIb0NYS21ETjRtYzh4SUQvSUtvdHRQY1JmVjFGWjBHOWFMeE4xT3RVcUpkb05jaGdxS2tuZUZlSU96WXhWenM2bFJwd2NKZkdPazh0d2JDNlJOamY3M0dQTkZ1NWhseXVUMDcxdTVaNVhsNGpuMjMyUGgvZkJRVisvblI3V3g4Q0dobnVOcTk0MWFOdmM3N3ZmMGdRdm1Hb3BUYnRwU3UrT0tlUkdVbko4TkFBQUFCaENFQU5nNVNrUVRyL3FtbW9GNVlOR3dOWXk2NXhuZktVNWRtZUVjY1RJK0RsL0NiNVFxQW9JMlpMcDdsMjNQNUFTblVSdStjNjE1MjI2RlZRWDFLVnBKd2YveGdLUG5OVTJiNTlvVzl1VFVzMkpreFltRmFNVDRkYzJWbUI3c25qOG94NFVHNWc4WVl5aFk4Q3hkZlM2OXhhVDN3QXB5SSt5OWYvQlZPWkNHU1pMN2tVTjIrNW1ER0xuamZQcEE2ZHZ0NjhiazhnQnE0K0tOTWc1MEZJNVpBOVRzOS9KTEZCVjBib0p6b1VUSVNjR0MxR21pSWxYeER5cWZDNXZHZXAvUXZOeEJIZDA1ZDJSYm1xbWhHWmc1cmRWSnhnUUFBV1RUeVJ1ajhzR2xPR1Zaa28rWWZQZlpRRG9mWFNsaHVLRW9tbUdIR25WbXZCenJPdjA2YnlqSUNUT2d4T0VpNGkrTTMxdm5qS0VQeGFGNlN4Z0JSTjBlTy9Gb2dsaHorWVN5TXRQZURPa2Y5YnNaNHkxUCtuT3UzNlFJUHROL1doc003endPbmcyQVlRV3ZRT2ZXZ2JMK2N1OXRtOEFqaWYwUzJwSU9rT2xrOFdKOXMwMnQvRGZnVmg3Yk9mSkhWQVIxd3J4RmlhRHZuWWtOYk5Eb2FidHpHTXdTM2Y0YWZzN2hyRUpnQUFBRXRJUUEvRGxLUkJPditxYWFnWGxqWDV1dUVZNG1yMzNjQUdmK0JISDRNVjI3SDhkQ3cvaWs3MFBGQk1GNGdsWUFJYjdNbnhhTFJ5WXRFOGxpd0s2TG9JaXF0dUY1czVhQWh0QjdxaWtxNTlZOE9OMC9pUWZCcXRZaDFNWHBEaE1wTlVoYXE2Wnl4YjZjYWwzTmQzWWpDZit6OTUrMS9ZZ1ZENnZnMm93WUFpOW1nb2twcmpPOUxxYk9wZzdJOXhIc3hHKzZPdzRDdDhhV2xkVTZLVXpBQmtoazNlQ1RzbGZ6SlZHSlJuYVp4eUdiVGlBOHJZYVlEcVowNGJSSDhhakNQcDVudWwrUFl2YWxra2ZPS0t1R3FwelVvQzRhNTk0U2lhQVdNOHF2ekF3bmpqa21FSWxSeStqSDlyOHY2VlpId3BVRWZCN2hlQlFaK3hzUnFKdnpIUEdaL0RSb3ROUGFQVUtqNklESEN3OHJaWVhSaFVweU10WTdIbkpqaWwyUHRORHVGNGc5QUxodHFtV0FiTUFBQUFCVUdCUkVEaC9ST3pRcEwzS0dVT3NQVW14Y2ZBSUFBQUFCVkFhbUpZZ2pYQUFFL0plZklETGZyWmRYOGdCaHlHbGJEVmM3QUVubG8zbWNSN2dXRG5RVUVYeHRhczJSRDdsTzk1K1VnNzhRUDYzeTdYK01BNDQvRWdCZ2hjcXZrSGZnbFJzVDdyT3R2ZEI3K0lSWkJlZ0FBQVlNQkFKQ3BpV0lJMXdrakVlK29BSVBySVQrK2dDcENUME1NWmtUU2MxS21CN1NXMlQzRnZaTmRlS2xDUFZxeHBRSWxISHdFbDd1WUZpUGpwWnlEc2w1dndlK3pmWHFwd1VqdGVNQ056cjQ1cWpzNlR1d0FBR0xIUVBwbW5YU2VIdWhZNEtZazFLNmVIdzhKWVNEWE51aTQvaHNvZGg1WkV3QXUrTGVSNzFoeklFVDhjeFh6OTdlTE00VFN2U3JlUnBmc1RmOHk5UEU4aTRoYWpoeUZaSlovWkxJeU9RVGo1eStsb2d6bkh1YytvSWZmWmFvT1VoZUl0YTE1eVZNcXJLVUtnb09wQ3RXSGxmMkZVVWZKbE5SaVVvanc0YUpwWER2RlhLRDJYamgwL2Y4N2NsZk5xQmkzV1lKYnBZZEVPcGx6eXUzWXF6bGZldW5KNmJ5M3RRbnZkTmhRMjVNMy8vT1dBb2VZSFZha1pQWU9VQzMxVDhlM29VaWNLbVEvUEtwZTNrUUF6ZU1GZmpRUlQvUUJSRWdPcTExRmtNSlZiY0w0YjZsSXQ5bkRkKzBQSU95WFFXZjFVbGo0RmxFL3hMdUNVRGJVeXErYkpjSEhQY2VXV3N0VlFNck5Wbzc1Mmx1dFJGVnY3blNXNWZMWkloM3d2My9iaGREZlV4ZTRGV2U5RkJBQUFBRi9BUUJJS21KWWdqVUpJeEh1d0lBQUFDQlc4ZGduOTFndU1qYWgvWnhMQUpBNlkybHlEdE15aUNTQmlscUw2QmlCcUpTcDRTdlZlWUpEQnVFSmtTMGcxZUNIcFJTMFZUNkd3cjZJSHZLK1c5bUc1ZkNKRTJZQ3cvcU5vMW91THcyMUhIQlNxbXBQOXc5QzQ3WksvNDJBenlINWM0SWVjVmliSnlXNUFXY1N1Ymt0NllCc2VSdEhEb044dnpWaVdnZ3c3UHZTWDBzcExQQzJYN0xSTmowSTNoS3lTMEJQQjVKMjgyaHZKQWRDVE5nZWNVcENJZWxBNlV6bldLRysxdURHbnZYS2FwSXZoM20rYzRFbzkwc214NWtJTisxNUorVDlaRU1tS2dFVFdiWFcxditCcHFrVDhFbCtvUENMdTNnbUVicytkQ3JlSDhiUklObExoOFBZRHEwVjdGc2xCV2h2QVV4Ky9xMDY4bWpUSGNqZ1F1SDROS1JzRXlTSXNBWFBDaFRJbUFPa3hDWXVQRGlkeUdXUkpKWmg5ZFUvTEpvMDFlLzNxSWR5WjBQVVEvc3RkZ2pnY01WaFNzSjhuZmh6anE4d0N6dkJKelkzd2RveS9EbGhXaFlxQkdsYi9JdjRBYmhkRGZVMmlTNnI3UkZaTG0yRkVpeVhQdjRxSElnQUFBR1pBUUJzS21KWWdqVUttNGZRSUFNcDFrcnhqNUtSQUNUdldLQm9udzR6dVgzSFF0Z0lKZVN5UWl1UlNHckVPbmhHUXlZN2VQc0tSMUhubE5JNGxaNXZ0SGsydnIvdnVzb1MyWWRiNHRrUGhYcjlvZ1lIbHZEckJYeWZaWk1rbXY0VGZzRHkveGtPbnVHWTlPT0xWOThOSHEwWktoZDRhdjFoOUcwQlNreVpDbGowZTd4WkF5cjdROWU0R2ZJYWRyb25OZVZxbXZVc0o0N0RkWHNISVBJM2hySGliQnI5bm5wMkREZFZDN3paUTFZS2ZWSS9jRERuQkk4UFZTU1BEN1Qzb1RHMHlUQjU2ZlVYUEhLaEdZbzZITUtoOE1WT2xmZTNTdUM5TGZzSHNxRlFBcGN3b3lYalVNSU5aaDNPUEZpeEhZMm84ZFRvWklzQmJPMlBZcHBrNXRrQzM4S1hDTnJxaTlramNkWUFqWGk1NjRpTmF2ZTRPR3hBVU83bXdzVjdGa2FyWFZPQUlmSHpVMmFtQVpacHFmUU9ZRDlOMUw5d3VDcHpLbG1WbW9vK0pRaDhyUWFnQ28yd3M5UUVGQ0N2WW9nNVFMZlVzaVM1YkJTWlI3N3dWOUFQcXlRdXhlRlg5ZUlMeERocEJuOERBbVJCbE85YUMyRU5sUmtuaDhzOU1FRkJxdllsZzVQamZVb2lTNDdCU1RSNzNVYVJPcHVZbHdBQUFZUUJBQ1FLbUpZZ2pYOEtuNDhjOUs0LysyUGsxSUFBS2ZjOG9KT2JFbU55KzQ2RnNOamEyKzUzNzhCRzFZOEdVSXlHVEhiMlpqaFR4bzJ3WkhFclBOM25vMmxjZ2w5MWxDV3YveWdWdnIyQmRmbEhCdzh0NGRZSytUN0xKa2sxL0NiOWdlWCtNaDA5d3pIcHhvSFlQY2dld0kwZjgrc2loV0E1Mkt1SDJZaS9aR2tJeWFLVFkzamFSOWFrR2pOb0pyZHVxcHI4TENlZXczV2ZCeUZpTjRmeDRuQWEvYTU2ZG9SU24xZnNoVHQ0RWwxTS9RMEpENTVLazVRT1JUYnNSNG8zMGp1T2MzOGh1NGtteDNrSU5tSkxQK1Q4NHNZNktnRDZwdFZOWVRka05KZjVKVzNtVzFLd0ZxYmJBd0ZDZmdDSnRPMVdWNXVlZnZzK3loWUVpM3c5L0VTMWU4L1phakhRb1p6c1lMUFRwQlFVcjJPMFlxN1dzT1ZLZ3A5VWQydS8vUzJPcVF2OFlyMk8yVHhwMlA5cUJ3ZHZQbjZIVGVJeWltTVhKWHFGcWEvaEJwaitEY3AyMlM1MS9GR3p5VEpiVW1FanNhdHNuUkh0T0dZbHUvdWFIam5CQ3g3NDB3RzdVMHJtSDBheWFYWjJTNnQvRTd5YVB0WHdYNmlMOG1kejFFc0pBQUFCaEFFQUxRcVlsaUNOZndrakVlK29BSVBySVQrK2dDcENUME1NWmtUU2MxS21CN1NXMlQzRnZaTmRlS2xDUFZxeHBRSWxISHdFbDd1WUZpUGpwWnlEc2w1dndlK3pmWHFwd1VqdGVNQ056cjQ1cWpzNlR1d0FBR0xIUVBwbW5YU2VIdWhZNEtZazFLNmVIdzhKWVNEWE51aTQvaHNvZGg1WkV3QXUrTGVSNzFoeklFVDhjeFh6OTdlTE00VFN2U3JlUnBmc1RmOHk5UEU4aTRoYWpoeUZaSlovWkxJeU9RVGo1eStsb2d6bkh1YytvSWZmWmFvT1VoZUl0YTE1eVZNcXJLVUtnb09wQ3RXSGxmMkZVVWZKbE5SaVVvanc0YUpwWER2RlhLRDJYamgwL2Y4N2NsZk5xQmkzV1lKYnBZZEVPcGx6eXUzWXF6bGZldW5KNmJ5M3RRbnZkTmhRMjVNMy8vT1dBb2VZSFZha1pQWU9VQzMxVDhlM29VaWNLbVEvUEtwZTNrUUF6ZU1GZmpRUlQvUUJSRWdPcTExRmtNSlZiY0w0YjZsSXQ5bkRkKzBQSU95WFFXZjFVbGo0RmxFL3hMdUNVRGJVeXErYkpjSEhQY2VXV3N0VlFNck5Wbzc1Mmx1dFJGVnY3blNXNWZMWkloM3d2My9iaGREZlV4ZTRGV2U5RkJBQUFBR0FBUUEyQ3BpV0lJMS9DU01SN3NDQUFBQWdWdkhZSi9kWUxqSTJvZjJjU3dDUU9tTnBjZzdUTW9na2dZcGFpK2dZZ2FpVXFlRXIxWG1DUXdiaENaRXRJTlhnaDZVVXRGVStoc0sraUI3eXZsdlpodVh3aVJObUFzUDZqYU5hTGk4TnRSeHdVcXBxVC9jUFF1TzJTditOZ004aCtYT0NIbkZZbXljbHVRRm5Fcm01TGVtQWJIa2JSdzZEZkw4MVlsb0lNT3o3MGw5TEtTend0bCt5MFRZOUNONFNza3RBVHdlU2R2Tm9ieVFIUWt6WUhuRktRaUhwUU9sTTUxaWh2dGJneHA3MXltcVNMNGQ1dm5PQktQZExKc2VaQ0RmdGVTZmsvV1JESmlvQkUxbTExdGIvZ2FhcEUvQkpmcUR3aTd0NEpoRzdQblFxM2gvRzBTRFpTNGZEMkE2dEZleGJKUVZvYndGTWZ2NnRPdkpvMHgzSTRFTGgrRFNrYkJNa2lMQUZ6d29VeUpnRHBNUW1Manc0bmNobGtTU1dZZlhWUHl5YU5OWHY5NmlIY21kRDFFUDdMWFlJNEhERllVckNmSjM0YzQ2dk1Bczd3U2MyTjhIYU12dzVZVm9XS2dScFcveUwrQUc0WFEzMU5va3VxKzBSV1M1dGhSSXNsejcrS2h5SUFBQUFUd0VBUHdxWWxpQ05md2dILy9FcVFBeFZmcWZsQ2cvUVdjNGZSWE5DcWE2dTRUa3MvRnhsb0ZNY1M5bElHTW0yeDc4Z1VXS29jcytma3Z3TTQ5NHhQYzhkUjl6RXZUUU50YzI2RFVxZ1FzQUFBQUFWQmdVUkE0ZjBUczBLUzl5aGxEckQxSnNYSHdDQUFBQUJaQ0htTVJCT3YvNnBsZ0FCYmhkSldQc2tpZnQ5VkZBT2tFMVkxUy92RVJ6MUMreTFxUTRWdGphanhJdWZ3cEF4ZUIxTi9IWWM3Z1VNOXRLWUsvcCt5c3dxelA3NkV4ZC9UR1lwdndyLzc2RmUyaGZGWm5KcEMwWmVSNVExNnhiUnZQeGg2ejFVbjFDMW5keUpObkIxQUZWQ1BSOGdGWld5RXFZYnhCNmlBRkZ5Rm96YTJiQUZhYkZjdFRXMHdheHlhZHdIbWJlaHowaDJiWnZXS1UyenAxNys3NGdUeEJnQVZUR1JpR0V5NEhtUEFBUEFWaXhNWlR2ZEFGeWx4UnZYL0dLbWkyUkNZQVU0dWlKVnY4VCtsd014QThqQUhkS1kxbERnQ0szbzdLU1dFbEdyVjZzYmU2R0lpa2kwR1I5eEREd3ViTmNiQkorQ2QrdlByd0FjR3VkTi9na1hvYnRvQkRVdndiaTBZdWs2ZXFFYVVFMmdDWnZvWS9WdVlHcEIxd2RGTk0vZUpGYmp4TkhwcXFodVdaaHJZYVpIa1p5c3VNbmFSMVp1RWhXNnViZndJbG10TFBZSGVyR1Z2OTVFYkdUUHpHcW1tRnYwcUc4TlIzRzErK29ucm1hUUFBQUJhU0VBa09ZeEVFNi8vcW1tb0Y0bVF5MnE0N2tiSVZZeTlnaXo3RDIySCtEb2pSdStlU1VXTWNNbkVkclgvZ0VwUDZVQUxNZnhXSlJJQWJGUzQ5bkNSVVBGenFXYjViR3phSjlRWmJxclltVEZpWVZveFBoMXpaV1lIdXlmanRZekVVanZyL1kxUGtGemJrWmJxUHRKR3ZKTnl0WUFLNnViaDFYeXdkTmdhNHlRalowRFRIY2NXcTlodWJNVzZkMmhFS3N6bTAweURuUVVqbGtEOUJEYVo4Z25hNkRWenpaUmVUckJ2MkJQM2NYelRRU0ZHbXdZcFNjN3JxcDFuaW1PaE54bWkvT3ByOXpha3o0bXVWTHA4TXd0TmdBQU5UQ2RlQ21ib1BONkhoZEc2aStyOHJsanVTS3ZxaW9YZHBoT1ZMSzFtRHcwR0drc0pGU1k5TFZxeWdZQWhNMjBtMWQ2THNHSHVQUTY0NXQvb3hrRDJrUmpYeDZ1NGc4VTBEQXRYU3dPUjFicFdqaWtJUGU0bjl2c1FJekh1NkdIT0QxTXhFcDBqOVBTYktWTWhkTHJlaFZWckd2R1R4dFB6bXZhUWFTelRTVm52NmtHQ0V3Z2xURkFFM2N0VWFVVHJjZ0pSZWdBQUFGbElRQklPWXhFRTYvK3FhYWdYaWFIOXZkUlhXbXNmTjFkdnh4QnRESjJPRGpBZjFxb3ZOTHAzZG1jUC80Q1UxMlBFVkpzV2VHODFiSnRZSlRJQkN3WEErU2tZL0RKT1RyaGxXNU5TelltVEZpWVZveFBoMXpaV1lIdXlmanRZeVRISVhIdU9HZWpCNEhtOGhGYmZZWFUwejBhN0FBcHlJL01MSjdqWExoeFppNnREQUJZZ0FBQm5BTWFkU1M4YWlvek16ZWhXZ0duZXNaVElnYUFBeWFHMkdEWXpkVjhjMGdCZVJtdzBLck11M3BtcDNpT2VlajNZWFRONWxTYXdheHNjSEFabWR1OFk4WEp3My9JVUFBQU9RM1dNbFhSdkdlaVBpOXg3Ly83cmk0RFYweW9FenpNWW5XSnFIVGM1dHlBQ3d0REpLaVpaT2s1bnV1WXFDRUR3Wk9Zazd4S3lMdFdHdC9LNXhlUlVDbVJzM2lWczE5aXV1aDdyK2pxU21Hc0Jod0ZuN1lYR1k1RlRyenVZQ25WQ0lBdlgrVjloYzVNMGd2VjNTT0xWSUIxVWozN0RERy9DYzBFaVV3Qlo1S2hrekhjbkVndVV2YUdaM1dudDF1YmY3V2FiblB3QUFBQlppRUFiRG1NUkJPdi9xbW1vRjRtUXkycTQ3bG9DZEZCaWJBU0doQS9YRWxBcWorTUJGU0V6KytaYkdQOEJLYkVmaUtrMk9MRVp3Mlg1bjJTWlcyUkdCNS9mek9XTFVtOUdLdHlhbG14TW1MRXdyUmlmRHJteXN3UGRrL0hhMU5sKzQ3TTlQb0FBQXlUT0I1eEJUcGl4WUNaMnlTQUJUVUlkSitacTJ1V0YvdDNIbU9TalBtMlV1ejhlV05XOG5XK01KTWQ4dURJZmhtRXVxeEI2QU1lczlyWFR5ZEg5aFZ2Qkg1d2FJTjRadEM3OU42R2RUN1c4Zy9uVkg5NGRUM0lFTTVVQUowRUlvdnBwb1Nlc2N0akV1OUFOSUFBQkNlMVZkcW0xVGZ5STZUcmcrOFRxbDBrK2xkdUxROEtKNmU5M1owZzJpZUxoRzRmMVZsQ3lFdnBLMG9iU0RVQVV2bG5yRlZScnZqUXFVamk4bm96Q0NwQ0E1bGF6eFdBL3p5Tm16Vy9kZjZqT3dzNWFPRFJPSWdDZjZjekJ5cWRFOW1mVzhvNi8xN2g4M2loT1htSWJxRUc3NCt0K0dFQVhRa3BoVXdZb01BekMwWUhvanhacWJHQTltSEZvSWVVR01BQUFBRnNJUUFrRG1NUkJPditxYWFnWGlaRExhcnFMdXROK1Bld2xvemhnNVQ3N1VHVWQvaDNQR2xrZFBnSm1qOEFsSi92b1dZMEE4TGNPU1hpbkF4bTBVOCt3bWFhd0NJcmcvVUdXNnEySmt4WW1GYU1UNGRjMlZtQjdzbjQ3V012eFUrTzhoczVxNmI4RHpkc2lqZUQ0NUQyT1lBTjluNmxaRGlSOFhiS2JXQ2dBSlR5RlhUNC9hN1VralRsV1pOVW96L3A5QzI0Z3NJVFlBQkhkYmE5M29wWHR3NXZsUDdzeXdvMEoyVU5DT000Y1FLeGF2MUtGV2tXa3h4WExFNHNjQ1RNTitQZ0RPbUM0VjMwNS9CVk53K00vS0dBQUFTK3pkYUFsTHo4L2VyektrOWM2TVZTWjNDN084UW5wQ1JpbXRSK0U1SE9vUlRBUGRFNjhKTUZQbFhaTkFXSEIyQWlkZ1A4R0Myc0Y2d0FGL2RoZ0ZWWHlYR29OQnFiM3ZyZ0NpdHdrbCsvcmFpSG52TEd5allLU3ptUzZub1V1aDBTRHJBL2VUbjliTTVHYW5ITVVrTWJXWG5qN25BZXZoRWNRSEFBQVJzUHprSDNYbTR3SFhvYWUwU21iY2FmWjZCTktwYTZWVjhBbUFBQUFXa2hBQzBPWXhFRTYvNnBwcUJlSmtNdHF1TzVHeUZXTXZZSXMrdzl0aC9nNkkwYnZua2xGakhESnhIYTEvNEJLVCtsQUN6SDhWaVVTQUd4VXVQWndrVkR4YzZsbStXeHMyaWZVR1c2cTJKa3hZbUZhTVQ0ZGMyVm1CN3NuNDdXTXhGSTc2LzJOVDVCYzI1R1c2ajdTUnJ5VGNyV0FDdXJtNGRWOHNIVFlHdU1rSTJkQTB4M0hGcXZZYm16RnVuZG9SQ3JNNXROTWc1MEZJNVpBL1FRMm1mSUoydWcxYzgyVVhrNndiOWdUOTNGODAwRWhScHNHS1VuTzY2cWRaNHBqb1RjWm92enFhL2MycE0rSnJsUzZmRE1MVFlBQURVd25YZ3BtNkR6ZWg0WFJ1b3ZxL0s1WTdraXI2b3FGM2FZVGxTeXRaZzhOQmhwTENSVW1QUzFhc29HQUlUTnRKdFhlaTdCaDdqME91T2JmNk1aQTlwRVkxOGVydUlQRk5Bd0xWMHNEa2RXNlZvNHBDRDN1Si9iN0VDTXg3dWhoemc5VE1SS2RJL1QwbXlsVElYUzYzb1ZWYXhyeGs4YlQ4NXIya0drczAwbFo3K3BCZ2hNSUpVeFFCTjNMVkdsRTYzSUNVWG9BQUFCWlNFQU5nNWpFUVRyL3FtbW9GNG1oL2IzVVYxcHJIemRYYjhjUWJReWRqZzR3SDlhcUx6UzZkM1puRC8rQWxOZGp4RlNiRm5odk5XeWJXQ1V5QVFzRndQa3BHUHd5VGs2NFpWdVRVczJKa3hZbUZhTVQ0ZGMyVm1CN3NuNDdXTWt4eUZ4N2pobm93ZUI1dklSVzMyRjFOTTlHdXdBS2NpUHpDeWU0MXk0Y1dZdXJRd0FXSUFBQVp3REduVWt2R29xTXpNM29Wb0JwM3JHVXlJR2dBTW1odGhnMk0zVmZITklBWGtac05DcXpMdDZacWQ0am5ubzkyRjB6ZVpVbXNHc2JIQndHWm5idkdQRnljTi95RkFBQURrTjFqSlYwYnhub2o0dmNlLy8rNjR1QTFkTXFCTTh6R0oxaWFoMDNPYmNnQXNMUXlTb21XVHBPWjdybUtnaEE4R1RtSk84U3NpN1ZocmZ5dWNYa1ZBcGtiTjRsYk5mWXJyb2U2L282a3BockFZY0JaKzJGeG1PUlU2ODdtQXAxUWlBTDEvbGZZWE9UTklMMWQwamkxU0FkVkk5K3d3eHZ3bk5CSWxNQVdlU29aTXgzSnhJTGxMMmhtZDFwN2RibTMrMW1tNXo4QUFBQVN3aEFEOE9ZeEVFNi82cHBwN2VsQVA3YzFGMEp6V1BlcTdxbG1WRTBsdk05TUlGK09oWU02VDd1NFhoMWwxTjBlc1lnTDhGRTBsVndoZXh6VkQzSkhWemFvS0dtOE9VMzlZNWwwUFVMakd3UGgvUzlQbjlFYVJOWEF2T0c0OTRqMGlUaWFDZnNiclBYQkExZEVRcDhtckY1NURjM244bXp5ME5MbjZSTkh2ZDVWQ3dkTW9tMkJkR0RwbWFQZzlWdDRBNFl2bDJIVlo0d1RJNmNOSTI5ekZIeUJiY1AxMUVteW1XMlhkMnFLTi8reTB2bnlTM2U1TmZHdjlIZ0JuVHVHME9TODg2bGJiZUoxZGduWlRKTWYvR2NCTWh2bGU2Y2puSUt4VlE1UitoMUNZWW54alIyMG83eGh6RWhER1FyYWJWVHRvK1BqU3VZK045eHhtYlBmeDNSTDY1QmVaL3FPUnJ0NnRXa1EvK2VPQVc3Mlp3WndKN0s4VnI1RlhxOHh5b3huTHBBRWoyMVRMQU5tQUFBQUFWQmdVUkE0ZjBUczBLUzl5aGxEckQxSnNYSHdDQUFBQUFLd0dweTJJSTF3QUJKamdKRjNmRXZvck52YkJRMjBFck9kRGlPalBmSU01M2xxUmM1bFpXbEVzV0VGUUFBQUNCQVFDUXFjdGlDTmNKTGsxWUErV2ovRzN1VVZjQmNiVCtma0RXMTZCOVU3S0Z6TTYrQU5yN0N4RCtDTEg5aFhXcHEvOW5jRUNtd0djUjdWSDVWc0R4K0IyM1ZXekQyb0pzbWpiTDlXeVJuYU5DRXl6OGUwM29Zb1lnUzBpRld2UGlQVkxXdzQ1aTZDV0RXSUFxOTVyWDQwQzVHUkMzOUpjMGRBQ3BLU3drVkdZSUFBQUFpd0VBU0NweTJJSTFDUzVOVnZHb3NncnZhZm9jaTQybjgvSUd0cjBENnAyVUxtWjE4QWJYNDFqYi8vaEtJaWhub090WFFLWmp5d2VscVB6RHQ0MEtTeTlqUjlCdUx1dXdOMDMwQjhqaVorczZib1JXazBkYytXZlFHdFZ0SDBDZDdOQWFVSy8vazRtaEtaRmNXeGZ6Y05sSlpWcVZqOFZ1TE5EQTJUVVZYbnpFbm5PTUNjeS9MaUlEN0lBQUFBQ0tBUUJzS25MWWdqVUpMazFZQStXai9HM3VVVmNCY2JUK2ZrRFcxNkI5VTdLRnpNNitBTnI3Q3pTU2wvVWlsbGp2N1lCNjVrNllDT2tyQnAwLy96RnRqVU9mV20xUUZKdkxtWEl4NVUvTUFTcExqT3p2RUZ5YTVUajI4bjJyRit5VFZidjN4LzBIRWw5MWtNZFZndFhpNnVxc1UwM3c2SS8zUktEUGZkd0V5L0x3VG0rQWFLRTNpWERnQUFBQWZnRUFKQXFjdGlDTmZ3a3VUVmJ4cUxJSzcybjZISXVOcC9QeUJyYTlBK3FkbEM1bWRmQUcxK05acEpTL3FSU3l4MzlzQTljeWRNQkhTVmxGYmxyS1l6cjMvN0k1bjA3T2U4QnBSMUNMY3NuaFMyWHFJSlppdkZzVW9aOGl2NXZiZVhDZDhGWHJOaXpLaC9lZzFYS0RtNDZtbHMzZ2wrRjkvLzNsUVpLT2tBQUFBSUlCQUMwS25MWWdqWDhKTGsxWUErV2ovRzN1VVZjQmNiVCtma0RXMTZCOVU3S0Z6TTYrQU5yN0N4RCtDTEg5aFhXcHEvOW5jRUNtd0djUjdWSDVWc0R4K0IyM1ZXekQyb0pzbWpiTDlXeVJuYU5DRXl6OGUwM29Zb1lnUzBpRld2UGlQVkxXdzQ1aTZDV0RXSUFxOTVyWDQwQzVHUkMzOUpjMGRBQ3BLU3drVkdZSUFBQUFqQUVBTmdxY3RpQ05md2t1VFZieHFMSUs3Mm42SEl1TnAvUHlCcmE5QStxZGxDNW1kZkFHMStOWTIvLzRTaUlvWjZEclYwQ21ZOHNIcGFqOHc3ZU5Da3N2WTBmUWJpN3JzRGROOUFmSTRtZnJPbTZFVnBOSFhQbG4wQnJWYlI5QW5lelFHbEN2LzVPSm9TbVJYRnNYODNEWlNXVmFsWS9GYml6UXdOazFGVjU4eEo1empBbk12eTRpQSt5QUFBQUFSd0VBUHdxY3RpQ05md2IzVjhrNkFBR25EOGJ0YU5TUXFFNHpGWjJwSUl0eFQvUVVxbWNjQit5Z0JBam9IQUtDZkdlR0JKUjVjdnlHS2dsb2JjcExoNjJmLzNPcVpZSW1BQUFBRlFZRkVRT0g5RTdOQ2t2Y29aUTZ3OVNiRng4QWdBQUFBUzBoNXprUVRyLytxWllBQVc0WFNTU2YwWk1qT3JxM3JxOGdrbzcyeitkRGMxYjJNeldtWmp6YzZZTVVwNjhFa09YTkFYOE9XNzNBWUxzSUxCWEhoNHRFT2FQN3J6RjdEdFNESmJSTlJmS0I3OGlRWWhZTHJ5WFRFNGZMK29EMGc4ODJacnYwUkp6V3BmQXZzazIxOXhrWVNRREduaElQMGcxZ1Z1aWNMREVidlZUZmtHRjZBeUphY256WWtGM3g3Y3Q1Uk1pV0w2V3E0Q1oxS1R2ZFNvMzVJbTBOYTlGR2s4N1JRcEtvcjVvak1OM0JRVWJDNVhjcTBiMDV1THpNMnRhQyt1dzBjRXY3eXNNdGNmZzNucDNJUVBhOFg0dGJVenlTSnhIOUk4VzJLdkZadmdBZGFpeXY4OFZoaFlqZTR0Q09zaU1sZXl1ZWtiN05nazlMR0Y4bGV1dENaLzdVVWdYNDFURXcyZWxMQ3RBRmRmcXdaTzdkSW1Jbys5OE40bUJiZTBqSkZ3YzdwN3gvNmxTRUFBQUJZaUVBa09jNUVFNi8vcW1tbnQ2VDRaY3JQVVh3ZndTb1NOL3FqMkxBcER6aDA0Z3hzS3pqUUtGOCtpUkFxTE1QK0FsSDM1RkZtUHdoZUxBa29oNmJrZldjZVRJVGVFQnptVVdmeVFqMTlUVVUxWmpCUmxkVExUb3MxcG1WRDAwVDRhMDVCd3VUMWNuajFGbmlsMzg3SzZjNEd6UWJtQUNYd0hNRHBJMnlyb0RKVnRkNnF1dE5IbWFOa0UxSXRPaEtQWFhER3hMbFBUQk45UUt4YlpzRkt3SVZjSEdEaDFVTVMrOGJZTjA1RmpUeU1YZEZoQzdaSjdOY1VldWZRcmFTRmlONFRieVdQdFlpSXdWUldpQUFEOUc3Q0lydGkyZzJGUEdXZThQWlRQN05aTHMvUzZ1MmxQbnRaS3djOFhTQzJ4SWc0QU9JNmsreXhncXRlM29uNFBmWUZLc2haVGpYbFNKeExqUmlYSmNZc3lRWjhPeEZTMzhyazlibnlldVllZEF4TWhDSlB1cWtNRUI4QXZPeFArUmNBWDhQZy9lbTVNbDNYSFJ3UzRwYmJ4QmRxL0pBSGZnTXFRZ3AxSk83R3lZOENldzcxUkd0alBZVUpBSThrYk9Ib0FBQUFVTWhBRWc1emtRVHIvNnBwcDdlaytHVzFYSGNqa3huNHdLdTRnQnQwOGdjVTFMVmo5WFc2MTJTSnh5YlZJQ0gvL0FTaitQa0xNWi9sdHhVcmRIb0E0Q01QR2xNRlErWGd2N1JQcURMZFZiRXlZc1RDdEdKOE91Ykt6Q0tXZjhOYWNoRnh6bnVCQWk0ME9OczNnOGpkWHU1WnA2aklBQlJPRDN4SDZFMjBCZTFFb3NCZ3FWRGsxVC9udnI5QnRXcTlPNFIxSzRmQU9CNExwRXJud2V0RHZzajJxM1JxNG5HMU1XdlRCWDNSb21ySHMxMmV2aEZROS8vaUJvdEV1ZjFDN3RTRnhzdHllQUFBUUQxQnVmNXBPTGlURjJpak1zdTY4STJ1ZHRGTVZiL21Ham5VL0RTYWUyZXE1ODlUSXBiY2MrWm9CNTJRZjhFVGtKTEQ0WElFaElmYno5RDg1Q2k0YURpVmJEWUVJaEtOM0RORkI3MGNYMXUwMFJWbUpzVkF6ZlVEVlUzOXgrRlMyK0RWbzN1UXM4THFweHlxSHlPazJ2c0hUNzROVmhnNmdYb3FBQUFBVkloQUd3NXprUVRyLzZwcHA3ZWxBUDdmOFpHTjVxOXdhcXpuTkg4TWNmQmRWY0E3ejROZkhUWG1Rc0Q2U0pmLy9BU21CZmtMTllmTU4yemdZTTRsemg2RnRFWm5SMlB6N2xoNGpGVzVOU3pZbVRGaVlWb3hQaDF6WldZUlU3eFY1QWtZcTR4VkxHQXd5R3VBS3V2RjBhVFZVT242QUNpY21Hb0ova29pT0Uxekc5ZVBFb2tSeFZWRVBqM3MxQWlWc0xVbVBFTi9Ld2VaMXM2cmxCWlM1UWRZQUFTZWlrMFJXUXZSclI1TVdHVVowZXFWak5lc2ZrZktpSnhrbVVaSEhyM1RCNFI4WGg4aUxIdWloWklhNEFBSWRIMkhoakdqc05SUkt2TE96UFpLYmxZbG1aeHN2VCtESXA5dXpQckIwc3RubitXejJIRjBpelFBYUlPL3BGVkFWUDErUlRSMkpwL3JjNThnclN5eXp5VzBwbUt3djFWeDlUK0hZSmtqcEZNOFEzU21nb2JDWjNoS21idnhBLzJpUDB1RElXeUljVUZHMEcxR2JCQWlRNHpPWHpZV1VKZnZJc0Qzbmg1dXFyYWFBQUFBVnNoQUNRT2M1RUU2LzZwcHA3ZWxBUCtsZHpVQVpZek10MWI2T2tXQlNIbURoMkJqWnRGL2RzTTgwK1dTNUFibC93Q1VmaTlSczVpUmhkUmNqZXpUMU5xVmZ3aFBxM1d6ejZKOVFaYnFyWW1URmlZVm94UGgxelpXWVJUVGhWNUFrWXE1aVRqcHJxZjlqVnpkNUlKWHNqWDdvQVlhRDVYcUR1QzU1V1BMbXppaXdsc0ZRemFtUlhCSVQ4Ym81KzFGWVZNdGZwQ3VUQkIwV3kxNFFIUFF3V2NTbnBzaVNTZXp6VXdQeVpxeENnak5DTDJXWFVVWUt5anZlN0Fxclg5UWJDSjBGYXgrQzh0TUhWRFZwNXBjTzdBMEFBQktYL3NiUTVtTmcxR04vbFFma3R4aE9LMFFnZWZGQzFvbXhaWjFNaXdBRWF2UlNaK3IvYWZGU1JXdTA3TGNxYzJBUE5BWUQwMXFLYm1aKzJKQnVjZHdSWUR2UUU2U25ITi8zYzhKRkxCV3orWXA4Nyt4Z25uR0RIalAya2pmR3Mzb1JnVldrb2FtVTF0eFB5NzVvd2NjNjlPRnRwMGIvYlhrSnNNT1djQ2xaMzJwdjk0MFpEeG1BQUFBV0loQUMwT2M1RUU2LzZwcHA3ZWsrR1hLejFGOEg4RXFFamY2bzlpd0tRODRkT0lNYkNzNDBDaGZQb2tRS2l6RC9nSlI5K1JSWmo4SVhpd0pLSWVtNUgxbkhreUUzaEFjNWxGbjhrSTlmVTFGTldZd1VaWFV5MDZMTmFabFE5TkUrR3RPUWNMazlYSjQ5Ulo0cGQvT3l1bk9CczBHNWdBbDhCekE2U05zcTZBeVZiWGVxcnJUUjVtalpCTlNMVG9TajExd3hzUzVUMHdUZlVDc1cyYkJTc0NGWEJ4ZzRkVkRFdnZHMkRkT1JZMDhqRjNSWVF1MlNlelhGSHJuMEsya2hZamVFMjhsajdXSWlNRlVWb2dBQS9SdXdpSzdZdG9OaFR4bG52RDJVeit6V1M3UDB1cnRwVDU3V1NzSFBGMGd0c1NJT0FEaU9wUHNzWUtyWHQ2SitEMzJCU3JJV1U0MTVVaWNTNDBZbHlYR0xNa0dmRHNSVXQvSzVQVzU4bnJtSG5RTVRJUWlUN3FwREJBZkFMenNUL2tYQUYvRDRQM3B1VEpkMXgwY0V1S1cyOFFYYXZ5UUIzNERLa0lLZFNUdXhzbVBBbnNPOVVScll6MkZDUUNQSkd6aDZBQUFBRkZJUUEyRG5PUkJPditxYWFlM3BQaGx0VngzSTVNWitNQ3J1SUFiZFBJSEZOUzFZL1YxdXRka2ljY20xU0FoLy93RW8vajVDekdmNWJjVkszUjZBT0FqRHhwVEJVUGw0TCswVDZneTNWV3hNbUxFd3JSaWZEcm15c3dpbG4vRFduSVJjYzU3Z1FJdU5JUC95bXZucDUvUy9lSzRBQlJPRDN4SDZFMjBCZTFFb3NCZ3FWRGsxVC9udnI5QnRXcTlPNFIxSzRmQU9CNExwRXJud2V0RHZyelgyRE9sbFFEamFDamRrNWd2MEtWS3N5N000Mmo0UlI2azhzUU0rb1ZTdW9YZHFRdU5sdVR3QUFDQWVvQVNvT1JMU0N1TVkreS81V3RHRktwaXJmOHcwYzZuNGFUVDJ6MVhQbnFaRkxiam56TkFQT3lHZkx0U0ZheHJ2U3dHT05kMmYzOTRwbmRxaTN2a2tLOE1SZHBVUkhub1JGc0l2RmxlUWtlZnRKek5CcmI3WEQzR0s2UnZjSW5ta1ZKVWQwLzV4UFNqa29LSllDSERlQ3dRNW95akIzRk5CL1JnQUFBQVJVaEFEOE9jNUVFNi82cHBxQmVKa010cS9IY2pWYzNVZWt5K3RZSTQvQml1dkgvSFJmdW4rSGFxaXVWR0lKUFNTeGg3MzJhL0VscEF1ZkhtSWJiZWo5QkJoQStHbU8zSXpCbnRRNkoxdjFManVPVmZHWkl3cmlJS3NWWW52Z1RpYUNmc2FBK3hURFdLYmRnMSt3WVNPN0ZmelBnOXhmMUtGWTlzWlVWa2ZjMG5rYUFNZWJxS2pja2hvbC9ZYTFOZlFTVTBLdkZLMVdmbFFyOUxLbU5JeUtwT3JRaUNLQmJibHhJMkJHWjBwZmVoQmZEaGl0citOR04wN0dQRHRqWHVHK0R4Szd4U20xUGI1aXRzZEhqbW4vLzhkN21oWlB1aEJXaWpHVlUwams1dFFWclVwNGZGbUJKWnRKMC9RUDE4TWo0SUY4M3JpOVVLN0xnMk1JajVuRFlGVDBaekpILzJFL09Xakh2ZVlBSkh0cW1XQWJNQUFBQUZRWUZFUU9IOUU3TkNrdmNvWlE2dzlTYkZ4OEFnQUFBQUJ3QnFnMWlDTmNBQVRZNENTSGxiM1doQ0V2WmkzRVY2OEQ1NWJXSUFBQUFjd0VBa0tvTllnalhDUzVMMHBLRmV5cFlKNFVCRXN2YXFTZjlKMURRU0RldzRWVDh5VU5saWxFNDJSZ1hnbmRkR3Z6QXJMazVGR3R2UkgyQk9pUnY4bFpaWTE4WW5XQWpvdWJGM0N2ditXQTZ3b3k4b3RpNHNBanVabmV4djFHTDJBdnp4Ly85TE9VNDRsazFnMm1tT3I1MSswQUFBQUNEQVFCSUtvTllnalVKTGt2UjRzZ2tQeWJ6NnRvT1JOZ0lEd0FPdmxkeEFmZGl1Qjl6OWVsRXBOWG5GMzJGU2RBZEM0QVF5TktuUTk1TEorSHozSUx3UWZiQ09mN0pXM0pMaWY3QzdXTzUzNVJTUGluZlhSSTk5eUluSFltWHVRdGhVb1Q1dGhFeWJ0U1JKYnRBMHhrNU9pTU9iUHgwTW1LVnZHS3pRNml2cmQ1MmIwQUFBQUNJQVFCc0tvTllnalVKTGsxRTlLaTNndUJpQmlEVFZWY0NFOUIxOHJ1SUQ3c1Z3UHVmcjBvbElZV2ZsemJINVZZQ2hjQUlaR2xUb2NVVzhrWE94T0dvNTJPT2JxRWh1TGhCYzBZRlBDWTRIOGZVeG1oL041dmswOThOMDNTM01MVmpIZEkyTWxCek9KK1IvaUIvTmRaWUhWR1FTL1lGZFRZRG1DT1c5VUtpWFRzV3dnZmw3QXlRYndBQUFHNEJBQ1FLb05ZZ2pYOEpMa3ZSNHNna1B5Yno2dG9PUk5nSUR3QU92bGR4QWZkaXVCOXo5ZWxDUjRtc0Vuak4yZGlsUyszQ1hnQ01tN0xoeVFTbGsySlM1bzN6MGpLUk1vUGllYkI1eTNJZmo1SzBtcWNuc0RGSzBobnM4UGczNmpGNTV0VnZrNkc5cTBBNUZqVGZRZ0FBQUhRQkFDMEtvTllnalg4SkxrdlNrb1Y3S2xnbmhRRVN5OXFwSi8wblVOQklON0RoVlB6SlEyV0tVVGpaR0JlQ2QxMGEvTUNzdVRrVWEyOUVmWUU2SkcveVZsbGpYeGlkWUNPaTVzWGNLKy81WURyQ2pMeWkyTGl3Q081bWQ3Ry9VWXZZQy9QSC8vMHM1VGppV1RXRGFhWTZ2blg3UUFBQUFHNEJBRFlLb05ZZ2pYOEpMa3ZSNHNna1B5Yno2dG9PUk5nSUR3QU92bGR4QWZkaXVCOXo5';
        assembly {
            return(add(data, 0x20), mload(data))
        }
    }
}

contract StorageEight {
    constructor() {
        string memory data = '\';
        assembly {
            return(add(data, 0x20), mload(data))
        }
    }
}

contract StorageNine {
    constructor() {
        string memory data = '\';
        assembly {
            return(add(data, 0x20), mload(data))
        }
    }
}

/**
 * @dev totem
 * @author 0age
 */
contract totemNFT is totemNFTInterface, ERC721, ERC721Enumerable {
    address private immutable _storageOne;
    address private immutable _storageTwo;
    address private immutable _storageThree;
    address private immutable _storageFour;
    address private immutable _storageFive;
    address private immutable _storageSix;
    address private immutable _storageSeven;
    address private immutable _storageEight;
    address private immutable _storageNine;
    address public immutable owner;

    /**
     * @dev Deploy totem as an ERC721 NFT.
     */
    constructor(
        address storageOne,
        address storageTwo,
        address storageThree,
        address storageFour,
        address storageFive,
        address storageSix,
        address storageSeven,
        address storageEight,
        address storageNine
    ) ERC721("totem", "TOTEM") {
        _storageOne = storageOne;
        _storageTwo = storageTwo;
        _storageThree = storageThree;
        _storageFour = storageFour;
        _storageFive = storageFive;
        _storageSix = storageSix;
        _storageSeven = storageSeven;
        _storageEight = storageEight;
        _storageNine = storageNine;
        owner = msg.sender;

        _safeMint(msg.sender, 0);
    }

    /**
     * @dev Mint the NFT if it is currently available.
     */
    function mint() external override {
        _safeMint(msg.sender, 0);
    }

    /**
     * @dev Mint the NFT if it is currently available to a given address.
     */
    function mint(address to) external override {
        _safeMint(to, 0);
    }

    /**
     * @dev Burn the NFT if it is owned or approved.
     */
    function burn() external override {
        require(
            _isApprovedOrOwner(msg.sender, 0),
            "totem: caller is not owner nor approved"
        );

        _burn(0);
    }

    /**
     * @dev Derive and return a tokenURI json payload formatted as a
     * data URI.
     */
    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {
        require(tokenId == 0, "totem: URI query for out-of-range token");

        address storageOne = _storageOne;
        address storageTwo = _storageTwo;
        address storageThree = _storageThree;
        address storageFour = _storageFour;
        address storageFive = _storageFive;
        address storageSix = _storageSix;
        address storageSeven = _storageSeven;
        address storageEight = _storageEight;
        address storageNine = _storageNine;

        assembly {
            mstore(0, 0x0000000000000000000000000000000000000000000000000000000000000020)
            mstore(0x20, 0x0000000000000000000000000000000000000000000000000000000000067331)
            mstore(0x40, 0x646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c65794a)
            mstore(0x60, 0x755957316c496a6f67496e52766447567449697767496d526c63324e79615842)
            mstore(0x80, 0x3061573975496a6f67496e5276644756744c6a42685a3255755a58526f49476c)
            mstore(0xa0, 0x7a494745674d533878494535475643426a6232353059576c756157356e49475a)
            mstore(0xc0, 0x3162477835494739754c574e6f59576c7549473131624852706257566b615745)
            mstore(0xe0, 0x6764326c306143427a623356755a434268626d5167646d6c6b5a573875496977)
            mstore(0x100, 0x67496d6c745957646c0000000000000000000000000000000000000000000000)
            mstore(0x33a31, 0x4c434a68626d6c74595852706232356664584a73000000000000000000000000)
            mstore(0x6736d, 0x66513d3d00000000000000000000000000000000000000000000000000000000)

            extcodecopy(storageOne, 0x109, 1, 0x5bb0)
            extcodecopy(storageTwo, 0x5cb9, 1, 0x5bb0)
            extcodecopy(storageThree, 0xb869, 1, 0x5bb0)
            extcodecopy(storageFour, 0x11419, 1, 0x5bb0)
            extcodecopy(storageFive, 0x16fc9, 1, 0x5bb0)
            extcodecopy(storageSix, 0x1cb79, 1, 0x5bb0)
            extcodecopy(storageSeven, 0x22729, 1, 0x5bb0)
            extcodecopy(storageEight, 0x282d9, 1, 0x5bb0)
            extcodecopy(storageNine, 0x2de89, 1, 0x5ba8)

            extcodecopy(storageOne, 0x33a45, 1, 0x5bb0)
            extcodecopy(storageTwo, 0x395f5, 1, 0x5bb0)
            extcodecopy(storageThree, 0x3f1a5, 1, 0x5bb0)
            extcodecopy(storageFour, 0x44d55, 1, 0x5bb0)
            extcodecopy(storageFive, 0x4a905, 1, 0x5bb0)
            extcodecopy(storageSix, 0x504b5, 1, 0x5bb0)
            extcodecopy(storageSeven, 0x56065, 1, 0x5bb0)
            extcodecopy(storageEight, 0x5bc15, 1, 0x5bb0)
            extcodecopy(storageNine, 0x617c5, 1, 0x5ba8)

            return(0, 0x67380)
        }
    }

    /**
     * @dev Derive and return a contract-level json payload formatted as a
     * data URI.
     */
    function contractURI() public view returns (string memory) {
        string memory json = Base64.encode(
            bytes(
                string(
                    abi.encodePacked('{"',
                        'name": "totem", ',
                        '"description": "totem.0age.eth is a 1/1 NFT containing fully on-chain multimedia with sound and video."',
                    '}')
                )
            )
        );

        return string(abi.encodePacked('data:application/json;base64,', json));
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal override(ERC721, ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev Coalesce supportsInterface from inherited contracts.
     */
    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }
}