/**
 *Submitted for verification at polygonscan.com on 2022-01-25
*/

// File: @chainlink/contracts/src/v0.8/VRFRequestIDBase.sol


pragma solidity ^0.8.0;

contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol


pragma solidity ^0.8.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}

// File: @chainlink/contracts/src/v0.8/VRFConsumerBase.sol


pragma solidity ^0.8.0;



/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: @openzeppelin/contracts/utils/cryptography/ECDSA.sol



pragma solidity ^0.8.0;

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS,
        InvalidSignatureV
    }

    function _throwError(RecoverError error) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert("ECDSA: invalid signature");
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert("ECDSA: invalid signature length");
        } else if (error == RecoverError.InvalidSignatureS) {
            revert("ECDSA: invalid signature 's' value");
        } else if (error == RecoverError.InvalidSignatureV) {
            revert("ECDSA: invalid signature 'v' value");
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature` or error string. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
        // Check the signature length
        // - case 65: r,s,v signature (standard)
        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else if (signature.length == 64) {
            bytes32 r;
            bytes32 vs;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            assembly {
                r := mload(add(signature, 0x20))
                vs := mload(add(signature, 0x40))
            }
            return tryRecover(hash, r, vs);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength);
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, signature);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address, RecoverError) {
        bytes32 s;
        uint8 v;
        assembly {
            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            v := add(shr(255, vs), 27)
        }
        return tryRecover(hash, v, r, s);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
     *
     * _Available since v4.2._
     */
    function recover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, r, vs);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
     * `r` and `s` signature fields separately.
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address, RecoverError) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS);
        }
        if (v != 27 && v != 28) {
            return (address(0), RecoverError.InvalidSignatureV);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature);
        }

        return (signer, RecoverError.NoError);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function recover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    /**
     * @dev Returns an Ethereum Signed Typed Data, created from a
     * `domainSeparator` and a `structHash`. This produces hash corresponding
     * to the one signed with the
     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
     * JSON-RPC method as part of EIP-712.
     *
     * See {recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
    }
}

// File: @openzeppelin/contracts/token/ERC20/IERC20.sol



pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// File: @openzeppelin/contracts/utils/Strings.sol



pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// File: @openzeppelin/contracts/utils/Context.sol



pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol



pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/SVSAuctionHouse.sol


pragma solidity ^0.8.4;

/*
     ▄█▀▀▀█▄█   ▀████▀   ▀███▀    ▄█▀▀▀█▄█
    ▄██    ▀█     ▀██    ▄▄█     ▄██    ▀█
    ▀███▄          ██▄  ▄██      ▀███▄    
     ▀█████▄       ██▄  ▄█        ▀█████▄
    ▄     ▀██       ▀████▀       ▄     ▀██
    ██     ██        ▄██▄        ██     ██
    █▀█████▀          ██         █▀█████▀ 
    
    Sneaky Vampires Syndicate Auction House / 2022
*/






contract SVSAuctionHouse is VRFConsumerBase, Ownable {
    using Strings for uint;

    bytes32 internal keyHash;
    uint256 internal fee;

    enum auction_statuses {
        CREATED,
        OPEN,
        CLOSED,
        FINALIZED
    }

    enum auction_types {
        REGULAR,
        DUTCH,
        RAFFLE
    }

    struct Auction {
        uint id;
        auction_types _type;
        string title;
        string description;
        string image;

        uint amountOfWinners;
        uint startingTime;
        uint endingTime;
        uint startingBid;
        uint maximumPurchases;

        // Dutch specific fields
        uint endingBid;
        uint bidDecreasementAmount;
        uint bidDecreasementInterval;

        // Raffle specific fields
        uint ticketPrice;
        bool refundLosers;
        uint availableTickets;

        // Internal fields
        bool finalized;
        bool vrfRequested;
        uint vrfRandomness;
        uint refundedCounter;
        uint drawnWinners;
    }

    struct Entry {
        uint auctionId;
        address bidder;
        uint amount;
    }

    uint public totalAuctions;
    uint public maxWinnersPerBatch = 75;
    mapping(uint => Auction) auctions;
    mapping(uint => mapping(address => uint)) public amountOfPurchases;
    mapping(uint => mapping(uint => bool)) public usedTokenIds;
    mapping(uint => Entry[]) public entries;
    mapping(uint => address[]) public winners;
    mapping(uint => mapping(address => Entry)) public winningEntries;
    mapping(uint => uint) public uniqueEntries;
    mapping(bytes32 => uint) vrfRequests;
    mapping(address => uint) public addressNonce;

    mapping(address => bool) controllers;

    IERC20 BLOOD = IERC20(0x9c8919d6E97Be2B8B823FFfB699ef1cb3422C77F);

    modifier onlyController {
        require(controllers[msg.sender], "ONLY_CONTROLLERS");
        _;
    }

    // constructor() VRFConsumerBase(0x8C7382F9D8f56b33781fE506E897a4F1e2d17255, 0x326C977E6efc84E512bB9C30f76E30c160eD06FB) public { // POLYGON MUMBAI
    constructor() VRFConsumerBase(0x3d2341ADb2D31f1c5530cDC622016af293177AE0, 0xb0897686c545045aFc77CF20eC7A532E3120E0F1) {
        updateChainlinkConfiguration(0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da, 0.0001 * 10 ** 18);
    }

    // Public functions
    // --------------------------------------------------------------
    function getAuction(uint id) view public returns(Auction memory) {
        return auctions[id];
    }

    function getAmountOfEntries(uint id) view public returns(uint) {
        return entries[id].length;
    }

    function getAmountOfWinners(uint id) view public returns(uint) {
        return winners[id].length;
    }

    function currentPrice(uint id) view public returns(uint) {
        Auction storage auction = auctions[id];
        return _currentPrice(auction);
    }

    function auctionStatus(uint id) view public returns(auction_statuses) {
        Auction storage auction = auctions[id];
        return _auctionStatus(auction);
    }

    // Customer functions
    // --------------------------------------------------------------
    // For regular: Amount = bid; For dutch and raffle: Amount = the amount of buys/tickets.
    function enterAuction(uint id, address sender, uint amount, uint256[] memory tokenIds, bytes calldata signature, uint sigMessageLength) public onlyController {
        require(ECDSA.recover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", sigMessageLength.toString(), "Enter auction #", id.toString(), "\nAmount: ", amount.toString(), "\nNonce: ", (addressNonce[sender]++).toString())), signature) == sender, "INVALID_SIGNATURE");

        Auction storage auction = auctions[id];
        require(_auctionStatus(auction) == auction_statuses.OPEN, "AUCTION_NOT_OPEN");
        require(amount > 0, "INVALID_AMOUNT");

        if (auction._type == auction_types.REGULAR) {
            require(amount > _currentPrice(auction), "INVALID_AMOUNT");
            BLOOD.transferFrom(sender, address(this), amount * 1 ether);

            entries[id].push(Entry(id, sender, amount));

            if (entries[id].length > auction.amountOfWinners) {
                uint entryToRemove = entries[id].length - auction.amountOfWinners - 1;
                Entry memory entry = entries[id][entryToRemove];
                BLOOD.transfer(entry.bidder, entry.amount);
            }
        } else if (auction._type == auction_types.DUTCH) {
            require(winners[id].length < auction.amountOfWinners, "WINNER_LIMIT_REACHED");
            if (amountOfPurchases[id][sender] == 0) uniqueEntries[id]++;

            uint _amount = amount;
            if (amount > (auction.amountOfWinners - winners[id].length)) {
                _amount = auction.amountOfWinners - winners[id].length;
            }

            uint purchases = amountOfPurchases[id][sender] += amount;
            require(purchases <= auction.maximumPurchases, "MAXIMUM_PURCHASES_REACHED");

            uint price = _currentPrice(auction);
            BLOOD.transferFrom(sender, address(this), price * _amount * 1 ether);

            for (uint i; i < _amount; i++) {
                Entry memory entry = Entry(id, sender, price);
                entries[id].push(entry); // Not needed, but for clarity
                winners[id].push(entry.bidder);
                winningEntries[id][entry.bidder] = entry;
            }
        } else if (auction._type == auction_types.RAFFLE) {
            if (amountOfPurchases[id][sender] == 0) uniqueEntries[id]++;

            // Token ids are set server side, if the raffle is free and one entry per token is allowed.
            if (tokenIds.length > 0) {
                amount = 0;
                for (uint i; i < tokenIds.length; i++) {
                    if (!usedTokenIds[id][tokenIds[i]]) {
                        usedTokenIds[id][tokenIds[i]] = true;
                        amount++;
                    }
                }
            }

            require(entries[id].length + amount <= auction.availableTickets, "OUT_OF_TICKETS");
            
            uint purchases = amountOfPurchases[id][sender] += amount;
            require(purchases <= auction.maximumPurchases, "MAXIMUM_PURCHASES_REACHED");
            
            BLOOD.transferFrom(sender, address(this), auction.ticketPrice * amount * 1 ether);

            for (uint i; i < amount; i++) {
                entries[id].push(Entry(id, sender, auction.ticketPrice));
            }
        }
    }

    // Management functions
    // --------------------------------------------------------------
    function createRegularAuction(string memory title, string memory description, string memory image, uint amountOfWinners, uint startingTime, uint endingTime, uint startingBid) public onlyController returns(uint) {
        require(amountOfWinners > 0, "AMOUNT_OF_WINNERS_NOT_ZERO");
        require(startingTime > block.timestamp, "STARTING_TIME_NOT_AFTER_NEW");
        require(endingTime > startingTime, "ENDING_TIME_NOT_AFTER_STARTING_TIME");
        require(startingBid > 0, "STARTING_BID_NOT_ZERO");

        totalAuctions++;

        Auction storage auction = auctions[totalAuctions];
        auction.id = totalAuctions;
        auction.title = title;
        auction.description = description;
        auction.image = image;
        auction._type = auction_types.REGULAR;
        auction.amountOfWinners = amountOfWinners;
        auction.startingTime = startingTime;
        auction.endingTime = endingTime;
        auction.startingBid = startingBid;

        return totalAuctions;
    }

    function createDutchAuction(string memory title, string memory description, string memory image, uint amountOfWinners, uint startingTime, uint endingTime, uint startingBid, uint maximumPurchases, uint endingBid, uint bidDecreasementAmount, uint bidDecreasementInterval) public onlyController returns(uint) {
        require(amountOfWinners > 0, "AMOUNT_OF_WINNERS_NOT_ZERO");
        require(startingTime > block.timestamp, "STARTING_TIME_NOT_AFTER_NEW");
        require(endingTime > startingTime, "ENDING_TIME_NOT_AFTER_STARTING_TIME");
        require(startingBid > 0, "STARTING_BID_NOT_ZERO");
        require(endingBid >= startingBid, "ENDING_BID_INVALID");
        require(bidDecreasementAmount > 0, "BID_DECREASEMENT_AMOUNT_NOT_ZERO");
        require(bidDecreasementAmount < startingBid, "BID_DECREASEMENT_AMOUNT_NOT_ZERO");
        require(bidDecreasementInterval > 0, "BID_DECREASEMENT_INTERVAL_NOT_ZERO");
        require(bidDecreasementInterval < 60, "BID_DECREASEMENT_INTERVAL_NOT_LESS_THAN_60_SECONDS");
        require(maximumPurchases > 0, "MAXIMUM_PURCHASES_NOT_ZERO");

        totalAuctions++;

        Auction storage auction = auctions[totalAuctions];
        auction.id = totalAuctions;
        auction.title = title;
        auction.description = description;
        auction.image = image;
        auction._type = auction_types.DUTCH;
        auction.amountOfWinners = amountOfWinners;
        auction.startingTime = startingTime;
        auction.endingTime = endingTime;
        auction.startingBid = startingBid;
        auction.maximumPurchases = maximumPurchases;
        auction.endingBid = endingBid;
        auction.bidDecreasementAmount = bidDecreasementAmount;
        auction.bidDecreasementInterval = bidDecreasementInterval;

        return totalAuctions;
    }

    function createRaffle(string memory title, string memory description, string memory image, uint amountOfWinners, uint startingTime, uint endingTime, uint maximumPurchases, uint ticketPrice, bool refundLosers, uint availableTickets) public onlyController returns(uint) {
        require(amountOfWinners > 0, "AMOUNT_OF_WINNERS_NOT_ZERO");
        require(startingTime > block.timestamp, "STARTING_TIME_NOT_AFTER_NEW");
        require(endingTime > startingTime, "ENDING_TIME_NOT_AFTER_STARTING_TIME");

        totalAuctions++;

        Auction storage auction = auctions[totalAuctions];
        auction.id = totalAuctions;
        auction.title = title;
        auction.description = description;
        auction.image = image;
        auction._type = auction_types.RAFFLE;
        auction.amountOfWinners = amountOfWinners;
        auction.startingTime = startingTime;
        auction.endingTime = endingTime;
        auction.maximumPurchases = maximumPurchases;
        auction.ticketPrice = ticketPrice;
        auction.refundLosers = refundLosers;
        auction.availableTickets = availableTickets;

        return totalAuctions;
    }

    function updateRegularAuction(string memory title, string memory description, string memory image, uint id, uint amountOfWinners, uint startingTime, uint endingTime, uint startingBid) public onlyController {
        Auction storage auction = auctions[id];
        require(!auction.finalized, "AUCTION_ALREADY_FINALIZED");

        auction.title = title;
        auction.description = description;
        auction.image = image;
        auction.amountOfWinners = amountOfWinners;
        auction.startingTime = startingTime;
        auction.endingTime = endingTime;
        auction.startingBid = startingBid;
    }

    function updateDutchAuction(string memory title, string memory description, string memory image, uint id, uint amountOfWinners, uint startingTime, uint endingTime, uint startingBid, uint maximumPurchases, uint endingBid, uint bidDecreasementAmount, uint bidDecreasementInterval) public onlyController {
        Auction storage auction = auctions[id];
        require(!auction.finalized, "AUCTION_ALREADY_FINALIZED");

        auction.title = title;
        auction.description = description;
        auction.image = image;
        auction.amountOfWinners = amountOfWinners;
        auction.startingTime = startingTime;
        auction.endingTime = endingTime;
        auction.startingBid = startingBid;
        auction.maximumPurchases = maximumPurchases;
        auction.endingBid = endingBid;
        auction.bidDecreasementAmount = bidDecreasementAmount;
        auction.bidDecreasementInterval = bidDecreasementInterval;
    }

    function updateRaffle(string memory title, string memory description, string memory image, uint id, uint amountOfWinners, uint startingTime, uint endingTime, uint maximumPurchases, uint ticketPrice, bool refundLosers, uint availableTickets) public onlyController {
        Auction storage auction = auctions[id];
        require(!auction.finalized, "AUCTION_ALREADY_FINALIZED");

        auction.title = title;
        auction.description = description;
        auction.image = image;
        auction.amountOfWinners = amountOfWinners;
        auction.startingTime = startingTime;
        auction.endingTime = endingTime;
        auction.maximumPurchases = maximumPurchases;
        auction.ticketPrice = ticketPrice;
        auction.refundLosers = refundLosers;
        auction.availableTickets = availableTickets;
    }

    function requestRandomnessForAuction(uint id) public onlyController {
        require(LINK.balanceOf(address(this)) >= fee, "NOT_ENOUGH_LINK");

        Auction storage auction = auctions[id];
        require(!auction.vrfRequested, "AUCTION_RANDOMNESS_ALREADY_REQUESTED");
        require(_auctionStatus(auction) == auction_statuses.CLOSED, "AUCTION_NOT_ENDED");

        vrfRequests[requestRandomness(keyHash, fee)] = id;
        auction.vrfRequested = true;
    }

    function finalizeAuction(uint id) public onlyController {
        Auction storage auction = auctions[id];
        require(!auction.finalized, "AUCTION_ALREADY_FINALIZED");
        require(_auctionStatus(auction) == auction_statuses.CLOSED, "AUCTION_NOT_ENDED");
        require(auction._type != auction_types.RAFFLE || auction.vrfRandomness != 0, "RAFFLE_RANDOMNESS_NOT_SET");

        if (auction._type != auction_types.DUTCH) {
            drawWinners(auction);
        }
    }

    function refundRaffleEntries(uint id) public onlyController {
        Auction storage auction = auctions[id];
        require(auction.finalized, "AUCTION_NOT_FINALIZED");
        require(auction._type == auction_types.RAFFLE, "AUCTION_NOT_RAFFLE");
        require(auction.refundLosers, "RAFFLE_NOT_REFUND");
        require(auction.refundedCounter < winners[id].length, "REFUNDED_ALL_ENTRIES");

        for (uint i = 0; i < entries[id].length; i++) {
            Entry memory entry = entries[id][i];
            BLOOD.transfer(entry.bidder, entry.amount);
        }
    }

    // Owner functions
    // --------------------------------------------------------------
    function setController(address controller, bool active) public onlyOwner {
        controllers[controller] = active;
    }

    function updateChainlinkConfiguration(bytes32 _keyHash, uint256 _fee) public onlyOwner {
        keyHash = _keyHash;
        fee = _fee;
    }

    function setMaxWinnersPerBatch(uint _maxWinnersPerBatch) public onlyOwner {
        maxWinnersPerBatch = _maxWinnersPerBatch;
    }

    // Internal functions
    // --------------------------------------------------------------
    function drawWinners(Auction storage auction) internal {
        if (auction._type == auction_types.REGULAR) {
            for (uint i; i < auction.amountOfWinners; i++) {
                Entry memory entry = entries[auction.id][entries[auction.id].length - i - 1];
                winners[auction.id].push(entry.bidder);
                winningEntries[auction.id][entry.bidder] = entry;
            }
        } else if (auction._type == auction_types.RAFFLE) {
            require(auction.vrfRandomness != 0, "RAFFLE_RANDOMNESS_NOT_SET");

            uint winnersToBeDrawn = (uniqueEntries[auction.id] > auction.amountOfWinners ? auction.amountOfWinners : uniqueEntries[auction.id]) - auction.drawnWinners;
            uint batchedWinners = winnersToBeDrawn > maxWinnersPerBatch ? maxWinnersPerBatch : winnersToBeDrawn;
            auction.drawnWinners += batchedWinners;
            if (auction.drawnWinners >= auction.amountOfWinners) auction.finalized = true;

            uint _nonce;
            for (uint i; i < batchedWinners; i++) {
                uint entryId = uint(keccak256(abi.encodePacked(auction.vrfRandomness, i, _nonce++, auction.drawnWinners))) % entries[auction.id].length;
                Entry memory entry = entries[auction.id][entryId];

                if (winningEntries[auction.id][entry.bidder].bidder != address(0)) {
                    i--;
                } else {
                    winners[auction.id].push(entry.bidder);
                    winningEntries[auction.id][entry.bidder] = entry;
                }
            }
        } else {
            revert("INVALID_TYPE");
        }
    }

    function _currentPrice(Auction storage auction) view internal returns(uint) {
        if (auction._type == auction_types.REGULAR) {
            return entries[auction.id][entries[auction.id].length - 1].amount;
        } else if (auction._type == auction_types.DUTCH) {
            uint decreasement = (((block.timestamp - auction.startingTime) / auction.bidDecreasementInterval) * auction.bidDecreasementAmount);
            return decreasement >= (auction.startingBid - auction.endingBid) ? auction.endingBid : auction.startingBid - decreasement;
        } else if (auction._type == auction_types.RAFFLE) {
            return auction.ticketPrice;
        } else {
            revert("INVALID_AUCTION_TYPE");
        }
    }

    function _auctionStatus(Auction storage auction) view internal returns(auction_statuses) {
        if (auction.finalized) {
            return auction_statuses.FINALIZED;
        } else if (auction.endingTime < block.timestamp) {
            return auction_statuses.CLOSED;
        } else if (auction.startingTime > block.timestamp) {
            return auction_statuses.CREATED;
        } else {
            return auction_statuses.OPEN;
        }
    }

    // VRF Function - 1.000.000 gas limit
    // --------------------------------------------------------------
    function fulfillRandomness(bytes32 requestId, uint randomness) internal override {
        Auction storage auction = auctions[vrfRequests[requestId]];
        require(auction.vrfRequested, "INVALID_REQUEST_ID");
        require(auction.vrfRandomness == 0, "VRF_RANDOMNESS_ALREADY_FULFILLED");
        auction.vrfRandomness = randomness;
    }
}