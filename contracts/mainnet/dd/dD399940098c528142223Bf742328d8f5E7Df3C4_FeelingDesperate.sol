// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./ERC1155.sol";
import "./Ownable.sol";
import "./ERC1155Burnable.sol";



contract FeelingDesperate is ERC1155, Ownable, ERC1155Burnable {
    constructor() ERC1155("") {}

    mapping(uint256 => string)private uriForId;

    function setURI(string memory _uri,uint256 _tokenId) public onlyOwner {
        uriForId[_tokenId] = _uri;
    }

    function uri(uint256 _tokenId) public override view returns(string memory){
        return uriForId[_tokenId];
    }

    function name() public pure returns(string memory){
        return "Feeling Desperate";
    }

    function mint(address account, uint256 id, uint256 amount, bytes memory data)
        public
        onlyOwner
    {
        _mint(account, id, amount, data);
    }
    //0100110101100001011110010110001001100101001000000111001101101111011011010110010101100100011000010111100100100000010010010010000001100011011000010110111000100000011100000110000101111001001000000111010001101000011001010110110100100000011000010110110001101100001000000111010001101000011001010010000001101101011011110110111001100101011110010010000001100010011000010110001101101011
    function mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        public
        onlyOwner
    {
        _mintBatch(to, ids, amounts, data);
    }

    function mintBatchToMultipleAccounts(address[] memory to, uint256[] memory ids, uint256[] memory amounts, bytes memory data)
        public
        onlyOwner
    {
        require(to.length == ids.length && to.length == amounts.length , "wrong array sizes");
        for(uint256 i=0;i<to.length;i++){
            _mint(to[i], ids[i], amounts[i], data);
        }
    }
}