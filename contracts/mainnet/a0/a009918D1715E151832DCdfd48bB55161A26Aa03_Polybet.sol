/**
 *Submitted for verification at polygonscan.com on 2021-07-29
*/

// File: @chainlink/contracts/src/v0.6/VRFRequestIDBase.sol

// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract VRFRequestIDBase {

  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(bytes32 _keyHash, uint256 _userSeed,
    address _requester, uint256 _nonce)
    internal pure returns (uint256)
  {
    return  uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(
    bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

// File: @chainlink/contracts/src/v0.6/interfaces/LinkTokenInterface.sol


pragma solidity ^0.6.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);
  function approve(address spender, uint256 value) external returns (bool success);
  function balanceOf(address owner) external view returns (uint256 balance);
  function decimals() external view returns (uint8 decimalPlaces);
  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);
  function increaseApproval(address spender, uint256 subtractedValue) external;
  function name() external view returns (string memory tokenName);
  function symbol() external view returns (string memory tokenSymbol);
  function totalSupply() external view returns (uint256 totalTokensIssued);
  function transfer(address to, uint256 value) external returns (bool success);
  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);
  function transferFrom(address from, address to, uint256 value) external returns (bool success);
}

// File: @chainlink/contracts/src/v0.6/vendor/SafeMathChainlink.sol


pragma solidity ^0.6.0;

/**
 * @dev Wrappers over Solidity's arithmetic operations with added overflow
 * checks.
 *
 * Arithmetic operations in Solidity wrap on overflow. This can easily result
 * in bugs, because programmers usually assume that an overflow raises an
 * error, which is the standard behavior in high level programming languages.
 * `SafeMath` restores this intuition by reverting the transaction when an
 * operation overflows.
 *
 * Using this library instead of the unchecked operations eliminates an entire
 * class of bugs, so it's recommended to use it always.
 */
library SafeMathChainlink {
  /**
    * @dev Returns the addition of two unsigned integers, reverting on
    * overflow.
    *
    * Counterpart to Solidity's `+` operator.
    *
    * Requirements:
    * - Addition cannot overflow.
    */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  /**
    * @dev Returns the subtraction of two unsigned integers, reverting on
    * overflow (when the result is negative).
    *
    * Counterpart to Solidity's `-` operator.
    *
    * Requirements:
    * - Subtraction cannot overflow.
    */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a, "SafeMath: subtraction overflow");
    uint256 c = a - b;

    return c;
  }

  /**
    * @dev Returns the multiplication of two unsigned integers, reverting on
    * overflow.
    *
    * Counterpart to Solidity's `*` operator.
    *
    * Requirements:
    * - Multiplication cannot overflow.
    */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  /**
    * @dev Returns the integer division of two unsigned integers. Reverts on
    * division by zero. The result is rounded towards zero.
    *
    * Counterpart to Solidity's `/` operator. Note: this function uses a
    * `revert` opcode (which leaves remaining gas untouched) while Solidity
    * uses an invalid opcode to revert (consuming all remaining gas).
    *
    * Requirements:
    * - The divisor cannot be zero.
    */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // Solidity only automatically asserts when dividing by 0
    require(b > 0, "SafeMath: division by zero");
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  /**
    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),
    * Reverts when dividing by zero.
    *
    * Counterpart to Solidity's `%` operator. This function uses a `revert`
    * opcode (which leaves remaining gas untouched) while Solidity uses an
    * invalid opcode to revert (consuming all remaining gas).
    *
    * Requirements:
    * - The divisor cannot be zero.
    */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0, "SafeMath: modulo by zero");
    return a % b;
  }
}

// File: @chainlink/contracts/src/v0.6/VRFConsumerBase.sol


pragma solidity ^0.6.0;




/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {

  using SafeMathChainlink for uint256;

  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness)
    internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 constant private USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee)
    internal returns (bytes32 requestId)
  {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash].add(1);
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface immutable internal LINK;
  address immutable private vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) public {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: contracts/polybet.sol

pragma solidity 0.6.6;


contract Polybet  is VRFConsumerBase {
    
    
       uint256 public winningsPaid = 0;
       uint256 public activeGames = 0;
       uint256 public lockedValue = 0;
       uint256 public gameID = 1;
       address public contractOwner;
       
       uint256 internal linkFee = 0.0001*10**18;
       uint256 private basePercent = 2;
       uint256 private contractUpkeep = 0;
       bytes32 internal keyHash;
     
       uint256[] public activeGamesList;
       

       struct Bet{
           address ownerAddress;
           uint256 betValue; 
           uint8 playerNumber;
           uint256 gameID;
           
           address player2Address;
           uint256 player2BetValue;
           
           address player3Address;
           uint256 player3BetValue;
           
           address player4Address;
           uint256 player4BetValue;
           
           bool isPlayable;
           uint256 indexP;
       }
       
       
        struct Results{
           uint256 gameID;
           uint256 resultPlayer1;
           address player1Address;
           
           uint256 resultPlayer2;
           address player2Address;
           
           uint256 resultPlayer3;
           address player3Address;
           
           uint256 resultPlayer4;
           address player4Address;
           
           bool isCancelled;
       }
       
       
        struct Player{
           uint8 totalPlayerGames;
           uint256 totalWinnings;
           uint256 lockedInGames;
           uint256[] playerOwnedGames;
           uint256[] playerAllGames;
       }
       
	   
       mapping(uint256 => uint256) private pOwnedGames;
       mapping(uint256 => Bet) public bets;
       mapping(address => Player) public players;
       mapping(uint256 => Results) public results;
       mapping(bytes32 => uint256) private chainmapping;

    
    
  constructor() VRFConsumerBase(
            0x3d2341ADb2D31f1c5530cDC622016af293177AE0, // VRF Coordinator
            0xb0897686c545045aFc77CF20eC7A532E3120E0F1  // LINK Token
        ) public
    {
        contractOwner = msg.sender;
        keyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;
        linkFee;
    } 
    
    
    
  
  
  modifier onlyOwner(){
            require(msg.sender == contractOwner);
            _;
        }
        
        
        
  function createCustomBet(uint256 _bet, uint8 _players) payable public{
      address pA = msg.sender;
      uint256 pV = msg.value;
      
      require(_bet == pV);
      require(_players != 1);
      require(4 >= _players);
      require(pV >= 1);
      require(5000*10**18 >= pV);
      require(7 >= players[pA].totalPlayerGames);
      require(pV % 1 ether == 0);
    
      bets[gameID].ownerAddress = pA;
      results[gameID].player1Address = pA;
      bets[gameID].betValue = pV;
      bets[gameID].playerNumber = _players;
      bets[gameID].isPlayable = true;
      bets[gameID].gameID = gameID;
      
      bets[gameID].indexP = activeGamesList.length;
      activeGamesList.push(gameID);
      
      pOwnedGames[gameID] = players[pA].playerOwnedGames.length;
      players[pA].playerOwnedGames.push(gameID);
      
      players[pA].playerAllGames.push(gameID);
      
      
      gameID += 1;
      activeGames += 1;
      lockedValue += pV;
      players[pA].totalPlayerGames += 1;
      players[pA].lockedInGames += pV;
      
      
      
  }    
    


  function placeBet(uint256 _id, uint256 _bet) payable public{
      address pA = msg.sender;
      uint256 pV = msg.value;

      require(gameID != _id);
      require(gameID > _id);
      require(_bet == pV);
      require(bets[_id].betValue == pV);
      require(bets[_id].ownerAddress != pA);
      require(bets[_id].player2Address != pA);
      require(bets[_id].player3Address != pA);
      require(bets[_id].player4Address != pA);
      require(bets[_id].isPlayable);
      
      players[pA].playerAllGames.push(_id);
      players[pA].lockedInGames += pV;
      
      
    if (bets[_id].player2Address == address(0)){
        bets[_id].player2Address = pA;
        bets[_id].player2BetValue = pV;
        results[_id].player2Address = pA;
        
        lockedValue += pV;
        
         if (bets[_id].playerNumber == 2){
                
                bytes32 requestId = getRandomNumber();
                chainmapping[requestId] = bets[_id].gameID;
                bets[_id].isPlayable = false;
            
         }
    }else
    {
        
        if (bets[_id].player3Address == address(0)){
        bets[_id].player3Address = pA;
        bets[_id].player3BetValue = pV;
        results[_id].player3Address = pA;
        
        lockedValue += pV;
        
         if (bets[_id].playerNumber == 3){
                 
                bytes32 requestId = getRandomNumber();
                chainmapping[requestId] = bets[_id].gameID;
                bets[_id].isPlayable = false;
         }
         
         }else{
                if (bets[_id].player4Address == address(0)){
                bets[_id].player4Address = pA;
                bets[_id].player4BetValue = pV;
                results[_id].player4Address = pA;
                
                lockedValue += pV;
                
                 if (bets[_id].playerNumber == 4){
                    
                          bytes32 requestId = getRandomNumber();
                          chainmapping[requestId] = bets[_id].gameID;
                          bets[_id].isPlayable = false;
                 }
         
         }
         }
    }
    
  }  
  
  
  

     function getRandomNumber() private returns (bytes32 requestId) {
        require(LINK.balanceOf(address(this)) >= linkFee, "Not enough LINK");
        return requestRandomness(keyHash, linkFee);
     }     
  
  
     function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
       uint256 gameIDx = chainmapping[requestId];
       results[gameIDx].resultPlayer1 = uint256(keccak256(abi.encode(randomness, 4))).mod(1000).add(1);
       results[gameIDx].resultPlayer2 = uint256(keccak256(abi.encode(randomness, 5))).mod(1000).add(1);
       results[gameIDx].resultPlayer3 = uint256(keccak256(abi.encode(randomness, 6))).mod(1000).add(1);
       results[gameIDx].resultPlayer4 = uint256(keccak256(abi.encode(randomness, 7))).mod(1000).add(1);
       calculateWinner(gameIDx);
    }   
  


    function calculateWinner(uint _gameID) private {
        uint256 highestValue = 0;
        
        uint256[4] memory playerValues = [results[_gameID].resultPlayer1, 
                              results[_gameID].resultPlayer2,
                              results[_gameID].resultPlayer3,
                              results[_gameID].resultPlayer4];
        
        for(uint8 i=0; i<bets[_gameID].playerNumber; i++){
            if (playerValues[i] >= highestValue){
                highestValue = playerValues[i];
            }
        }
        
        uint8 divisor = 0;
        for(uint8 i=0; i<bets[_gameID].playerNumber; i++){
            if (playerValues[i] == highestValue){
                divisor += 1;
                
        }
        }
        
        
        uint256 totalGameWinnings = bets[_gameID].betValue + bets[_gameID].player2BetValue + bets[_gameID].player3BetValue + bets[_gameID].player4BetValue;
        if (highestValue == results[_gameID].resultPlayer1){
            players[results[_gameID].player1Address].totalWinnings += (totalGameWinnings/divisor);
            

        }
        if (highestValue == results[_gameID].resultPlayer2){
            players[results[_gameID].player2Address].totalWinnings += (totalGameWinnings/divisor);
            

        }
        if (highestValue == results[_gameID].resultPlayer3){
            players[results[_gameID].player3Address].totalWinnings += (totalGameWinnings/divisor);
            

        }
        if (highestValue == results[_gameID].resultPlayer4){
            players[results[_gameID].player4Address].totalWinnings += (totalGameWinnings/divisor);
            

        }
        

        players[results[_gameID].player1Address].totalPlayerGames -= 1;
        lockedValue -= totalGameWinnings;
        activeGames -= 1;
        
        players[results[_gameID].player1Address].lockedInGames -= bets[_gameID].betValue;
        players[results[_gameID].player2Address].lockedInGames -= bets[_gameID].player2BetValue;
        players[results[_gameID].player3Address].lockedInGames -= bets[_gameID].player3BetValue;
        players[results[_gameID].player4Address].lockedInGames -= bets[_gameID].player4BetValue;
        
        uint256 lastGameIDInArray = activeGamesList[activeGamesList.length - 1];
        activeGamesList[bets[_gameID].indexP] = lastGameIDInArray;
        bets[lastGameIDInArray].indexP = bets[_gameID].indexP;
        activeGamesList.pop();
        
        address playerAdd = results[_gameID].player1Address;
        uint256 Pindex = pOwnedGames[_gameID];
        uint256 Lindex = players[playerAdd].playerOwnedGames.length -1;
        uint256 lastGameIDInArray2 = players[playerAdd].playerOwnedGames[Lindex];
        players[playerAdd].playerOwnedGames[Pindex] = lastGameIDInArray2;
        pOwnedGames[lastGameIDInArray2] = Pindex;
        players[playerAdd].playerOwnedGames.pop();
        

    }
  
  

    function cancelGame(uint256 _id) public{
      
       require(bets[_id].isPlayable);
       require (msg.sender == bets[_id].ownerAddress);

       bets[_id].isPlayable = false;
       results[_id].isCancelled = true;

       lockedValue -= bets[_id].betValue;
       players[bets[_id].ownerAddress].totalWinnings += bets[_id].betValue;
       players[bets[_id].ownerAddress].lockedInGames -= bets[_id].betValue;
       bets[_id].betValue = 0;
       
       if (bets[_id].player2Address != address(0)){
       players[bets[_id].player2Address].totalWinnings += bets[_id].player2BetValue;
       players[bets[_id].player2Address].lockedInGames -= bets[_id].player2BetValue;
       bets[_id].player2BetValue = 0;
       }
       
       if (bets[_id].player3Address != address(0)){
       players[bets[_id].player3Address].totalWinnings += bets[_id].player3BetValue;
       players[bets[_id].player3Address].lockedInGames -= bets[_id].player3BetValue;
       bets[_id].player3BetValue = 0;
       }
       
       if (bets[_id].player4Address != address(0)){
       players[bets[_id].player4Address].totalWinnings += bets[_id].player4BetValue;
       players[bets[_id].player4Address].lockedInGames -= bets[_id].player4BetValue;
       bets[_id].player4BetValue = 0;
       }
      
       activeGames -= 1;
       players[bets[_id].ownerAddress].totalPlayerGames -= 1;
     

      uint256 lastGameIDInArray = activeGamesList[activeGamesList.length - 1];
      activeGamesList[bets[_id].indexP] = lastGameIDInArray;
      bets[lastGameIDInArray].indexP = bets[_id].indexP;
      activeGamesList.pop();
        
      address playerAdd = bets[_id].ownerAddress;
      uint256 Pindex = pOwnedGames[_id];
      uint256 Lindex = players[playerAdd].playerOwnedGames.length -1;
      uint256 lastGameIDInArray2 = players[playerAdd].playerOwnedGames[Lindex];
      players[playerAdd].playerOwnedGames[Pindex] = lastGameIDInArray2;
      pOwnedGames[lastGameIDInArray2] = Pindex;
      players[playerAdd].playerOwnedGames.pop();    
        
        
             
    }
  
  
    function payoutWinnings() public RLock(){
        address pA = msg.sender;
        uint256 winningAmount = players[pA].totalWinnings;
        require(winningAmount != 0);
        require(address(this).balance >= winningAmount);
        players[pA].totalWinnings = 0;
        winningsPaid += winningAmount;
        uint256 contractFee = calculateFee(winningAmount);
        contractUpkeep += contractFee;
        winningAmount -= contractFee;
        
        payable(pA).transfer(winningAmount);
    }
  
  
  
    
  function calculateFee(uint256 p_Value) private view returns (uint256){
      uint256 calcFee = (p_Value*basePercent)/100;
      return calcFee;
  }
  
  
    function ownerWithdraw(uint _amount) public onlyOwner{
        require(address(this).balance != 0);
        payable(msg.sender).transfer(_amount);
    }
    


  function withdrawLink() public onlyOwner {
        require(LINK.transfer(msg.sender, LINK.balanceOf(address(this))));
    }



  function showContractBalance() public view returns (uint256 _balance) {
      return address(this).balance;
    }    
    
    
    
    
   function playerOwnedGames(address _pA) public view returns (uint256[] memory playerOwned) {
      return players[_pA].playerOwnedGames;
    
   }
   


   function playerAllGamesResults(address _pA, uint256 _offset) public view returns (uint256 playerGame) {
          
     if (players[_pA].playerAllGames.length == 0){
         return 0;
     }
     else{
         if (players[_pA].playerAllGames.length-1 <  _offset){return 0; }
         return players[_pA].playerAllGames[_offset];
         
     }
    
        
    }



    
    function updateBetBaseValue(uint256 _fee, uint256 _basePercent) public onlyOwner {
      linkFee = _fee;
      basePercent = _basePercent;
  }  
    
    function showUpkeep() public onlyOwner view returns (uint256){
      return contractUpkeep;
  }  
  
  
    modifier RLock(){
      bool Rlock = false;
            require(!Rlock);
            Rlock = true;
            _;
            Rlock = false;
        }    
    
}