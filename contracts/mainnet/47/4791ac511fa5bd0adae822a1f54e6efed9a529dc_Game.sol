/**
 *Submitted for verification at polygonscan.com on 2022-02-16
*/

// SPDX-License-Identifier: MIT

pragma solidity ^0.8.10;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}


contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}


abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}


library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


library QuickSort {
    function _sort(uint256[] memory data) public returns (uint256[] memory) {
        _quickSort(data, int256(0), int256(data.length - 1));
        return data;
    }

    function _quickSort(
        uint256[] memory arr,
        int256 left,
        int256 right
    ) internal {
        int256 i = left;
        int256 j = right;
        if (i == j) return;
        uint256 pivot = arr[uint256(left + (right - left) / 2)];
        while (i <= j) {
            while (arr[uint256(i)] < pivot) i++;
            while (pivot < arr[uint256(j)]) j--;
            if (i <= j) {
                (arr[uint256(i)], arr[uint256(j)]) = (
                    arr[uint256(j)],
                    arr[uint256(i)]
                );
                i++;
                j--;
            }
        }
        if (left < j) _quickSort(arr, left, j);
        if (i < right) _quickSort(arr, i, right);
    }
}


contract Game is VRFConsumerBase, Ownable, ReentrancyGuard {
    using Address for address payable;
    using QuickSort for uint256[];

    bytes32 internal keyHash;

    address private dev;

    uint256 internal fee;

    uint256 private currentJackpot;

    uint256 private highestScore;

    address private currentWinner;

    uint256 private gamesTillJackpot;

    uint256 private gamesPlayedInRound;

    uint256 private priceToPlay;

    uint256 private round;

    struct Scoring {
        uint256 credit;
        uint256 canRoll;
        uint256[2] ones;
        uint256[2] twos;
        uint256[2] threes;
        uint256[2] fours;
        uint256[2] fives;
        uint256[2] sixes;
        uint256[2] pair;
        uint256[2] threeKind;
        uint256[2] fiveKind;
        uint256[2] threeRow;
        uint256[2] fourRow;
        uint256[2] hogwash;
        uint256 upperScore;
        uint256 lowerScore;
    }

    mapping(address => uint256) private winnersJackpots;

    mapping(bytes32 => address) private requestIdToAddress;

    mapping(address => uint256[]) private dice;

    mapping(address => bool) private vrf;

    mapping(address => Scoring) private game;

    event GameStarted(address player);
    event GameFinished(address player, uint256 score, uint256 round);
    event JackpotWon(address winner, uint256 jackpotAmount, uint256 round);

    constructor(address _dev)
        VRFConsumerBase(
            0x3d2341ADb2D31f1c5530cDC622016af293177AE0, //vrf
            0xb0897686c545045aFc77CF20eC7A532E3120E0F1 //link token
        )
    {
        setDevAddress(_dev);
        keyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;
        fee = 0.0001 * 10**18;
        priceToPlay = 2 * 10**18;
        round = 1;
        gamesTillJackpot = 10;
    }

    function setPriceToPlay(uint256 _newPrice) public onlyOwner {
        priceToPlay = _newPrice;
    }

    function setRoundLength(uint256 _gamesTillJackpot) public onlyOwner {
        gamesTillJackpot = _gamesTillJackpot;
    }

    function setKeyHash(bytes32 _keyHash) public onlyOwner {
        keyHash = _keyHash;
    }

    function setDevAddress(address _dev) public onlyOwner {
        dev = _dev;
    }

    function setFee(uint256 _fee) public onlyOwner {
        fee = _fee;
    }

    function getVars()
        public
        view
        returns (
            address,
            uint256,
            uint256,
            uint256
        )
    {
        return (currentWinner, currentJackpot, highestScore, round);
    }

    function getJackpotAmount() public view returns (uint256) {
        return winnersJackpots[msg.sender];
    }

    function getGame() public view returns (Scoring memory scoring) {
        return game[msg.sender];
    }

    function getVRF() public view returns (bool) {
        return vrf[msg.sender];
    }

    function sendPaymentToPlay() public payable nonReentrant {
        require(game[msg.sender].credit == 0);
        require(msg.value == priceToPlay);
        currentJackpot += (msg.value / 4) * 3;
        payable(dev).sendValue((msg.value / 4));
        game[msg.sender].credit = 1;
        emit GameStarted(msg.sender);
    }

    function gameOver() public nonReentrant {
        require(game[msg.sender].credit == 1);
        if (game[msg.sender].upperScore >= 42000) {
            game[msg.sender].upperScore += 23000;
        }
        uint256 _currentRound = round;
        uint256 _score = game[msg.sender].upperScore +
            game[msg.sender].lowerScore;

        delete game[msg.sender];
        delete dice[msg.sender];
        delete vrf[msg.sender];
        gamesPlayedInRound += 1;

        if (_score > highestScore) {
            highestScore = _score;
            currentWinner = msg.sender;
        }
        if (gamesTillJackpot - gamesPlayedInRound == 0) {
            _sendWinningsToMapping();
        }
        emit GameFinished(msg.sender, _score, _currentRound);
    }

    function _sendWinningsToMapping() internal {
        uint256 jackpot = currentJackpot;
        uint256 winningRound = round;
        address jackpotWinner = currentWinner;

        round += 1;
        currentJackpot = 0;
        currentWinner = 0x0000000000000000000000000000000000000000;
        highestScore = 0;
        gamesPlayedInRound = 0;

        winnersJackpots[jackpotWinner] += jackpot;

        emit JackpotWon(jackpotWinner, jackpot, winningRound);
    }

    function withdrawWinnings() public {
        require(winnersJackpots[msg.sender] != 0);
        uint256 payment = winnersJackpots[msg.sender];

        winnersJackpots[msg.sender] = 0;
        delete winnersJackpots[msg.sender];

        payable(msg.sender).sendValue(payment);
    }

    function rollDice() public returns (bytes32 requestId) {
        require(LINK.balanceOf(address(this)) >= fee);
        require(game[msg.sender].credit == 1);
        require(game[msg.sender].canRoll == 0);
        require(vrf[msg.sender] == false);
        requestId = requestRandomness(keyHash, fee);
        requestIdToAddress[requestId] = msg.sender;
        vrf[msg.sender] = true;
    }

    function fulfillRandomness(bytes32 requestId, uint256 randomness)
        internal
        override
    {
        address requestAddress = requestIdToAddress[requestId];
        _expand(randomness, requestAddress);
        game[requestAddress].canRoll = 1;
        delete requestIdToAddress[requestId];
    }

    function _expand(uint256 randomValue, address calledBy) internal {
        delete dice[calledBy];
        uint256[] memory expandedValues = new uint256[](5);
        for (uint256 i = 0; i < 5; i++) {
            expandedValues[i] =
                (uint256(keccak256(abi.encode(randomValue, i))) % 6) +
                1;
        }
        dice[calledBy] = QuickSort._sort(expandedValues);
        delete vrf[calledBy];
    }

    function getDice() public view returns (uint256[] memory) {
        return dice[msg.sender];
    }

    function scoreOnes() public {
        require(game[msg.sender].ones[1] == 0 && game[msg.sender].canRoll == 1);
        uint256[] memory _dice = dice[msg.sender];
        uint256 _score;
        for (uint256 i = 0; i < _dice.length; i++) {
            if (_dice[i] == 1) {
                _score++;
            }
        }
        game[msg.sender].upperScore += _score * 1000;
        game[msg.sender].ones[0] = _score * 1000;
        game[msg.sender].ones[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function scoreTwos() public {
        require(game[msg.sender].twos[1] == 0 && game[msg.sender].canRoll == 1);
        uint256[] memory _dice = dice[msg.sender];
        uint256 _score;
        for (uint256 i = 0; i < _dice.length; i++) {
            if (_dice[i] == 2) {
                _score += 2;
            }
        }
        game[msg.sender].upperScore += _score * 1000;
        game[msg.sender].twos[0] = _score * 1000;
        game[msg.sender].twos[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function scoreThrees() public {
        require(
            game[msg.sender].threes[1] == 0 && game[msg.sender].canRoll == 1
        );
        uint256[] memory _dice = dice[msg.sender];
        uint256 _score;
        for (uint256 i = 0; i < _dice.length; i++) {
            if (_dice[i] == 3) {
                _score += 3;
            }
        }
        game[msg.sender].upperScore += _score * 1000;
        game[msg.sender].threes[0] = _score * 1000;
        game[msg.sender].threes[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function scoreFours() public {
        require(
            game[msg.sender].fours[1] == 0 && game[msg.sender].canRoll == 1
        );
        uint256[] memory _dice = dice[msg.sender];
        uint256 _score;
        for (uint256 i = 0; i < _dice.length; i++) {
            if (_dice[i] == 4) {
                _score += 4;
            }
        }
        game[msg.sender].upperScore += _score * 1000;
        game[msg.sender].fours[0] = _score * 1000;
        game[msg.sender].fours[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function scoreFives() public {
        require(
            game[msg.sender].fives[1] == 0 && game[msg.sender].canRoll == 1
        );
        uint256[] memory _dice = dice[msg.sender];
        uint256 _score;
        for (uint256 i = 0; i < _dice.length; i++) {
            if (_dice[i] == 5) {
                _score += 5;
            }
        }
        game[msg.sender].upperScore += _score * 1000;
        game[msg.sender].fives[0] = _score * 1000;
        game[msg.sender].fives[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function scoreSixes() public {
        require(
            game[msg.sender].sixes[1] == 0 && game[msg.sender].canRoll == 1
        );
        uint256[] memory _dice = dice[msg.sender];
        uint256 _score;
        for (uint256 i = 0; i < _dice.length; i++) {
            if (_dice[i] == 6) {
                _score += 6;
            }
        }
        game[msg.sender].upperScore += _score * 1000;
        game[msg.sender].sixes[0] = _score * 1000;
        game[msg.sender].sixes[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function scoreHogwash() public {
        require(
            game[msg.sender].hogwash[1] == 0 && game[msg.sender].canRoll == 1
        );
        uint256[] memory _dice = dice[msg.sender];
        uint256 _score;
        for (uint256 i = 0; i < _dice.length; i++) {
            _score += _dice[i];
        }
        game[msg.sender].lowerScore += _score * 1000;
        game[msg.sender].hogwash[0] = _score * 1000;
        game[msg.sender].hogwash[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function scorePair() public {
        require(game[msg.sender].pair[1] == 0 && game[msg.sender].canRoll == 1);
        uint256[] memory _dice = dice[msg.sender];
        uint256 occurances = 1;
        uint256 _score;
        for (uint256 i = 0; i < _dice.length - 1; i++) {
            if (_dice[i + 1] == _dice[i]) {
                occurances++;
            }
        }
        if (occurances >= 2) {
            for (uint256 i = 0; i < _dice.length; i++) {
                _score += _dice[i];
            }
        }
        game[msg.sender].lowerScore += _score * 1000;
        game[msg.sender].pair[0] = _score * 1000;
        game[msg.sender].pair[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function scoreThreeOfAKind() public {
        require(
            game[msg.sender].threeKind[1] == 0 && game[msg.sender].canRoll == 1
        );
        uint256[] memory _dice = dice[msg.sender];
        uint256 occurances = 1;
        uint256 _score;
        for (uint256 i = 0; i < _dice.length - 2; i++) {
            if (_dice[i + 1] == _dice[i]) {
                if (_dice[i + 2] == _dice[i + 1]) {
                    occurances++;
                }
            }
        }
        if (occurances >= 2) {
            for (uint256 i = 0; i < _dice.length; i++) {
                _score += _dice[i];
            }
        }
        game[msg.sender].lowerScore += _score * 1000;
        game[msg.sender].threeKind[0] = _score * 1000;
        game[msg.sender].threeKind[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function scoreFiveOfAKind() public {
        require(
            game[msg.sender].fiveKind[1] == 0 && game[msg.sender].canRoll == 1
        );
        uint256[] memory _dice = dice[msg.sender];
        uint256 occurances = 1;
        for (uint256 i = 0; i < _dice.length - 1; i++) {
            if (_dice[i + 1] == _dice[i]) {
                occurances++;
            }
        }
        if (occurances == 5) {
            game[msg.sender].lowerScore += 50000;
            game[msg.sender].fiveKind[0] = 50000;
        } else {
            game[msg.sender].lowerScore += 0;
            game[msg.sender].fiveKind[0] = 0;
        }
        game[msg.sender].fiveKind[1] = 1;
        game[msg.sender].canRoll = 0;
    }

    function scoreThreeInARow() public {
        require(
            game[msg.sender].threeRow[1] == 0 && game[msg.sender].canRoll == 1
        );
        uint256[] memory _dice = dice[msg.sender];
        uint256 occurances = 1;
        for (uint256 i = 0; i < _dice.length - 1; i++) {
            if (_dice[i + 1] == _dice[i] + 1) {
                occurances++;
            }
        }
        if (occurances >= 3) {
            game[msg.sender].lowerScore += 30000;
            game[msg.sender].threeRow[0] = 30000;
        } else {
            game[msg.sender].lowerScore += 0;
            game[msg.sender].threeRow[0] = 0;
        }
        game[msg.sender].threeRow[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function scoreFourInARow() public {
        require(
            game[msg.sender].fourRow[1] == 0 && game[msg.sender].canRoll == 1
        );
        uint256[] memory _dice = dice[msg.sender];
        uint256 occurances = 1;
        for (uint256 i = 0; i < _dice.length - 1; i++) {
            if (_dice[i + 1] == _dice[i] + 1) {
                occurances++;
            }
        }
        if (occurances >= 4) {
            game[msg.sender].lowerScore += 40000;
            game[msg.sender].fourRow[0] = 40000;
        } else {
            game[msg.sender].lowerScore += 0;
            game[msg.sender].fourRow[0] = 0;
        }
        game[msg.sender].fourRow[1] = 1;
        game[msg.sender].canRoll = 0;
        _fiveOfKindBonusCheck(_dice, msg.sender);
    }

    function _fiveOfKindBonusCheck(uint256[] memory _diceArr, address _caller)
        internal
    {
        if (game[_caller].fiveKind[0] == 50000) {
            uint256 occurances = 1;
            for (uint256 i = 0; i < _diceArr.length - 1; i++) {
                if (_diceArr[i + 1] == _diceArr[i]) {
                    occurances++;
                }
            }
            if (occurances == 5) {
                game[_caller].lowerScore += 100000;
            }
        }
    }

    function withdrawLINK() public onlyOwner {
        LinkTokenInterface link = LinkTokenInterface(
            0x326C977E6efc84E512bB9C30f76E30c160eD06FB
        );
        require(link.transfer(msg.sender, link.balanceOf(address(this))));
    }
}