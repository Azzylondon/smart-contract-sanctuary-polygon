/**
 *Submitted for verification at polygonscan.com on 2022-04-13
*/

// File: @chainlink/contracts/src/v0.8/VRFRequestIDBase.sol


pragma solidity ^0.8.0;

contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol


pragma solidity ^0.8.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}

// File: @chainlink/contracts/src/v0.8/VRFConsumerBase.sol


pragma solidity ^0.8.0;



/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: @openzeppelin/contracts/utils/Strings.sol


// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: @openzeppelin/contracts/utils/Address.sol


// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)

pragma solidity ^0.8.1;

/**
 * @dev Collection of functions related to the address type
 */
library Address {
    /**
     * @dev Returns true if `account` is a contract.
     *
     * [IMPORTANT]
     * ====
     * It is unsafe to assume that an address for which this function returns
     * false is an externally-owned account (EOA) and not a contract.
     *
     * Among others, `isContract` will return false for the following
     * types of addresses:
     *
     *  - an externally-owned account
     *  - a contract in construction
     *  - an address where a contract will be created
     *  - an address where a contract lived, but was destroyed
     * ====
     *
     * [IMPORTANT]
     * ====
     * You shouldn't rely on `isContract` to protect against flash loan attacks!
     *
     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets
     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract
     * constructor.
     * ====
     */
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize/address.code.length, which returns 0
        // for contracts in construction, since the code is only stored at the end
        // of the constructor execution.

        return account.code.length > 0;
    }

    /**
     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to
     * `recipient`, forwarding all available gas and reverting on errors.
     *
     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
     * of certain opcodes, possibly making contracts go over the 2300 gas limit
     * imposed by `transfer`, making them unable to receive funds via
     * `transfer`. {sendValue} removes this limitation.
     *
     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].
     *
     * IMPORTANT: because control is transferred to `recipient`, care must be
     * taken to not create reentrancy vulnerabilities. Consider using
     * {ReentrancyGuard} or the
     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].
     */
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    /**
     * @dev Performs a Solidity function call using a low level `call`. A
     * plain `call` is an unsafe replacement for a function call: use this
     * function instead.
     *
     * If `target` reverts with a revert reason, it is bubbled up by this
     * function (like regular Solidity function calls).
     *
     * Returns the raw returned data. To convert to the expected return value,
     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].
     *
     * Requirements:
     *
     * - `target` must be a contract.
     * - calling `target` with `data` must not revert.
     *
     * _Available since v3.1._
     */
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with
     * `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but also transferring `value` wei to `target`.
     *
     * Requirements:
     *
     * - the calling contract must have an ETH balance of at least `value`.
     * - the called Solidity function must be `payable`.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    /**
     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but
     * with `errorMessage` as a fallback revert reason when `target` reverts.
     *
     * _Available since v3.1._
     */
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a static call.
     *
     * _Available since v3.3._
     */
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    /**
     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],
     * but performing a delegate call.
     *
     * _Available since v3.4._
     */
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    /**
     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the
     * revert reason using the provided one.
     *
     * _Available since v4.3._
     */
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}

// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)

pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// File: @openzeppelin/contracts/utils/introspection/IERC165.sol


// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// File: @openzeppelin/contracts/utils/introspection/ERC165.sol


// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)

pragma solidity ^0.8.0;


/**
 * @dev Implementation of the {IERC165} interface.
 *
 * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
 * for the additional interface id that will be supported. For example:
 *
 * ```solidity
 * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
 *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
 * }
 * ```
 *
 * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
 */
abstract contract ERC165 is IERC165 {
    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

// File: @openzeppelin/contracts/token/ERC721/IERC721.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)

pragma solidity ^0.8.0;


/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol


// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)

pragma solidity ^0.8.0;


/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}

// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)

pragma solidity ^0.8.0;


/**
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Metadata is IERC721 {
    /**
     * @dev Returns the token collection name.
     */
    function name() external view returns (string memory);

    /**
     * @dev Returns the token collection symbol.
     */
    function symbol() external view returns (string memory);

    /**
     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.
     */
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

// File: @openzeppelin/contracts/token/ERC721/ERC721.sol


// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)

pragma solidity ^0.8.0;








/**
 * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including
 * the Metadata extension, but not including the Enumerable extension, which is available separately as
 * {ERC721Enumerable}.
 */
contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    // Token name
    string private _name;

    // Token symbol
    string private _symbol;

    // Mapping from token ID to owner address
    mapping(uint256 => address) private _owners;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /**
     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.
     */
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721-balanceOf}.
     */
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    /**
     * @dev See {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev See {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev See {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    /**
     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each
     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty
     * by default, can be overriden in child contracts.
     */
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    /**
     * @dev See {IERC721-getApproved}.
     */
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    /**
     * @dev See {IERC721-setApprovalForAll}.
     */
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    /**
     * @dev See {IERC721-isApprovedForAll}.
     */
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    /**
     * @dev See {IERC721-transferFrom}.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        //solhint-disable-next-line max-line-length
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    /**
     * @dev See {IERC721-safeTransferFrom}.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `_data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    /**
     * @dev Returns whether `tokenId` exists.
     *
     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.
     *
     * Tokens start existing when they are minted (`_mint`),
     * and stop existing when they are burned (`_burn`).
     */
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    /**
     * @dev Safely mints `tokenId` and transfers it to `to`.
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    /**
     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is
     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.
     */
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    /**
     * @dev Mints `tokenId` and transfers it to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible
     *
     * Requirements:
     *
     * - `tokenId` must not exist.
     * - `to` cannot be the zero address.
     *
     * Emits a {Transfer} event.
     */
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);

        _afterTokenTransfer(address(0), to, tokenId);
    }

    /**
     * @dev Destroys `tokenId`.
     * The approval is cleared when the token is burned.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     *
     * Emits a {Transfer} event.
     */
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        // Clear approvals
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);

        _afterTokenTransfer(owner, address(0), tokenId);
    }

    /**
     * @dev Transfers `tokenId` from `from` to `to`.
     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.
     *
     * Requirements:
     *
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     *
     * Emits a {Transfer} event.
     */
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        // Clear approvals from the previous owner
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);

        _afterTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev Approve `to` to operate on `tokenId`
     *
     * Emits a {Approval} event.
     */
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    /**
     * @dev Approve `operator` to operate on all of `owner` tokens
     *
     * Emits a {ApprovalForAll} event.
     */
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param _data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}

    /**
     * @dev Hook that is called after any transfer of tokens. This includes
     * minting and burning.
     *
     * Calling conditions:
     *
     * - when `from` and `to` are both non-zero.
     * - `from` and `to` are never both zero.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}

// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol


// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)

pragma solidity ^0.8.0;



/**
 * @dev This implements an optional extension of {ERC721} defined in the EIP that adds
 * enumerability of all the token ids in the contract as well as all token ids owned by each
 * account.
 */
abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    // Mapping from owner to list of owned token IDs
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    // Mapping from token ID to index of the owner tokens list
    mapping(uint256 => uint256) private _ownedTokensIndex;

    // Array with all token ids, used for enumeration
    uint256[] private _allTokens;

    // Mapping from token id to position in the allTokens array
    mapping(uint256 => uint256) private _allTokensIndex;

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    /**
     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    /**
     * @dev See {IERC721Enumerable-totalSupply}.
     */
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    /**
     * @dev See {IERC721Enumerable-tokenByIndex}.
     */
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    /**
     * @dev Hook that is called before any token transfer. This includes minting
     * and burning.
     *
     * Calling conditions:
     *
     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be
     * transferred to `to`.
     * - When `from` is zero, `tokenId` will be minted for `to`.
     * - When `to` is zero, ``from``'s `tokenId` will be burned.
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     *
     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
     */
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    /**
     * @dev Private function to add a token to this extension's ownership-tracking data structures.
     * @param to address representing the new owner of the given token ID
     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address
     */
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    /**
     * @dev Private function to add a token to this extension's token tracking data structures.
     * @param tokenId uint256 ID of the token to be added to the tokens list
     */
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    /**
     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that
     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for
     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).
     * This has O(1) time complexity, but alters the order of the _ownedTokens array.
     * @param from address representing the previous owner of the given token ID
     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address
     */
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index
        }

        // This also deletes the contents at the last position of the array
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    /**
     * @dev Private function to remove a token from this extension's token tracking data structures.
     * This has O(1) time complexity, but alters the order of the _allTokens array.
     * @param tokenId uint256 ID of the token to be removed from the tokens list
     */
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and
        // then delete the last slot (swap and pop).

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so
        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding
        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token
        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index

        // This also deletes the contents at the last position of the array
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}

// File: WPNS.sol


pragma solidity 0.8.9;




contract CryptomedaWeapons is ERC721,ERC721Enumerable,Ownable,VRFConsumerBase {

    enum Logging {CREATION, ATTRIBS, GAME_EXP, EXTRA_ATTRIBS, PARTNER_ATTRIBS}

    event CreateWeapon(
        uint256 tokenId,
        uint256 weaponTierLvl,
        uint256 weaponType,
        uint256 weaponSubtype,
        uint256 weaponCategory,
        uint256 serialNo,
        uint256 security,
        uint256 anonymity,
        uint256 innovation,
        address recipient);
    event SetAttribs(uint256 tokenId, uint256 sec, uint256 ano, uint256 inn);
    event SetGameExp(uint256 tokenId, uint256 newGameExp);
    event BurnWeapon(uint256 tokenId, uint256 tierLvl, uint256 sumOfAttributes, address owner);
    event AddWeaponTier(uint256 tierLvl, uint256 typeCnt, uint256 subtypeCnt, uint256 categoryCnt, uint256 mintCap);
    event ChangeTtsMintCap(uint256 tierLvl, uint256 newCap);
    event IncreaseWeaponTypeCount(uint256 tierLvl, uint256 newValue);
    event IncreaseWeaponSubtypeCount(uint256 tierLvl, uint256 newValue);
    event IncreaseWeaponCategoryCount(uint256 tierLvl, uint256 newValue);
    event DeleteLastWeaponTier(uint256 tierLvl);
    event ChangeAdmin(address newAdmin);
    event ChangeBurner(address newBurner);
    event ChangeMinter(address newMinter);
    event ChangeSuperAdmin(address newSuperAdmin);
    event SetAutoRandomRequest(uint256 newStatus);
    event ToggleSafeMinting(bool newSafeMinting);
    event ToggleVrf(bool newVrf);
    event TogglePartner(address partner, bool isPartner);
    event DeletePartnerTokenData(address partner, uint256 fromTokenId, uint256 toTokenId, uint256 count);
    event SetPartnerTokenAttribByIndex(address partner, uint256 tokenId, uint256 index, uint256 value);
    event SetPartnerTokenAttribs(address partner, uint256 tokenId, uint256[8] values);
    event SetExtraTokenAttribByIndex(uint256 tokenId, uint256 index, uint256 value);
    event SetExtraTokenAttribs(uint256 tokenId, uint256[8] values);
    event ToggleLogging(bool emitCreation, bool emitAttribs, bool emitGameExp, bool emitExtraAttribs, bool emitPartnerAttribs);

    // struct for returning token data
    struct TokenData {
        uint256 weaponTierLvl;
        uint256 weaponType;
        uint256 weaponSubtype;
        uint256 weaponCategory;
        uint256 serialNo;
        uint256 security;
        uint256 anonymity;
        uint256 innovation;
    }

    // weapon tier parameters
    struct WeaponTier {
        uint8 tierLvl; 
        uint8 typeCnt;
        uint8 subtypeCnt;
        uint24 categoryCnt;
        uint32 ttsMintCap;
    }
    WeaponTier[] public weaponTiers;

    mapping (uint256 => uint256) public tokenData; // main token data (tier,type,subtype,serialno,category,attributes)
    mapping (uint256 => uint256) public extraTokenData; // extra token data (stores 8 x uint32 values)
    mapping (uint256 => uint256) public tokenGameExp; // token game experience
    mapping (uint256 => uint256) public wpnTierMintIndex; // mint index per weapon tier
    mapping (uint256 => uint256) public wpnTTSMintIndex; // mint index per tier-type-subtype (TTS)
    mapping(address => bool) public isPartner; // partners can store/update their partnerTokenData
    mapping(address => mapping(uint256 => uint256)) public partnerTokenData; // partner token data (stores 8 x uint32 values)

    string private _baseURI_;

    bytes32 internal keyHash;
    uint256 internal fee;
    uint256 private _rndNumVrf;

    uint256 public maxTokenId;

    address public admin;
    address public burner;
    address public minter;
    address public superAdmin;

    uint16 public maxMintBatch;
    uint8 public autoRandomRequest;
    bool public vrf;
    bool public safeMinting;
    bool public emitCreation;
    bool public emitAttribs;
    bool public emitGameExp;
    bool public emitExtraAttribs;
    bool public emitPartnerAttribs;

    uint8 constant MAX_ATTRIB_LVL = 100;
    uint8 constant MAX_TIER_LVL = 4;

    modifier onlyAdmin {
        require(msg.sender == admin || msg.sender == superAdmin || msg.sender == owner(), "ADM-00");
        _;
    }
    modifier onlySuperAdmin {
        require(msg.sender == superAdmin || msg.sender == owner(), "SDM-00");
        _;
    }
    modifier onlyBurner {
        require(msg.sender == burner || msg.sender == superAdmin || msg.sender == owner(), "BRN-00");
        _;
    }
    modifier onlyMinter {
        require(msg.sender == minter || msg.sender == admin || msg.sender == superAdmin || msg.sender == owner(), "MNT-00");
        _;
    }

    constructor()
        ERC721("CryptomedaWeapons","CMW")
        VRFConsumerBase(
            0x3d2341ADb2D31f1c5530cDC622016af293177AE0, // VRF Coordinator Polygon Mainnet
            0xb0897686c545045aFc77CF20eC7A532E3120E0F1  // LINK Token Polygon Mainnet
        )
    {
        keyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da; // Polygon Mainnet
        fee = 0.0001 * 10 ** 18; // 0.0001 LINK
        vrf = true;
        autoRandomRequest = 0;
        //
        admin = msg.sender;
        burner = msg.sender;
        minter = msg.sender;
        superAdmin = msg.sender;
        //
        maxMintBatch = 100;
        safeMinting = true;
        //
        emitCreation = true;
        emitAttribs = true;
        emitGameExp = true;
        emitExtraAttribs = true;
        emitPartnerAttribs = true;
    }

    function addWeaponTier
    (
        uint256 _typeCnt,
        uint256 _subtypeCnt,
        uint256 _categoryCnt,
        uint256 _mintCap
    )
        external
        onlySuperAdmin
    {
        uint256 tierLvl_ = weaponTiers.length+1;
        require(tierLvl_ <= MAX_TIER_LVL,"AWT-01");
        require(_typeCnt > 0 && _subtypeCnt > 0 && _categoryCnt > 0,"AWT-02");
        weaponTiers.push(
            WeaponTier(
                uint8(tierLvl_),
                uint8(_typeCnt),
                uint8(_subtypeCnt),
                uint8(_categoryCnt),
                uint32(_mintCap)));
        emit AddWeaponTier(tierLvl_,_typeCnt,_subtypeCnt,_categoryCnt,_mintCap);
    }

    function deleteLastWeaponTier() external onlySuperAdmin {
        uint256 tierLvl_ = weaponTiers.length;
        require(wpnTierMintIndex[tierLvl_] == 0,"DWT-01");
        weaponTiers.pop();
        emit DeleteLastWeaponTier(tierLvl_);
    }

    function setAttribs(uint256 _tokenId, uint256 _sec, uint256 _ano, uint256 _inn)
        external
        onlyAdmin
    {
        _setAttributes(_tokenId, _sec, _ano, _inn);
    }

    function increaseAttribs(uint256 _tokenId, uint256 _secAmount, uint256 _anoAmount, uint256 _innAmount)
        external
        onlyAdmin
    {
        (uint256 sec_, uint256 ano_, uint256 inn_) = getAttribs(_tokenId);
        sec_ += _secAmount;
        ano_ += _anoAmount;
        inn_ += _innAmount;
        _setAttributes(_tokenId, sec_, ano_, inn_);
    }

    function setBaseURI(string memory newBaseURI) external onlyAdmin {
        _baseURI_ = newBaseURI;
    }

    function changeTtsMintCap(uint256 _tierLvl, uint256 _newCap) external onlySuperAdmin{
        require(_tierLvl > 0 && _tierLvl <= weaponTiers.length,"CAP-01");
        WeaponTier storage weaponTier_ = weaponTiers[_tierLvl-1];
        weaponTier_.ttsMintCap = uint32(_newCap);
        emit ChangeTtsMintCap(_tierLvl, _newCap);
    }

    function increaseWeaponTypeCount(uint256 _tierLvl) external onlySuperAdmin{
        require(_tierLvl > 0 && _tierLvl <= weaponTiers.length,"IWT-01");
        WeaponTier storage weaponTier_ = weaponTiers[_tierLvl-1];
        weaponTier_.typeCnt++;
        emit IncreaseWeaponTypeCount(_tierLvl, weaponTier_.typeCnt);
    }

    function increaseWeaponSubtypeCount(uint256 _tierLvl) external onlySuperAdmin{
        require(_tierLvl > 0 && _tierLvl <= weaponTiers.length,"IWS-01");
        WeaponTier storage weaponTier_ = weaponTiers[_tierLvl-1];
        weaponTier_.subtypeCnt++;
        emit IncreaseWeaponSubtypeCount(_tierLvl, weaponTier_.subtypeCnt);
    }

    function increaseWeaponCategoryCount(uint256 _tierLvl) external onlySuperAdmin{
        require(_tierLvl > 0 && _tierLvl <= weaponTiers.length,"IWC-01");
        WeaponTier storage weaponTier_ = weaponTiers[_tierLvl-1];
        weaponTier_.categoryCnt++;
        emit IncreaseWeaponCategoryCount(_tierLvl, weaponTier_.categoryCnt);
    }

    function setMaxMintBatch(uint16 _newMaxMintBatch) external onlyAdmin {
        maxMintBatch = _newMaxMintBatch;
    }

    function setMaxTokenId(uint16 _newMaxTokenId) external onlySuperAdmin {
        require(_newMaxTokenId > maxTokenId,"MAX-01");
        maxTokenId = _newMaxTokenId;
    }

    function toggleVrf() external onlySuperAdmin {
        vrf = !vrf;
        emit ToggleVrf(vrf);
    }

    function setAutoRandomRequest(uint256 _newStatus) external onlyAdmin {
        require(_newStatus < 3, "ARR-01");
        autoRandomRequest = uint8(_newStatus);
        emit SetAutoRandomRequest(_newStatus);
    }

    function toggleSafeMinting() external onlyAdmin {
        safeMinting = !safeMinting;
        emit ToggleSafeMinting(safeMinting);
    }

    function changeAdmin(address _newAdmin)
        external
        onlySuperAdmin
    {
        require(_newAdmin != address(0) && _newAdmin != admin,"ADM-01");
        admin = _newAdmin;
        emit ChangeAdmin(_newAdmin);
    }

    function changeBurner(address _newBurner)
        external
        onlySuperAdmin
    {
        require(_newBurner != address(0) && _newBurner != burner,"BRN-01");
        burner = _newBurner;
        emit ChangeBurner(_newBurner);
    }

    function changeMinter(address _newMinter)
        external
        onlySuperAdmin
    {
        require(_newMinter != address(0) && _newMinter != minter,"MNT-01");
        minter = _newMinter;
        emit ChangeMinter(_newMinter);
    }

    function changeSuperAdmin(address _newSuperAdmin)
        external
        onlyOwner
    {
        require(_newSuperAdmin != address(0) && _newSuperAdmin != superAdmin,"SDM-01");
        superAdmin = _newSuperAdmin;
        emit ChangeSuperAdmin(_newSuperAdmin);
    }

    function setExtraTokenAttribByIndex(uint256[] calldata _tokenId, uint256 _index, uint256[] calldata _value) external onlyAdmin{
        require(_index > 0 && _index <= 8, "EXT-02");
        uint256 tokenIdLength_ = _tokenId.length;
        require(tokenIdLength_ == _value.length, "EXT-03");
        uint256 idTokenMax_ = maxTokenId;
        for (uint256 i = 0; i < tokenIdLength_; i++) {
            require(_tokenId[i] <= idTokenMax_,"EXT-01");
            _setExtraTokenAttribByIndex(_tokenId[i], _index, _value[i]);
        }
    }

    function setExtraTokenAttribs(uint256[] calldata _tokenId, uint256[8][] memory _values) external onlyAdmin {
        uint256 tokenIdLength_ = _tokenId.length;
        require(tokenIdLength_ == _values.length, "EXT-03");
        uint256 idTokenMax_ = maxTokenId;
        for (uint256 i = 0; i < tokenIdLength_; i++) {
            require(_tokenId[i] <= idTokenMax_,"EXT-01");
            _setExtraTokenAttribs(_tokenId[i], _values[i]);
        }
    }

    function deletePartnerTokenData_All(address _partner) external onlySuperAdmin {
        _deletePartnerTokenData(_partner, 1, maxTokenId);
    }

    function deletePartnerTokenData_Batch(address _partner, uint256 _fromTokenId, uint256 _toTokenId) external onlySuperAdmin {
        if (_toTokenId > maxTokenId) _toTokenId = maxTokenId;
        _deletePartnerTokenData(_partner, _fromTokenId, _toTokenId);
    }

 
    function toggleLogging(Logging _eventId) external onlySuperAdmin {
        if (_eventId == Logging.CREATION) emitCreation = !emitCreation;
        else if (_eventId == Logging.ATTRIBS) emitAttribs = !emitAttribs;
        else if (_eventId == Logging.GAME_EXP) emitGameExp = !emitGameExp;
        else if (_eventId == Logging.EXTRA_ATTRIBS) emitExtraAttribs = !emitExtraAttribs;
        else emitPartnerAttribs = !emitPartnerAttribs;
        emit ToggleLogging(emitCreation, emitAttribs, emitGameExp, emitExtraAttribs, emitPartnerAttribs);
    }

    function setGameExp(uint256 _tokenId, uint256 _amount) external onlyAdmin {
        tokenGameExp[_tokenId] = _amount;
        if (emitGameExp)
            emit SetGameExp(_tokenId, _amount);
    }

    function increaseGameExp(uint256 _tokenId, uint256 _amount) external onlyAdmin {
        tokenGameExp[_tokenId] += _amount;
        if (emitGameExp)
            emit SetGameExp(_tokenId, tokenGameExp[_tokenId]);
    }

    function togglePartner(address _partner) external onlySuperAdmin {
        bool isPartner_ = isPartner[_partner];
        isPartner[_partner] = !isPartner_;
        emit TogglePartner(_partner, !isPartner_);
    }

    function setCLKeyHash(bytes32 _newKeyHash) external onlySuperAdmin {
        keyHash = _newKeyHash;
    }

    function setCLFee(uint256 _newFee) external onlySuperAdmin {
        fee = _newFee;
    }

    function hasReceivedRndNumVrf() external view returns (bool) {
        return (_rndNumVrf == 0 ? false : true);
    }

    function tokensOfOwner(address _owner) external view returns(uint256[] memory ) {
        uint256 tokenCount = balanceOf(_owner);
        if (tokenCount == 0) {
            return new uint256[](0);
        } else {
            uint256[] memory result = new uint256[](tokenCount);
            uint256 index;
            for (index = 0; index < tokenCount; index++) {
                result[index] = tokenOfOwnerByIndex(_owner,index);
            }
            return result;
        }
    }

    function getCLFee() external view onlySuperAdmin returns (uint256) {
        return fee;
    }
    
    function getCLKeyHash() external view onlySuperAdmin returns (bytes32) {
        return keyHash;
    }

    function getTierCount() external view returns (uint256) {
        return weaponTiers.length;
    }

    function getTokenInfo(uint256 _tokenId)
        external
        view
        returns(uint256,uint256,uint256,uint256,uint256)
    {
        TokenData memory td_ = _getTokenData(_tokenId);
        return(td_.weaponTierLvl, td_.weaponType, td_.weaponSubtype, td_.weaponCategory, td_.serialNo);
    }

    function createWeapons(
        uint256 _tierLvl,
        uint256 _type,
        uint256 _subtype,
        address[] memory _recipients
    )
        public
        onlyMinter
    {
        require(_rndNumVrf > 0 || !vrf,"CRE-01");
        uint256 recipientsLength_ = _recipients.length;
        require(recipientsLength_ <= maxMintBatch,"CRE-02");
        require(_tierLvl > 0 && _tierLvl <= weaponTiers.length,"CRE-03");    
        require(_type > 0 && _type <= weaponTiers[_tierLvl-1].typeCnt,"CRE-04");
        require(_subtype > 0 && _subtype <= weaponTiers[_tierLvl-1].subtypeCnt,"CRE-05");
        uint256 tts_ = _tierLvl*10000+_type*100+_subtype;
        require(wpnTTSMintIndex[tts_]+recipientsLength_ <= weaponTiers[_tierLvl-1].ttsMintCap,"CRE-06");
        for (uint256 i = 0; i < recipientsLength_; i++)
            require(_recipients[i] != address(0),"CRE-07");
        uint256 tokenId_ = maxTokenId;
        uint256 serialNo_ = wpnTTSMintIndex[tts_];
        address recipient_;
        uint256 randomNumber_;
        uint256 attribs_;
        uint256 category_;
        // mint weapon tokens to recipients' addresses
        for (uint256 i=0; i < recipientsLength_; i++) {
            tokenId_++;
            serialNo_++;
            recipient_=_recipients[i];
            // Generate random attribs and weapon category
            randomNumber_ = uint256(keccak256(abi.encodePacked(_rndNumVrf, tokenId_)));
            attribs_ =  ((randomNumber_) % (MAX_ATTRIB_LVL+1));
            attribs_ |= ((randomNumber_ >> 16) % (MAX_ATTRIB_LVL+1)) << 8;
            attribs_ |= ((randomNumber_ >> 32) % (MAX_ATTRIB_LVL+1)) << 16;
            category_ = ((randomNumber_ >> 48) % (weaponTiers[_tierLvl-1].categoryCnt)+1);
            //
            _setTokenData(
                tokenId_,
                _tierLvl,
                _type,
                _subtype,
                category_,
                serialNo_,
                attribs_);
            if (safeMinting) {
                _safeMint(_recipients[i],tokenId_);
            } else {
                _mint(_recipients[i],tokenId_);
            }
            if (emitCreation) {
                emit CreateWeapon(
                    tokenId_,
                    _tierLvl,
                    _type,
                    _subtype,
                    category_,
                    serialNo_,
                    uint256(uint8(attribs_)),
                    uint256(uint8(attribs_>>8)),
                    uint256(uint8(attribs_>>16)),
                    recipient_);
            }
        }
        //
        maxTokenId = tokenId_;
        wpnTierMintIndex[_tierLvl] += recipientsLength_;
        wpnTTSMintIndex[tts_] += recipientsLength_;
        if (vrf && autoRandomRequest > 0) requestRndNumVrf(autoRandomRequest);
    }

    function burnWeapon(uint256 _tokenId, address _weaponOwner)
        public
        onlyBurner
    {
        require(_weaponOwner == ownerOf(_tokenId),"BRN-01");
        require(
            _weaponOwner == msg.sender ||
            getApproved(_tokenId) == msg.sender ||
            isApprovedForAll(_weaponOwner, msg.sender),"BRN-02");
        TokenData memory tokenData_ = _getTokenData(_tokenId);
        uint256 sumAttribs_;
        _burn(_tokenId);
        sumAttribs_ = tokenData_.security + tokenData_.anonymity + tokenData_.innovation;
        // remove unused storage
        delete tokenData[_tokenId];
        delete extraTokenData[_tokenId];
        delete tokenGameExp[_tokenId];
        emit BurnWeapon(
            _tokenId,
            tokenData_.weaponTierLvl,
            (tokenData_.security + tokenData_.anonymity + tokenData_.innovation),
            _weaponOwner);
    }

    function setPartnerTokenAttribByIndex(uint256 _tokenId, uint256 _index, uint256 _value) public {
        require(isPartner[msg.sender], "PAR-00");
        require(_tokenId <= maxTokenId,"PAR-01");
        require(_index > 0 && _index <= 8, "PAR-02");
        _setPartnerTokenAttribByIndex(msg.sender, _tokenId, _index, _value);
    }

    function setPartnerTokenAttribByIndex_Batch(uint256[] calldata _tokenId, uint256 _index, uint256[] calldata _value) public {
        require(isPartner[msg.sender], "PAR-00");
        require(_index > 0 && _index <= 8, "PAR-02");
        uint256 tokenIdLength_ = _tokenId.length;
        require(tokenIdLength_ == _value.length, "PAR-03");
        uint256 idTokenMax_ = maxTokenId;
        for (uint256 i = 0; i < tokenIdLength_; i++) {
            require(_tokenId[i] <= idTokenMax_,"PAR-01");
            _setPartnerTokenAttribByIndex(msg.sender, _tokenId[i], _index, _value[i]);
        }
    }

    function setPartnerTokenAttribs(uint256 _tokenId, uint256[8] memory _values) public {
        require(isPartner[msg.sender], "PAR-00");
        require(_tokenId <= maxTokenId,"PAR-01");
        _setPartnerTokenAttribs(msg.sender, _tokenId, _values);
    }

    function setPartnerTokenAttribs_Batch(uint256[] calldata _tokenId, uint256[8][] memory _values) public {
        require(isPartner[msg.sender], "PAR-00");
        uint256 tokenIdLength_ = _tokenId.length;
        require(tokenIdLength_ == _values.length, "PAR-03");
        uint256 idTokenMax_ = maxTokenId;
        for (uint256 i = 0; i < tokenIdLength_; i++) {
            require(_tokenId[i] <= idTokenMax_,"PAR-01");
            _setPartnerTokenAttribs(msg.sender, _tokenId[i], _values[i]);
        }
    }

    function requestRndNumVrf(uint256 _requestType) public onlyMinter returns (bytes32 requestId) {
        require (_requestType == 1 || _requestType == 2, "RND-01");
        require(LINK.balanceOf(address(this)) >= fee, "RND-02");
        if (_requestType == 2) {
            _rndNumVrf = 0;
        }
        return requestRandomness(keyHash, fee);
    }

    function getAttribs(uint256 _tokenId)
        public
        view
        returns(uint256,uint256,uint256)
    { 
        TokenData memory td_ = _getTokenData(_tokenId);
        return (
            td_.security,td_.anonymity,td_.innovation);
    }

    function getPartnerTokenAttribByIndex(address _partner, uint256 _tokenId, uint256 _index)
        public
        view
        returns(uint256)
    {
        require(_index > 0 && _index <= 8, "PAR-02");
        return(uint32(partnerTokenData[_partner][_tokenId] >> 32*(_index-1)));
    }

    function getPartnerTokenAttribs(address _partner, uint256 _tokenId)
        public
        view
        returns(uint256[8] memory _attribs)
    {
        uint256 data_ = partnerTokenData[_partner][_tokenId];
        for (uint256 i = 0; i < 8; i++) {
            _attribs[i] = uint256(uint32(data_ >> 32*i));
        }
    }

    function getExtraTokenAttribByIndex(uint256 _tokenId, uint256 _index)
        public
        view
        returns(uint256)
    {
        require(_index > 0 && _index <= 8, "EXT-02");
        return(uint32(extraTokenData[_tokenId] >> 32*(_index-1)));
    }

    function getExtraTokenAttribs(uint256 _tokenId)
        public
        view
        returns(uint256[8] memory _attribs)
    {
        uint256 data_ = extraTokenData[_tokenId];
        for (uint256 i = 0; i < 8; i++) {
            _attribs[i] = uint256(uint32(data_ >> 32*i));
        }
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721,ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
        _rndNumVrf = randomness;
    }

    function _beforeTokenTransfer(address from,address to,uint256 tokenId)
        internal
        override(ERC721,ERC721Enumerable)
    {
        super._beforeTokenTransfer(from,to,tokenId);
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseURI_;
    }

    function _getTokenData(uint256 _tokenId)
        private
        view
    returns(TokenData memory _tokenData) {
        uint256 tokenData_ = tokenData[_tokenId];
        _tokenData.weaponTierLvl = uint256(uint8(tokenData_));
        _tokenData.weaponType = uint256(uint8(tokenData_>>8));
        _tokenData.weaponSubtype = uint256(uint8(tokenData_>>16));
        _tokenData.weaponCategory = uint256(uint8(tokenData_>>24));
        _tokenData.serialNo = uint256(uint32(tokenData_>>32));
        _tokenData.security = uint256(uint8(tokenData_>>64));
        _tokenData.anonymity = uint256(uint8(tokenData_>>72));
        _tokenData.innovation = uint256(uint8(tokenData_>>80));
    }

    function _setPartnerTokenAttribByIndex(
        address _partner,
        uint256 _tokenId,
        uint256 _index,
        uint256 _value
    )
        private    
    {
        uint256[8] memory attribs_ = getPartnerTokenAttribs(_partner, _tokenId);
        attribs_[_index-1] = _value;
        uint256 data_;
        for (uint256 i = 0; i < 8; i++) {
            data_ |= attribs_[i] << 32*i;
        }
        partnerTokenData[_partner][_tokenId] = data_;
        if (emitPartnerAttribs)
            emit SetPartnerTokenAttribByIndex(_partner, _tokenId, _index, _value);
    }

    function _setPartnerTokenAttribs(
        address _partner,
        uint256 _tokenId,
        uint256[8] memory _values
    )
        private    
    {
        uint256 data_;
        for (uint256 i = 0; i < 8; i++) {
            data_ |= _values[i] << 32*i;
        }
        partnerTokenData[_partner][_tokenId] = data_;
        if (emitPartnerAttribs)        
            emit SetPartnerTokenAttribs(_partner, _tokenId, _values);
    }

    function _setExtraTokenAttribByIndex(
        uint256 _tokenId,
        uint256 _index,
        uint256 _value
    )
        private    
    {
        uint256[8] memory attribs_ = getExtraTokenAttribs(_tokenId);
        attribs_[_index-1] = _value;
        uint256 data_;
        for (uint256 i = 0; i < 8; i++) {
            data_ |= attribs_[i] << 32*i;
        }
        extraTokenData[_tokenId] = data_;
        if (emitExtraAttribs)
            emit SetExtraTokenAttribByIndex(_tokenId, _index, _value);
    }

    function _setExtraTokenAttribs(
        uint256 _tokenId,
        uint256[8] memory _values
    )
        private    
    {
        uint256 data_;
        for (uint256 i = 0; i < 8; i++) {
            data_ |= _values[i] << 32*i;
        }
        extraTokenData[_tokenId] = data_;
        if (emitPartnerAttribs)
            emit SetExtraTokenAttribs(_tokenId, _values);
    }

   function _deletePartnerTokenData(address _partner, uint256 _fromTokenId, uint256 _toTokenId) private {
        uint256 count_;
        for (uint256 tokenId_ = _fromTokenId; tokenId_ <= _toTokenId; tokenId_++){
            if (partnerTokenData[_partner][tokenId_] > 0) {
                delete partnerTokenData[_partner][tokenId_];
                count_++;
            }
        }
        emit DeletePartnerTokenData(_partner, _fromTokenId, _toTokenId, count_);
    }

    function _setTokenData(
        uint256 _tokenId,
        uint256 _tierLvl,
        uint256 _type,
        uint256 _subtype,
        uint256 _category,
        uint256 _serialNo,
        uint256 _attribs
    )
        private
    {
        uint256 tokenData_ = _tierLvl;
        tokenData_ |= _type << 8;
        tokenData_ |= _subtype << 16;
        tokenData_ |= _category << 24;
        tokenData_ |= _serialNo << 32;
        tokenData_ |= _attribs << 64;
        tokenData[_tokenId] = tokenData_;
    }

    function _setAttributes
    (
        uint256 _tokenId,
        uint256 _sec,
        uint256 _ano,
        uint256 _inn
    )
        private        
    {
        require(_exists(_tokenId), "ATR-01");
        require(_sec <= MAX_ATTRIB_LVL && _ano <= MAX_ATTRIB_LVL && _inn <= MAX_ATTRIB_LVL, "ATR-02");
        uint256 attribs_ = _sec;
        attribs_ |= _ano << 8;
        attribs_ |= _inn << 16;
        uint256 tokenData_ = uint256(uint64(tokenData[_tokenId]));
        tokenData_ |= attribs_ << 64;
        tokenData[_tokenId] = tokenData_;
        if (emitAttribs)
            emit SetAttribs(_tokenId, _sec, _ano, _inn);
    }

}