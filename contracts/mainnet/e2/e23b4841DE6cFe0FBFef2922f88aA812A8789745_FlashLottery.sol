/**
 *Submitted for verification at polygonscan.com on 2022-04-07
*/

// File: @chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol


pragma solidity ^0.8.0;

interface KeeperCompatibleInterface {
  /**
   * @notice method that is simulated by the keepers to see if any work actually
   * needs to be performed. This method does does not actually need to be
   * executable, and since it is only ever simulated it can consume lots of gas.
   * @dev To ensure that it is never called, you may want to add the
   * cannotExecute modifier from KeeperBase to your implementation of this
   * method.
   * @param checkData specified in the upkeep registration so it is always the
   * same for a registered upkeep. This can easily be broken down into specific
   * arguments using `abi.decode`, so multiple upkeeps can be registered on the
   * same contract and easily differentiated by the contract.
   * @return upkeepNeeded boolean to indicate whether the keeper should call
   * performUpkeep or not.
   * @return performData bytes that the keeper should call performUpkeep with, if
   * upkeep is needed. If you would like to encode data to decode later, try
   * `abi.encode`.
   */
  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);

  /**
   * @notice method that is actually executed by the keepers, via the registry.
   * The data returned by the checkUpkeep simulation will be passed into
   * this method to actually be executed.
   * @dev The input to this method should not be trusted, and the caller of the
   * method should not even be restricted to any single registry. Anyone should
   * be able call it, and the input should be validated, there is no guarantee
   * that the data passed in is the performData returned from checkUpkeep. This
   * could happen due to malicious keepers, racing keepers, or simply a state
   * change while the performUpkeep transaction is waiting for confirmation.
   * Always validate the data passed in.
   * @param performData is the data which was passed back from the checkData
   * simulation. If it is encoded, it can easily be decoded into other types by
   * calling `abi.decode`. This data should not be trusted, and should be
   * validated against the contract's current state.
   */
  function performUpkeep(bytes calldata performData) external;
}

// File: @chainlink/contracts/src/v0.8/KeeperBase.sol


pragma solidity ^0.8.0;

contract KeeperBase {
  error OnlySimulatedBackend();

  /**
   * @notice method that allows it to be simulated via eth_call by checking that
   * the sender is the zero address.
   */
  function preventExecution() internal view {
    if (tx.origin != address(0)) {
      revert OnlySimulatedBackend();
    }
  }

  /**
   * @notice modifier that allows it to be simulated via eth_call by checking
   * that the sender is the zero address.
   */
  modifier cannotExecute() {
    preventExecution();
    _;
  }
}

// File: @chainlink/contracts/src/v0.8/KeeperCompatible.sol


pragma solidity ^0.8.0;



abstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}

// File: @chainlink/contracts/src/v0.8/VRFRequestIDBase.sol


pragma solidity ^0.8.0;

contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol


pragma solidity ^0.8.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}

// File: @chainlink/contracts/src/v0.8/VRFConsumerBase.sol


pragma solidity ^0.8.0;



/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: HorusProtocol.sol

pragma solidity 0.8.11;

/*
  _    _                        _____           _                  _ 
 | |  | |                      |  __ \         | |                | |
 | |__| | ___  _ __ _   _ ___  | |__) | __ ___ | |_ ___   ___ ___ | |
 |  __  |/ _ \| '__| | | / __| |  ___/ '__/ _ \| __/ _ \ / __/ _ \| |
 | |  | | (_) | |  | |_| \__ \ | |   | | | (_) | || (_) | (_| (_) | |
 |_|  |_|\___/|_|   \__,_|___/ |_|   |_|  \___/ \__\___/ \___\___/|_|
                                                                     
*/


// Staking contract
contract HorusStaking {

    address[] public stakers;
    uint InitialLiquidity;
    uint public deposit;
    uint public MaxValue = 500*10**18;

    struct user {
        uint userDeposit;
        uint poolShare;
        bool staker;
        uint viewReward;
        uint ClaimDisplay;
    }

    address Burn = 0x0000000000000000000000000000000000000000;
    address payable LiquidityProvider;
    address payable PoolAddress;
    address owner;
    mapping( address => bool ) public approvedStakers;

    function GetBalance() public view returns(uint) {
        return address(this).balance;
    }

    constructor(address _owner) {
        owner = _owner;
    }

    mapping(uint => uint) contractBalance;
    mapping(address => user) User;

    uint public TotalLiquidity;

    /* setting genesis liquidity provider */
    function modifyLiquidityProvider(address payable _addr) public {
        require(msg.sender == owner);
        LiquidityProvider = _addr;
    }

    /* providing the initial liquidity */
    function ProvideInitialLiquidity() public payable {
        require(msg.sender == LiquidityProvider);
        InitialLiquidity += msg.value;
        payable(PoolAddress).call{value: msg.value}("");
        TotalLiquidity = InitialLiquidity + deposit;
    }

    /* withdrawing only genesis liquidity */
    function WithdrawInitialLiquidity(uint _amount) public payable {
        require(msg.sender == LiquidityProvider && InitialLiquidity - msg.value >= 0);
        HorusProtocol LP = HorusProtocol(PoolAddress);
        LP.WithdrawStake(_amount);
        InitialLiquidity -= _amount;
        payable(LiquidityProvider).call{value: _amount}("");
        TotalLiquidity = InitialLiquidity + deposit;
    }

    /* approving stakers into whitelist */
    function _approveStaker(address newStaker_) internal returns (bool) {
        require(msg.sender == owner);
        return approvedStakers[newStaker_] = true;
    }

    function approveStaker(address newStaker_) external returns (bool) {
        require(msg.sender == owner);
        return _approveStaker(newStaker_);
    }

    function approveStakers(address[] calldata newStakers_) external returns (uint256) {
        require(msg.sender == owner);
        for(uint256 iteration_ = 0; newStakers_.length > iteration_; iteration_++ ) {
            _approveStaker(newStakers_[iteration_]);
        }
        return newStakers_.length;
    }

    /* deapproving stakers into whitelist */
    function _deapproveStaker(address newStaker_) internal returns (bool) {
        require(msg.sender == owner);
        return approvedStakers[newStaker_] = false;
    }

    function deapproveStaker(address newStaker_) external returns (bool) {
        require(msg.sender == owner);
        return _deapproveStaker(newStaker_);
    }
    
    /* staking if whitelisted */
    function HorusStake() public payable {
        require(msg.value <= MaxValue && User[msg.sender].userDeposit + msg.value <= MaxValue && PoolAddress != Burn && approvedStakers[msg.sender] == true);
        if(checkInList(msg.sender)==0) {
            stakers.push(msg.sender);
        }
        payable(PoolAddress).call{value: msg.value}("");
        User[msg.sender].userDeposit += msg.value;
        deposit += msg.value;
        TotalLiquidity = InitialLiquidity + deposit;
        for(uint i=0; i<stakers.length;i++) {
            User[stakers[i]].poolShare = User[stakers[i]].userDeposit*10**9/deposit;
        }
        User[msg.sender].staker = true;
    }

    /* generic function to test if an element is in a list */
    function checkInList(address userAddress) public view returns (uint) {
        for(uint i=0; i<stakers.length; i++) {
            if(stakers[i]==userAddress) {
                return 1;
            }
        }
        return 0;
    }

    /* user withdrawing funds from staking */
    function HorusWithdraw(uint _amount) external payable {
        require(User[msg.sender].staker == true && User[msg.sender].userDeposit >= _amount);
        HorusProtocol LP = HorusProtocol(PoolAddress);
        LP.WithdrawStake(_amount);
        payable(msg.sender).call{value: _amount}("");
        User[msg.sender].userDeposit -= _amount;
        deposit -= _amount;
        TotalLiquidity = InitialLiquidity + deposit;
        for(uint i=0; i<stakers.length;i++) {
            if(User[msg.sender].userDeposit == 0) {
                User[msg.sender].staker = false;
                User[stakers[i]].poolShare = 0;
            }
            if(User[msg.sender].userDeposit != 0) {
                User[stakers[i]].poolShare = User[stakers[i]].userDeposit*10**9/deposit;
            }
        }
    }

    /* user claiming rewards */
    function HorusClaimRewards() public payable {
        require(User[msg.sender].ClaimDisplay > 0);
        payable(msg.sender).call{value: User[msg.sender].ClaimDisplay}("");
        for(uint i=0; i<stakers.length;i++) {
            if(User[msg.sender].staker == true) {
                User[stakers[i]].poolShare = User[stakers[i]].userDeposit*10**9/deposit;
            }
        }
        User[msg.sender].ClaimDisplay = 0;
    }

    /* setting the LP/Betting Pool*/
    function modifyPool(address payable _addr) public {
        require(msg.sender == owner);
        PoolAddress = _addr;
    }

    /* gathering funds from bets and updating every PoolShare and claim amount */
    function GiveBet(uint _amount) public {
        for(uint i=0; i<stakers.length;i++) {
            User[stakers[i]].poolShare = User[stakers[i]].userDeposit*10**12/deposit;
            User[stakers[i]].ClaimDisplay = User[stakers[i]].ClaimDisplay + (_amount * User[stakers[i]].poolShare/10**12);
        }
    }

    /* various displays and user info */
    function displayStakerRewards() public view returns(uint) {
        return User[msg.sender].ClaimDisplay;
    }

    function getPoolShare() public view returns(uint) {
        return User[msg.sender].poolShare;
    }

    function getDeposit() public view returns(uint) {
        return User[msg.sender].userDeposit;
    }

    function getTotalStaked() public view returns(uint) {
        return deposit;
    }

    receive() external payable {}
}


// Betting contract V1
contract HorusProtocol is VRFConsumerBase {

    // VRF variables
    bytes32 internal keyHash;
    uint256 internal fee;

    // HorusProtocol variables
    uint public wincheck;
    address public owner;
    bool win;
    uint bet;
    address public address_fees;
    address public addr_staking;
    uint totalBets;
    uint ethersWon;

    /* Bets values and fees :
    Bets : 5/30/50 $MATIC
    Fees : 2.5%
    Staking rewards : 0.5% */

    uint PercentageFiveMatics = 25 * 10 ** (-3) * 5 * 10 ** 18;
    uint PercentageFifteenMatics = 25 * 10 ** (-3) * 30 * 10 ** 18;
    uint PercentageThirtyMatics = 25 * 10 ** (-3) * 50 * 10 ** 18;

    uint PercentageFiveMaticsStake = 5 * 10 ** (-3) * 5 * 10 ** 18;
    uint PercentageFifteenMaticsStake = 5 * 10 ** (-3) * 30 * 10 ** 18;
    uint PercentageThirtyMaticsStake = 5 * 10 ** (-3) * 50 * 10 ** 18;

    uint fiveMatics = 5 * 10 ** 18;
    uint fifteenMatics = 30 * 10 ** 18;
    uint thirtyMatics = 50 * 10 ** 18;

    struct personnalstats {
      uint bets;
      uint maticplayed;
      uint maticwon;
    }

    mapping(address => personnalstats) personnalStats;

    mapping(address => bytes32) public addressToId;
    mapping(bytes32 => uint256) public IdToRandom;
    mapping(bytes32 => address) public IdToAddress;
    mapping(address => uint) public AddressToBet;

/// VRF
    constructor(address _address_fees, address _owner, address payable _addr_staking)
        VRFConsumerBase(
            0x3d2341ADb2D31f1c5530cDC622016af293177AE0, // VRF Coordinator (Polygon Testnet)
            0xb0897686c545045aFc77CF20eC7A532E3120E0F1  // LINK Token (Polygon Testnet)
        ) 
    {
        keyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;
        fee = 0.0001 * 10 ** 18; // 0.0001 LINK
        address_fees = _address_fees;
        addr_staking = _addr_staking;
        owner = _owner;
    }

    function getRandomNumber() public returns (bytes32 requestId) {
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK - fill contract with faucet");
        requestId =  requestRandomness(keyHash, fee);
        addressToId[msg.sender] = requestId;
        IdToAddress[requestId] = msg.sender;
    }

    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
        IdToRandom[requestId] = randomness;
        getResult();
    }

    function getResult() public view returns (uint randomnumber) {
        randomnumber = IdToRandom[addressToId[msg.sender]];
    }

    /* Betting */
    function HorusBets() public payable {
        require(msg.value == PercentageFiveMatics + PercentageFiveMaticsStake + fiveMatics || msg.value == PercentageFifteenMatics + PercentageFifteenMaticsStake + fifteenMatics || msg.value == PercentageThirtyMatics + PercentageThirtyMaticsStake + thirtyMatics);
        win = false;
        HorusStaking HS = HorusStaking(payable (addr_staking));

        personnalStats[msg.sender].bets += 1;
        personnalStats[msg.sender].maticplayed += msg.value;
        IdToRandom[addressToId[msg.sender]] = 0;
        if(msg.value == PercentageFiveMatics + PercentageFiveMaticsStake + fiveMatics) {
            payable(address_fees).call{value: PercentageFiveMatics}("");
            payable(addr_staking).call{value: PercentageFiveMaticsStake}("");
            AddressToBet[msg.sender] = fiveMatics;
            HS.GiveBet(PercentageFiveMaticsStake);

        }
        else if(msg.value == PercentageFifteenMatics + fifteenMatics + PercentageFifteenMaticsStake) {
            payable(address_fees).call{value: PercentageFifteenMatics}("");
            payable(addr_staking).call{value: PercentageFifteenMaticsStake}("");
            AddressToBet[msg.sender] = fifteenMatics;
            HS.GiveBet(PercentageFifteenMaticsStake);
        }
        else if(msg.value == PercentageThirtyMatics + thirtyMatics + PercentageThirtyMaticsStake) {
            payable(address_fees).call{value: PercentageThirtyMatics}("");
            payable(addr_staking).call{value: PercentageThirtyMaticsStake}("");
            AddressToBet[msg.sender] = thirtyMatics;
            HS.GiveBet(PercentageThirtyMaticsStake);
        }
        totalBets += 1;
        getRandomNumber();
    }

    /* checking if the bet is winning or not (using modulo 2 on a large integer to get p=0.5*/
    function HorusWinCheck(uint random) public pure returns(uint winCheck) {
        if(random == 0) {
            return winCheck = 0;
        }
        else {
            if(random%2 == 0) {
            return winCheck = 2;
        }
        if(random%2 != 0) {
            return winCheck = 1;
        }
        }
    }

    /* claiming the winning bet */ 
    function HorusWinWithdraw(bytes32 idToWithdraw) public {
        require(idToWithdraw != 0 && AddressToBet[msg.sender] > 0 && msg.sender == address(IdToAddress[idToWithdraw]) && IdToRandom[idToWithdraw]%2 == 0);
        personnalStats[msg.sender].maticwon += AddressToBet[msg.sender] * 2;
        payable(msg.sender).call{value: AddressToBet[msg.sender]*2}("");
        ethersWon += AddressToBet[msg.sender];
        AddressToBet[msg.sender] = 0;
        IdToRandom[idToWithdraw] = 0;
    }


    /* various display functions */
    function getTotalBets() public view returns(uint) {
      return totalBets;
    }

    function getEthersWon() public view returns(uint) {
      return ethersWon;
    }

    function viewPersonnalBets() public view returns(uint) {
      return personnalStats[msg.sender].bets;
    }

    function viewPersonnalMaticPlayed() public view returns(uint) {
      return personnalStats[msg.sender].maticplayed;
    }

    function viewPersonnalMaticWon() public view returns(uint) {
      return personnalStats[msg.sender].maticwon;
    }


/// LP Stakers

    /* transfers the desired amount to the staking contract for withdrawal, called by the staking as the bet contract holds the liquidity */
    function WithdrawStake(uint _amount) external payable {
        require(msg.sender == addr_staking);
        payable(addr_staking).call{value: _amount}("");
    }

    function GetBalance() public view returns (uint) {
        return address(this).balance;
    }

    receive() payable external {}
}

pragma solidity 0.8.11;



/// Lottery

contract FlashLottery is VRFConsumerBase, KeeperCompatibleInterface {

    bytes32 internal keyHash;
    uint256 internal fee;   
    uint256 public randomResult;
    address public owner;
    uint256 public result;
    address public winner;
    uint public fees;
    uint public prize;
    uint online;
    address payable addr_staking;
    address payable address_fees;

    struct personnallottery {
      uint lottery;
      uint maticplayed;
      uint maticwon;
    }

    uint public immutable intervalLottery;
    uint public immutable intervalClaim;

    uint public lastTimeStamp;
    uint public state;
    uint public time;
    uint public test;

    uint public timeStart;
    uint public timeTeller;

    mapping(address => personnallottery) personnalLottery;
///VRF

    constructor(address _owner, address payable _addr_staking, address payable _address_fees, uint updateIntervalLottery, uint updateIntervalClaim)
    VRFConsumerBase(
            0x3d2341ADb2D31f1c5530cDC622016af293177AE0, // VRF Coordinator
            0xb0897686c545045aFc77CF20eC7A532E3120E0F1  // LINK Token
        )  
    {
        owner = _owner;
        keyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;
        fee = 0.0001 * 10 ** 18; // 0.0001 LINK (Varies by network)

        addr_staking = _addr_staking;
        address_fees = _address_fees;

        intervalLottery = updateIntervalLottery;
        intervalClaim = updateIntervalClaim;
        lastTimeStamp = block.timestamp;
    }

    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > intervalLottery || ((block.timestamp - lastTimeStamp) > intervalClaim && state == 1);
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if (((block.timestamp - lastTimeStamp) > intervalLottery) && (state == 0)) {
            lastTimeStamp = block.timestamp;
            getRandomNumber();
            online = 1;
            state = 1;
            timeStart = block.timestamp;
        }
        else if (((block.timestamp - lastTimeStamp) > intervalClaim) && (state == 1)) {
            lastTimeStamp = block.timestamp;
            participants = null_list;
            result = 0;
            delete participants;
            winner = 0x0000000000000000000000000000000000000000;
            prize = 0;
            online = 0;
            state = 0;
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    /* Ticket price and tax fees */
    uint public TicketPrice = 5 * 10**18;
    uint public PercentageTicketPrice = 5 * 10**18 * 25 / (10**(3));
    uint public PercentageStakeTicketPrice = 5 * 10**18 * 5 / (10 ** (3));
    uint public idlottery_;

    function getRandomNumber() public returns (bytes32 requestId) {
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK - fill contract with faucet");
        return requestRandomness(keyHash, fee);
    }
    function fulfillRandomness(bytes32 , uint256 randomness) internal override {
        randomResult = randomness;
        result = randomResult%participants.length;
        winner = participants[result];
    }

    struct participated {
        uint participatedLottery;
    }

    struct players {
        uint idlottery;
    }

    mapping(address => participated) Participated;
    mapping(address => players) Player;

    address[] participants;
    address[] null_list;

    /* Ticket buying*/
    function buyATicket() public payable {
        require(msg.value == TicketPrice && online == 0);
            HorusStaking HS = HorusStaking(addr_staking);
            personnalLottery[msg.sender].lottery += 1;
            personnalLottery[msg.sender].maticplayed += msg.value;
            participants.push(msg.sender);
            payable(addr_staking).call{value: PercentageStakeTicketPrice}("");
            payable(address_fees).call{value: PercentageTicketPrice}("");
            Participated[msg.sender].participatedLottery = 1;
            prize = address(this).balance;
            HS.GiveBet(PercentageStakeTicketPrice);
    }



    /* stops the lottery and prevents new users to buy a ticket */
    function stopLotterie() public {
        require(msg.sender == owner);
        getRandomNumber();
        online = 1;
        state = 1;
    }
    
    /* starts a new lottery */
    function startLotterie() public {
        require(msg.sender == owner);
        participants = null_list;
        result = 0;
        randomResult = 0;
        delete participants;
        winner = 0x0000000000000000000000000000000000000000;
        prize = 0;
        online = 0;
        state = 0;
        timeStart = block.timestamp;
    }

    /* claiming the prize for the winner */
    function claim() public payable {
        require(msg.sender == winner);
        personnalLottery[msg.sender].maticwon += prize;
        payable(winner).call{value: prize}("");
        winner = 0x0000000000000000000000000000000000000000;
    }

    function viewMemberLotteryId() public view returns(uint) {
        return Player[msg.sender].idlottery;
    }

    /* various display functions */
    function viewParticipants() public view returns(address [] memory) { 
    }

    function viewParticipantsPerIndex(uint _index) public view returns(address) {
        return participants[_index];
    }

    function viewParticipantsSize() public view returns(uint) {
        return participants.length;
    }

    function getPrize() public view returns(uint) {
        return prize;
    }

    function getTime() public returns(uint) {
        return timeTeller = block.timestamp - timeStart;
    }

    function checkIfParticipated() public view returns(uint) {
        return Participated[msg.sender].participatedLottery;
    }

    function checkWinner() public view returns (address) {
        return winner;
    }

    function viewPersonnalLottery() public view returns(uint) {
      return personnalLottery[msg.sender].lottery;
    }

    function viewPersonnalMaticPlayed() public view returns(uint) {
      return personnalLottery[msg.sender].maticplayed;
    }

    function viewPersonnalMaticWon() public view returns(uint) {
      return personnalLottery[msg.sender].maticwon;
    }

    receive() external payable {}
}