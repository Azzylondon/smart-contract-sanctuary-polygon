/**
 *Submitted for verification at polygonscan.com on 2022-06-18
*/

//SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}


contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

contract GuessingGame is VRFConsumerBase {
   event CurrentGame(address Player, uint GameId);
   event Winners(address Winner, bytes32 requestId, uint GameId);
   event Ended(address Player, uint GameId);
   address payable[] players;
   address immutable owner;
   address constant _linkToken = 0x326C977E6efc84E512bB9C30f76E30c160eD06FB;
   address constant _vrfCoordinator = 0x8C7382F9D8f56b33781fE506E897a4F1e2d17255;
   bytes32 constant _keyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;
   bytes32 currentRequestId;
   uint currentNumberValue = 0;
   uint public currentGameId = 1;
   uint timeLimit;
   uint128 public nonce;
   uint128 constant _chainlinkFee = 0.0001 * 10 ** 18;
   mapping(address => bool) public alreadyGuessed;
   mapping(address => bool) public alreadyEntered;

   constructor() VRFConsumerBase(_vrfCoordinator, _linkToken) payable {
      owner = msg.sender;
   }
   
   function enterGuessingGame() external payable {
     require(players.length < 2, "WAIT_NEXT_NAME");
     require(msg.value >= 0.1 ether, "INSUFFICIENT_FUNDS");
     require(alreadyEntered[msg.sender] == false, "ALREADY_ENTERED");
     players.push(payable(msg.sender));
     alreadyGuessed[msg.sender] = false;
     if(players.length == 2) {
      generateRandomNumberValue();
      timeLimit = 20 minutes;
     }
     alreadyEntered[msg.sender] = true;
     emit CurrentGame(msg.sender, currentGameId);
   }

   function generateRandomNumberValue() private returns(bytes32 requestId) {
      require(LINK.balanceOf(address(this)) >= _chainlinkFee, "MORE_LINK");
      return requestRandomness(_keyHash, _chainlinkFee);
   }
   
   
   function guessTheNumberValue(bool guess) external payable {
      require(msg.sender == players[0] || msg.sender == players[1], "NOT_A_PLAYERR");
      require(!alreadyGuessed[msg.sender], "ALREADY_GUESSED");
      require(currentNumberValue > 0, "WAIT_FOR_NUMBER");
      if((currentNumberValue > 50) == guess) {
          payable(msg.sender).transfer(address(this).balance);
          alreadyEntered[players[0]] = false;
          alreadyEntered[players[1]] = false;
          delete players;
          emit Winners(msg.sender, currentRequestId, currentGameId);
          currentGameId++;
          nonce = 0;
          currentNumberValue = 0;
      } else {
         alreadyGuessed[msg.sender] = true;
         alreadyEntered[msg.sender] = false;
         nonce++;
      }
      if(nonce == 2) {
          alreadyEntered[players[0]] = false;
          alreadyEntered[players[1]] = false;
          emit Ended(players[0], currentGameId);
          emit Ended(players[1], currentGameId);
          delete players;
          currentNumberValue = 0;
          nonce = 0;
          currentGameId++;
      }
   }

   function timeIsUp() external {
      require(block.timestamp > timeLimit && currentNumberValue > 0, "CANT_END_YET");
          alreadyEntered[players[0]] = false;
          alreadyEntered[players[1]] = false;
          emit Ended(players[0], currentGameId);
          emit Ended(players[1], currentGameId);
          delete players;
          currentNumberValue = 0;
          nonce = 0;
          timeLimit = 0;
   }

   function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual override {
      currentNumberValue = (randomness % 100);
      currentRequestId = requestId;
   }

    function withdraw() external  {
            require(msg.sender == owner, "NOT_OWNER");
            uint256 amount = address(this).balance;
            (bool sent, ) =  payable(msg.sender).call{value: amount}("");
            require(sent, "SEND_FAILED");
   }

   function didYouGuess() external view returns(bool) {
      return alreadyGuessed[msg.sender];
   }

   function numberAboveZero() external view returns(bool) {
      return currentNumberValue > 0;
   }

   receive() external payable{}
   fallback() external payable{}
}