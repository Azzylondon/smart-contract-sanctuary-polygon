/**
 *Submitted for verification at polygonscan.com on 2022-03-19
*/

// File: @chainlink/contracts/src/v0.8/VRFRequestIDBase.sol


pragma solidity ^0.8.0;

contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol


pragma solidity ^0.8.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}

// File: @chainlink/contracts/src/v0.8/VRFConsumerBase.sol


pragma solidity ^0.8.0;



/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: common/meta-transactions/ContentMixin.sol





pragma solidity 0.8.13;



abstract contract ContextMixin {

    function msgSender()

        internal

        view

        returns (address payable sender)

    {

        if (msg.sender == address(this)) {

            bytes memory array = msg.data;

            uint256 index = msg.data.length;

            assembly {

                // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.

                sender := and(

                    mload(add(array, index)),

                    0xffffffffffffffffffffffffffffffffffffffff

                )

            }

        } else {

            sender = payable(msg.sender);

        }

        return sender;

    }

}
// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: @openzeppelin/contracts/utils/Context.sol


// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: ChainlinkVRF_V1_Polygon_Mumbai.sol



pragma solidity 0.8.13;





abstract contract ChainlinkVRF_V1_Polygon_Mumbai is Ownable, VRFConsumerBase {



    // Chainlink VRF [ Polygon Mumbai ]

    uint256 public chainlinkFee = 0.0001 * 10 ** 18;

    bytes32 public keyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;



    constructor()

        VRFConsumerBase(

            0x8C7382F9D8f56b33781fE506E897a4F1e2d17255, // VRF Coordinator

            0x326C977E6efc84E512bB9C30f76E30c160eD06FB  // LINK Token

        )

    {}



    function setChainlinkFee(uint256 _chainlinkFee) external onlyOwner {

        chainlinkFee = _chainlinkFee;

    }



    function getRandomNumber() internal returns (bytes32 requestId) {

        require(LINK.balanceOf(address(this)) >= chainlinkFee, "Not enough LINK");

        return requestRandomness(keyHash, chainlinkFee);

    }



}
// File: ExtremeCardsGame.sol



pragma solidity 0.8.13;




//import "./ExtremeCards.sol";




interface IExtremeCards {



    struct CommonTrait {

        uint8[4] u8;

        uint16[4] u16;

        uint24[4] u24; // 0: Game Count, 1: Top Win Count, 2: Other Win Count, 3: Lose Count

        uint32[2] u32;

    }



    function ownerOf(uint256 tokenId) external view returns (address);

    function getTokenLock(uint _tokenId) external view returns(bool);

    function setTokenLock(uint _tokenId, bool _isLocked) external;

    function getCommonTrait(uint _tokenId) external view returns(CommonTrait memory);

    function setCommonTrait(uint _tokenId, CommonTrait memory _value) external;

}



contract ExtremeCardsGame is Ownable, ChainlinkVRF_V1_Polygon_Mumbai, ReentrancyGuard, ContextMixin {



    // ----------- Structs ----------- //



    struct GameType {

        uint128    entryFee;      // Entry Fee in Wei

        uint128    exitFee;       // Exit Penalty Fee

        uint128    houseFee;      // House Fee Per Game

        uint8      tokenSlot;      // Max 256

        uint8      winnerCount;   // Number of Winner

        bool       isActive;      // Is Game Type Active

        uint128[]  winnerProfit;  // Profit Chart of Winner

    }



    struct GameData {

        uint32    gameType;             // Game Type ID

        uint16    gameStatus;           // Game Status Flag

        uint64    initBlock;            // Initial Block

        uint64    lastActivityBlock;    // Last Activity Block

        uint64    settleBlock;          // Settle Block

        bool      isLocked;             // Is Locked [ Boolean ]

        bool      isSettled;            // Is Settled [ Boolean ]

        bool      isDisbursed;          // Is Disbursed

        bool      isRefunded;           // Is Refunded

        bool      isReverted;           // Is Reverted

        bytes32   vrfRequestId;         // Chainlink VRF Request ID

        uint256   vrfRandomness;        // VRF Randomness

        uint32[]  tokenList;            // Token List

        uint32[]  winnerList;           // Winner List

    }



    // ----------- Maps and Variables ----------- //



    mapping(uint32 => uint) public  tokenInGame;            // Token ID -> Game ID

    mapping(bytes32 => uint) public vrfRequestMap;          // VRF Request ID -> Game ID

    mapping(address => bool) public isControllerAddress;    // Controller -> Status

    bool public isPaused;                                   // Contract: Pause / Resume

    address private houseWallet;

    uint64 public refundAfterBlock = 1800;



    // ----------- Contracts and Array ----------- //



    IExtremeCards public gameCards;   // Game Token Contract

    GameType[] public gameType;   // Game Type Array

    GameData[] public gameData;   // Game Data Array



    // ----------- Constructor -------------- //



    constructor() {

        // Prefill [0] index

        gameType.push(GameType(0, 0, 0, 0, 0, false, new uint128[](0)));

        gameData.push(GameData(0, 0, 0, 0, 0, false, false, false, false, false, 0, 0, new uint32[](0), new uint32[](0)));

    }    



    // ----------- Modifiers ---------------- //



    /**

     * @dev Throws if called by any account other than the Operator.

     */

    modifier onlyController() {

        require(isControllerAddress[_msgSender()] == true, "Ownable: Not an operator");

        _;

    }



    /**

     * @dev Throws if called by any account other than the Operator.

     */

    modifier onlyOwnerOrController() {

        require(isControllerAddress[_msgSender()] == true || owner() == _msgSender(), "Ownable: Not Owner or Operator");

        _;

    }



    modifier onlyValidGames(uint _gameId, bool notLocked) {

        require(!isPaused, "Admin: On Hold");

        require(gameData[_gameId].gameStatus > 0, "Game: Invalid ID");

        if(notLocked) {

            require(gameData[_gameId].isLocked, "Game: Game Not Locked");

        } else {

            require(!gameData[_gameId].isLocked, "Game: Game is Locked");

        }

        require(!gameData[_gameId].isSettled, "Game: Game is Already Settled");

        require(!gameData[_gameId].isDisbursed, "Game: Game is Already Disbursed");

        require(!gameData[_gameId].isRefunded, "Game: Game is Already Refunded");

        require(!gameData[_gameId].isReverted, "Game: Game is Already Reverted");

        _;

    }



    // ----------- Administration ---------------- //



    /**

    * @dev Pause / Resume the Game

    * @param _status pause or resume the contract

    */

    function setPauseStatus(bool _status) public onlyOwner {

        isPaused = _status;

    }



    /**

    * @dev Set Refund After Block

    * @param _blockCount Block after refund can be processed

    */

    function setRefundAfterBlock(uint64 _blockCount) public onlyOwner {

        refundAfterBlock = _blockCount;

    }



    /**

    * @dev Set House Wallet Address

    * @param _address address of the controller contract

    */

    function setHouseWalletAddress(address payable _address) public onlyOwner {

        houseWallet = _address;

    }



    /**

    * @dev Set Controller Contract [Active / Deactive] [ Game Contract ]

    * @param _address address of the controller contract

    * @param _status status whether active or inactive

    */

    function setControllerAddress(address _address, bool _status) public onlyOwner {

        isControllerAddress[_address] = _status;

    }



    /**

    * @dev Set Token Contract Address

    * @param _tokenContract address of the token contract

    */

    function updateTokenContractAddress(address _tokenContract) public onlyOwner {

        gameCards = IExtremeCards(_tokenContract);

    }



    // ----------- Game Functions ---------------- //



    /**

    * @dev Create New Game Type

    * @param _entryFee      Entry fee to join game

    * @param _exitFee       Exit fee to left the game before settlement

    * @param _houseFee      House fee for the game

    * @param _tokenSlot      Number of player / card

    * @param _winnerCount   Number of winner

    * @param _isActive      Is Active

    * @param _winnerProfit  Winner profit amount

    */

    function createGameType (

        uint128 _entryFee, uint128 _exitFee, uint128 _houseFee,

        uint8 _tokenSlot, uint8 _winnerCount, bool _isActive,

        uint128[] memory _winnerProfit

    ) external onlyController {

        require(!isPaused, "Admin: Contract is on Hold");

        gameType.push(

            GameType(

                _entryFee,

                _exitFee,

                _houseFee,

                _tokenSlot,

                _winnerCount,

                _isActive,

                _winnerProfit

            )

        );

    }



    // Get Game Type

    function viewGameTypeData(uint256 _id) external view returns(GameType memory _gameType) {

        _gameType = gameType[_id];

    }



    // Get Total Game Type Count

    function getGameTypeCount() external view returns(uint) {

        return gameType.length;

    }



    // Set Game Type Status [ Owner or Operator]

    function setGameTypeStatus(uint _gameTypeId, bool _status) public {

        gameType[_gameTypeId].isActive = _status;

    }



    // Get Game Data

    function viewGameData(uint _id) external view returns(GameData memory _gameData) {

        _gameData = gameData[_id];

    }



    // Get Total Game Count

    function getGameCount() external view returns(uint) {

        return gameData.length;

    } 



    // Create a New Game [ Only Controller ]

    function createNewGame(uint32 _gameTypeId) external onlyController returns(uint) {

        require(!isPaused, "Admin: Contract is on Hold");

        require(gameType[_gameTypeId].isActive, "NewGame: Game Type not Active");



        gameData.push(

            GameData(

                _gameTypeId,                                    // uint32    gameType;             // Game Type ID

                1,                                              // uint16    gameStatus;           // Game Status Flag

                uint64(block.number),                           // uint64    initBlock;            // Initial Block

                0,                                              // uint64    lastActivityBlock;    // Last Activity Block

                0,                                              // uint64    settleBlock;          // Settle Block

                false,                                          // bool      isLocked;             // Is Locked [ Boolean ]

                false,                                          // bool      isSettled;            // Is Settled [ Boolean ]

                false,                                          // bool      isDisbursed;          // Is Disbursed [ Boolean ]

                false,                                          // bool      isRefunded;           // Is Refunded [ Boolean ]

                false,                                          // bool      isReverted;           // Is Reverted [ Boolean ]

                0,                                              // bytes32   vrfRequestId          // Chainlink VRF Request ID

                0,                                              // uint128   vrfRandomness;        // Randomness

                new uint32[](gameType[_gameTypeId].tokenSlot),  // uint32[]  tokenList;            // Token List

                new uint32[](gameType[_gameTypeId].winnerCount) // uint32[]  winnerList;           // Winner List

            )

        );



        return gameData.length - 1;

    }



    

    function joinGame(uint _gameId, uint32 _tokenId) external payable nonReentrant onlyValidGames(_gameId, false) returns(GameData memory) {

        require(gameCards.ownerOf(_tokenId) == _msgSender(), "Game: Sender is Not Card Owner");

        require(gameCards.getTokenLock(_tokenId) == false, "Game: Card in Another Game");

        require(msg.value == gameType[gameData[_gameId].gameType].entryFee, "Game: Wrong Entry Fee");

        

        uint8 totalTokenSlot = gameType[gameData[_gameId].gameType].tokenSlot;

        uint8 usedSlots = 0;

        bool isPlaced = false;



        for(uint8 i = 0; i < totalTokenSlot; i++) {

            if(gameData[_gameId].tokenList[i] == uint32(0)) {

                if(isPlaced) { continue; }

                gameCards.setTokenLock(_tokenId, true);         // Lock Card

                gameData[_gameId].tokenList[i] = _tokenId;      // Place Card in Game

                tokenInGame[_tokenId] = _gameId;                // Place in Token Map

                gameData[_gameId].lastActivityBlock = uint64(block.number);

                isPlaced = true;

                usedSlots += 1;

            } else {

                usedSlots += 1;

            }

        }



        // Request Randomness If All Slots are Filled

        if(totalTokenSlot == usedSlots) {

            bytes32 requestId = getRandomNumber();

            gameData[_gameId].vrfRequestId = requestId;

            vrfRequestMap[requestId] = _gameId;

            // Lock This Game

            gameData[_gameId].isLocked = true;

        }



        return gameData[_gameId];

    }



    function exitGame(uint _gameId, uint32 _tokenId) external payable nonReentrant onlyValidGames(_gameId, false) returns(GameData memory) {

        require(gameCards.ownerOf(_tokenId) == _msgSender(), "Game: Sender is Not Card Owner");

        require(gameCards.getTokenLock(_tokenId) == true, "Game: Card Not in Game");



        uint128 exitFee = gameType[gameData[_gameId].gameType].exitFee;

        require(msg.value == exitFee, "Game: Wrong Exit Fee");



        // Take Exit Fee

        address payable _houseWallet = payable(houseWallet);

        (bool status, ) = _houseWallet.call{value: exitFee}("");

        require(status, "House Profit Sending Failed");



        // Exit Game

        uint8 totalTokenSlot = gameType[gameData[_gameId].gameType].tokenSlot;

        for(uint8 i = 0; i < totalTokenSlot; i++) {

            if(gameData[_gameId].tokenList[i] == _tokenId) {

                // Card Found

                gameData[_gameId].tokenList[i] = 0;         // Remove Card from Game

                gameCards.setTokenLock(_tokenId, false);    // Remove Token Lock

                tokenInGame[_tokenId] = 0;                  // Remove from Token Map

                gameData[_gameId].lastActivityBlock = uint64(block.number);

                return gameData[_gameId];

            }

        }



        require(false, "Game: Card Not Found in List");

        return gameData[_gameId];

    }



    /**

    * @dev If in any odd circumstances chainlink fails to fulfill randomness or system is unable to settle the bet,

    *      then this method can be called after [ blocks ] to refund all the entries. Gas is paid by the Caller.

    * @param _gameId Game ID

    */

    function requestRefundOrRevert(uint _gameId) external nonReentrant onlyValidGames(_gameId, true){

        uint64 blockDiff = uint64(block.number) - gameData[_gameId].lastActivityBlock;

        require(blockDiff >= refundAfterBlock, "Game: Try after refundAfterBlock");



        if(_msgSender() == owner() || isControllerAddress[_msgSender()] == true) {

            gameData[_gameId].isReverted = true;

        }



        GameType memory _gameType = gameType[gameData[_gameId].gameType];

        gameData[_gameId].isRefunded = true;

        

        uint8 totalTokenSlot = _gameType.tokenSlot;

        for(uint8 i = 0; i < totalTokenSlot; i++) {

            uint32 _tokenId = gameData[_gameId].tokenList[i];

            gameCards.setTokenLock(_tokenId, false);    // Remove Token Lock

            tokenInGame[_tokenId] = 0;                  // Remove from Token Map



            // Refund Fee

            address payable cardOwner = payable(gameCards.ownerOf(_tokenId));

            uint128 entryFee = _gameType.entryFee;

            cardOwner.call{value: entryFee}(""); // Ignore Status Check to Prevent Revert

        }



    }



    /**

    * @dev Bet Settlement Function, Called by Chainlink VRF

    * @param _gameId Game ID

    */

    function settleBet(uint256 _gameId, uint256 _randomness) internal nonReentrant {

        require(gameData[_gameId].gameStatus > 0, "Game: Invalid Game ID");

        require(!gameData[_gameId].isLocked, "Game: Game is Locked");

        require(!gameData[_gameId].isSettled, "Game: Game is Already Settled");



        gameData[_gameId].isSettled = true;

        gameData[_gameId].settleBlock = uint64(block.number);

        

        // Get Game Type

        GameType memory _gameType = gameType[gameData[_gameId].gameType];

        // Get Token List

        uint32[] memory tokenArray = gameData[_gameId].tokenList;



        // Shuffle Card List

        tokenArray = shuffleArray(tokenArray, _randomness);



        // Save Randomness

        gameData[_gameId].vrfRandomness = _randomness;



        // Add Winner List

        for(uint8 i = 0; i < _gameType.winnerCount; i++) {

            // Add to Winner List

            gameData[_gameId].winnerList[i] = tokenArray[i];

        }

    }



    /**

    * @dev Process Winner / Loser, It is separated due to High gas Cost. Which might reverted Chainlink Request

    * @param _gameId Game ID

    */

    function disburseBet(uint256 _gameId) external onlyController nonReentrant {

        require(gameData[_gameId].gameStatus > 0, "Game: Invalid Game ID");

        require(gameData[_gameId].isLocked, "Game: Not Locked Yet!");

        require(gameData[_gameId].isSettled, "Game: Not Settled Yet!");

        require(!gameData[_gameId].isDisbursed, "Game: Already Disbursed!");



        gameData[_gameId].isDisbursed = true;



        // Get Game Type

        GameType memory _gameType = gameType[gameData[_gameId].gameType];

        // Get All Card List

        uint32[] memory _tokenList = gameData[_gameId].tokenList;

        // Get Winner Token List

        uint32[] memory _winnerList = gameData[_gameId].winnerList;



        // Take House Profit

        address payable _houseWallet = payable(houseWallet);

        uint128 houseProfit = _gameType.houseFee;

        (bool status, ) = _houseWallet.call{value: houseProfit}("");

        require(status, "House Profit Sending Failed");



        // Process Winner

        for(uint8 i = 0; i < _winnerList.length; i++) {

            uint32 tokenId = _winnerList[i];

            address payable winnerAddress = payable(gameCards.ownerOf(tokenId));

            uint128 winnerProfit = _gameType.winnerProfit[i];

            winnerAddress.call{value: winnerProfit}(""); // Ignore Status Check to Prevent Revert



            // Get and Set Traits

            IExtremeCards.CommonTrait memory commonTrait = gameCards.getCommonTrait(tokenId);

            commonTrait.u24[0] += 1; // Game Count

            if(i == 0) {

                commonTrait.u24[1] += 1; // Top Win Count

            } else {

                commonTrait.u24[2] += 1; // Other Win Count

            }

            gameCards.setCommonTrait(tokenId, commonTrait);

        }



        // Process Loser

        for(uint8 i = 0; i < _gameType.tokenSlot; i++) {

            uint32 tokenId = _tokenList[i];



            // Process Only Losers

            if(!arrayContains(_tokenList, tokenId)) {

                // Get and Set Traits

                IExtremeCards.CommonTrait memory commonTrait = gameCards.getCommonTrait(tokenId);

                commonTrait.u24[0] += 1; // Game Count

                commonTrait.u24[3] += 1; // Lose Count

                gameCards.setCommonTrait(tokenId, commonTrait);

            }



            // Release Token Lock

            gameCards.setTokenLock(tokenId, false);

        }

    }



    /**

    * @dev Callback from Chainlink VRF

    * @param _requestId Request ID

    * @param _randomness Random Seed returned by Chainlink VRF

    */

    function fulfillRandomness(bytes32 _requestId, uint256 _randomness) internal override {

        uint256 _gameId = vrfRequestMap[_requestId];

        settleBet(_gameId, _randomness);

    }



    /**

    * @dev Shuffle Array of Address

    * @param _array Array of Address to be Shuffled

    * @param _randomSeed Random Seed

    */

    function shuffleArray(

        uint32[] memory _array,

        uint256 _randomSeed

    ) private pure returns(uint32[] memory) {

        for (uint256 i = 0; i < _array.length; i++) {

            uint256 n = i + uint256(keccak256(abi.encodePacked(_randomSeed))) % (_array.length - i);

            uint32 temp = _array[n];

            _array[n] = _array[i];

            _array[i] = temp;

        }

        return _array;

    }



    /**

    * @dev Check if Array Contains Item

    * @param _array Array

    * @param _item Item

    */

    function arrayContains(uint32[] memory _array, uint32 _item) private pure returns(bool) {

        for(uint i = 0; i < _array.length; i++) {

            if(_array[i] == _item) {

                return true;

            }

        }

        return false;

    }





    /**

     * @dev This is used instead of msg.sender as transactions

     * won't be sent by the original token owner,

     * but by the Proxy.

     */

    function _msgSender() internal override view returns (address sender) {

        return ContextMixin.msgSender();

    }

}