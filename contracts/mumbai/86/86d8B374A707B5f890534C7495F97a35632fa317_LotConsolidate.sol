// SPDX-License-Identifier: None
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol";
import "./interfaces/IGovernance.sol";
import "./interfaces/ILandRegistry.sol";
import "./interfaces/IConversion.sol";

error OnlyManager();
error Maintenance();
error ZeroAddress();
error TokenNotOwned();
error LengthMismatch();
error InvalidSignature();

contract LotConsolidate is EIP712 {
    using ECDSA for bytes32;

    bytes32 private constant MANAGER_ROLE = keccak256("MANAGER_ROLE");
    bytes32 private constant AUTHORIZER_ROLE = keccak256("AUTHORIZER_ROLE");
    bytes32 private constant CONSOLIDATE_HASH = keccak256("consolidate(int256,int256,uint256[],bytes)");
    bytes32 private constant DIVIDE_HASH = keccak256("divide(uint256,int256[],int256[],bytes)");

    IGovernance public gov;
    ILandRegistry public land;
    ICoversion public conversion;

    modifier onlyManager() {
        //  Note: Setting management should not allow metatransaction
        if (!gov.hasRole(MANAGER_ROLE, msg.sender)) revert OnlyManager();
        _;
    }

    modifier isLocked() {
        if (gov.locked()) revert Maintenance();
        _;
    }

    event Consolidated(address indexed owner, uint256 indexed tokenId, int256 longitude, int256 latitude);
    event Divided(address indexed owner, uint256 indexed tokenId, uint256[] tokenIds);

    constructor(IGovernance _gov, ILandRegistry _land, ICoversion _conversion) EIP712("LotConsolidation", "v1") {
        gov = _gov;
        land = _land;
        conversion = _conversion;
    }

    /**
        @notice Update a new address of Governance contract
        @dev  Caller must have MANAGER_ROLE
        @param _newGov         Address of new Governance contract
        Note: if `_newGov == 0x00`, this contract is deprecated
    */
    function setGovernance(IGovernance _newGov) external onlyManager {
        gov = _newGov;
    }

    /**
        @notice Update a new address of LandRegistry contract
        @dev  Caller must have MANAGER_ROLE
        @param _newLandRegistry         Address of new LandRegsitry contract
    */
    function setLandRegistry(ILandRegistry _newLandRegistry) external onlyManager {
        if (address(_newLandRegistry) == address(0)) revert ZeroAddress();

        land = _newLandRegistry;
    }

    /**
        @notice Update a new address of Conversion contract
        @dev  Caller must have MANAGER_ROLE
        @param _newConversion         Address of new Conversion contract
    */
    function setConversion(ICoversion _newConversion) external onlyManager {
        if (address(_newConversion) == address(0)) revert ZeroAddress();

        conversion = _newConversion;
    }

    /**
        @notice Consolidate adjacents lands to a bigger one
        @dev  Caller can be ANY
        @param _longitude           Longitude value of a new creating land
        @param _latitude            Latitude value of a new creating land
        @param _tokenIds            A list of `_tokenIds` to be consolidated
        @param _signature           Authorized signature generated by AUTHORIZER_ROLE
    */
    function consolidate(
        int256 _longitude,
        int256 _latitude,
        uint256[] calldata _tokenIds,
        bytes calldata _signature
    ) external isLocked {
        //  This feature not support metatransaction
        //  In addition, the request is valid when two conditions are met:
        //  - Caller is an owner of `_tokenIds`
        //  - A signature, provided by AUTHORIZER_ROLE, who has been checked these lands are adjacent
        //  Thus, there might be a case that `msg.sender` can re-use this signature to request multiple times
        //  This case is acceptable. After consolidation, `_tokenIds` will be burnt
        //  If `msg.sender` sends a duplicate request -> `_tokenIds` likely not existed
        //  If a consolidated land has been divided and transferred to a new owner,
        //  `msg.sender` (old owner) tries to re-use `_signature`, the request is likely revert (TokenNotOwned)
        address _caller = msg.sender;
        _checkOwnership(_caller, _tokenIds);

        //  checking an authorized signature
        address _signer = _hashTypedDataV4(
            keccak256(
                abi.encodePacked(
                    CONSOLIDATE_HASH, _caller, _tokenIds, _longitude, _latitude
                )
            )
        ).recover(_signature);
        if (!gov.hasRole(AUTHORIZER_ROLE, _signer)) revert InvalidSignature();

        //  burn `_tokenIds` before minting a new `_tokenId` to `msg.sender`
        land.removeBatchParcels(_tokenIds);

        //  `_tokenURI` can be updated later
        uint256 _newLandId = conversion.compose(_longitude, _latitude);
        land.assignParcel(_caller, _newLandId, "");

        emit Consolidated(_caller, _newLandId, _longitude, _latitude);
    }

    /**
        @notice Divide a bigger land to multiple adjacent ones
        @dev  Caller can be ANY
        @param _tokenId                 Land's `_tokenId` to be divided
        @param _longitudes              A list of longitude values (using to compose a new `_tokenId`)
        @param _latitudes               A list of latitude values (using to compose a new `_tokenId`)
        @param _signature               Authorized signature generated by AUTHORIZER_ROLE
    */
    function divide(
        uint256 _tokenId,
        int256[] calldata _longitudes,
        int256[] calldata _latitudes,
        bytes calldata _signature
    ) external isLocked {
        uint256 _len = _longitudes.length;
        address _caller = msg.sender;
        if (_latitudes.length != _len) revert LengthMismatch();
        if (land.ownerOf(_tokenId) != _caller) revert TokenNotOwned();

        //  checking an authorized signature
        address _signer = _hashTypedDataV4(
            keccak256(
                abi.encodePacked(
                    DIVIDE_HASH, _caller, _tokenId, _longitudes, _latitudes
                )
            )
        ).recover(_signature);
        if (!gov.hasRole(AUTHORIZER_ROLE, _signer)) revert InvalidSignature();

        //  burn `_tokenId` before minting a batch `_tokenIds` to `msg.sender`
        uint256[] memory _toArray = new uint256[](1);
        _toArray[0] = _tokenId;
        land.removeBatchParcels(_toArray);

        //  `_tokenURIs` can be updated later
        uint256[] memory _tokenIds = new uint256[](_len);
        string[] memory _uris = new string[](_len);
        for (uint256 i; i < _len; i++) {
            _tokenIds[i] = conversion.compose(_longitudes[i], _latitudes[i]);
            _uris[i] = "";
        }
        land.assignParcels(_caller, _tokenIds, _uris);
            
        emit Divided(_caller, _tokenId, _tokenIds);
    }

    function _checkOwnership(address _caller, uint256[] calldata _tokenIds) private view {
        uint256 _len = _tokenIds.length;

        for (uint256 i; i < _len; i++)
            if (land.ownerOf(_tokenIds[i]) != _caller) revert TokenNotOwned();  
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)

pragma solidity ^0.8.0;

import "./ECDSA.sol";

/**
 * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.
 *
 * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,
 * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding
 * they need in their contracts using a combination of `abi.encode` and `keccak256`.
 *
 * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding
 * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA
 * ({_hashTypedDataV4}).
 *
 * The implementation of the domain separator was designed to be as efficient as possible while still properly updating
 * the chain id to protect against replay attacks on an eventual fork of the chain.
 *
 * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method
 * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].
 *
 * _Available since v3.4._
 */
abstract contract EIP712 {
    /* solhint-disable var-name-mixedcase */
    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to
    // invalidate the cached domain separator if the chain id changes.
    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;
    uint256 private immutable _CACHED_CHAIN_ID;
    address private immutable _CACHED_THIS;

    bytes32 private immutable _HASHED_NAME;
    bytes32 private immutable _HASHED_VERSION;
    bytes32 private immutable _TYPE_HASH;

    /* solhint-enable var-name-mixedcase */

    /**
     * @dev Initializes the domain separator and parameter caches.
     *
     * The meaning of `name` and `version` is specified in
     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:
     *
     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.
     * - `version`: the current major version of the signing domain.
     *
     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart
     * contract upgrade].
     */
    constructor(string memory name, string memory version) {
        bytes32 hashedName = keccak256(bytes(name));
        bytes32 hashedVersion = keccak256(bytes(version));
        bytes32 typeHash = keccak256(
            "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
        );
        _HASHED_NAME = hashedName;
        _HASHED_VERSION = hashedVersion;
        _CACHED_CHAIN_ID = block.chainid;
        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);
        _CACHED_THIS = address(this);
        _TYPE_HASH = typeHash;
    }

    /**
     * @dev Returns the domain separator for the current chain.
     */
    function _domainSeparatorV4() internal view returns (bytes32) {
        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {
            return _CACHED_DOMAIN_SEPARATOR;
        } else {
            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);
        }
    }

    function _buildDomainSeparator(
        bytes32 typeHash,
        bytes32 nameHash,
        bytes32 versionHash
    ) private view returns (bytes32) {
        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));
    }

    /**
     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this
     * function returns the hash of the fully encoded EIP712 message for this domain.
     *
     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:
     *
     * ```solidity
     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(
     *     keccak256("Mail(address to,string contents)"),
     *     mailTo,
     *     keccak256(bytes(mailContents))
     * )));
     * address signer = ECDSA.recover(digest, signature);
     * ```
     */
    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {
        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);
    }
}

// SPDX-License-Identifier: None
pragma solidity ^0.8.0;

/**
   @title IGovernance contract
   @dev Provide interfaces that allow interaction to Governance contract
*/
interface IGovernance {
    function treasury() external view returns (address);
    function hasRole(bytes32 role, address account) external view returns (bool);
    function paymentToken(address _token) external view returns (bool);
    function locked() external view returns (bool);
}

// SPDX-License-Identifier: None
pragma solidity ^0.8.0;

interface ILandRegistry {

    /**
       	@notice Mint `_tokenId` to `_to`
       	@dev  Caller must have MINTER_ROLE
		@param	_to			    Beneficiary address to receive a land parcel
		@param	_tokenId		ID number of the token
		@param	_tokenURI		URI to retrieve metadata corresponding to `_tokenId`
    */
    function assignParcel(
        address _to,
        uint256 _tokenId,
        string calldata _tokenURI
    ) external;

    /**
       	@notice Mint a batch of `_tokenIds` to `_to`
       	@dev  Caller must have MINTER_ROLE
		@param	_to			            Address of beneficiary
		@param	_tokenIds		        A list of minting `_tokenIds`
		@param	_tokenURIs		        A list of URIs
    */
    function assignParcels(
        address _to,
        uint256[] calldata _tokenIds,
        string[] calldata _tokenURIs 
    ) external;

    /**
       	@notice Mint a batch of `_tokenIds` to `_receivers`
       	@dev  Caller must have MINTER_ROLE
		@param	_receivers			    A list of Beneficiaries
		@param	_tokenIds		        A list of minting `_tokenIds`
		@param	_tokenURIs		        A list of URIs
    */
    function assignBatchParcels(
        address[] calldata _receivers,
        uint256[] calldata _tokenIds,
        string[] calldata _tokenURIs 
    ) external;

    /**
       	@notice Burn a batch of `_tokenIds`
       	@dev  Caller must have MINTER_ROLE or is the Owner of `_tokenIds`
		@param	_tokenIds		        A list of burning `_tokenIds`
        Note: `LandRegistry` supports a feature that Land's Owner can consolidate adjacent lands to
            create a bigger one. In such case, `LotConsolidate` contract will be assigned MINTER_ROLE to handle it
    */
    function removeBatchParcels(uint256[] calldata _tokenIds) external;

    function ownerOf(uint256 _tokenId) external view returns (address);
}

// SPDX-License-Identifier: None
pragma solidity ^0.8.0;

interface ICoversion {

    /**
        @notice Compose `tokenId` from `_longitude` and `_latitude` values
        @dev  Caller can be ANY
        @param _longitude        Longitude value
        @param _latitude         Latitude value
    */
    function compose(int256 _longitude, int256 _latitude) external view returns (uint256);

    /**
        @notice Compose `tokenId` from `_longitude` and `_latitude` values
        @dev  Caller can be ANY
        @param _longitudes              A list of `_longitude` values
        @param _latitudes               A list of `_latitude` values
    */
    function composeBatch(int256[] calldata _longitudes, int256[] calldata _latitudes) external view returns (uint256[] memory _ids);

    /**
        @notice Decompose `tokenId` to retrieve `_longitude` and `_latitude` values
        @dev  Caller can be ANY
        @param _tokenId             ID number of a token
    */
    function decompose(uint256 _tokenId) external view returns (int256, int256);

    /**
        @notice Decompose a batch of `tokenId`
        @dev  Caller can be ANY
        @param _tokenIds              A list of `_tokenId` to be decomposed
    */
    function decomposeBatch(uint256[] calldata _tokenIds) external view returns (int256[] memory _longitudes, int256[] memory _latitudes);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)

pragma solidity ^0.8.0;

import "../Strings.sol";

/**
 * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
 *
 * These functions can be used to verify that a message was signed by the holder
 * of the private keys of a given address.
 */
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS,
        InvalidSignatureV
    }

    function _throwError(RecoverError error) private pure {
        if (error == RecoverError.NoError) {
            return; // no error: do nothing
        } else if (error == RecoverError.InvalidSignature) {
            revert("ECDSA: invalid signature");
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert("ECDSA: invalid signature length");
        } else if (error == RecoverError.InvalidSignatureS) {
            revert("ECDSA: invalid signature 's' value");
        } else if (error == RecoverError.InvalidSignatureV) {
            revert("ECDSA: invalid signature 'v' value");
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature` or error string. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     *
     * Documentation for signature generation:
     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
     *
     * _Available since v4.3._
     */
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
        // Check the signature length
        // - case 65: r,s,v signature (standard)
        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else if (signature.length == 64) {
            bytes32 r;
            bytes32 vs;
            // ecrecover takes the signature parameters, and the only way to get them
            // currently is to use assembly.
            assembly {
                r := mload(add(signature, 0x20))
                vs := mload(add(signature, 0x40))
            }
            return tryRecover(hash, r, vs);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength);
        }
    }

    /**
     * @dev Returns the address that signed a hashed message (`hash`) with
     * `signature`. This address can then be used for verification purposes.
     *
     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
     * this function rejects them by requiring the `s` value to be in the lower
     * half order, and the `v` value to be either 27 or 28.
     *
     * IMPORTANT: `hash` _must_ be the result of a hash operation for the
     * verification to be secure: it is possible to craft signatures that
     * recover to arbitrary addresses for non-hashed data. A safe way to ensure
     * this is by receiving a hash of the original message (which may otherwise
     * be too long), and then calling {toEthSignedMessageHash} on it.
     */
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, signature);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
     *
     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address, RecoverError) {
        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
        uint8 v = uint8((uint256(vs) >> 255) + 27);
        return tryRecover(hash, v, r, s);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
     *
     * _Available since v4.2._
     */
    function recover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, r, vs);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,
     * `r` and `s` signature fields separately.
     *
     * _Available since v4.3._
     */
    function tryRecover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address, RecoverError) {
        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature
        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines
        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most
        // signatures from current libraries generate a unique signature with an s-value in the lower half order.
        //
        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value
        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or
        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept
        // these malleable signatures as well.
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS);
        }
        if (v != 27 && v != 28) {
            return (address(0), RecoverError.InvalidSignatureV);
        }

        // If the signature is valid (and not malleable), return the signer address
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature);
        }

        return (signer, RecoverError.NoError);
    }

    /**
     * @dev Overload of {ECDSA-recover} that receives the `v`,
     * `r` and `s` signature fields separately.
     */
    function recover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
        _throwError(error);
        return recovered;
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from a `hash`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        // 32 is the length in bytes of hash,
        // enforced by the type signature above
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    /**
     * @dev Returns an Ethereum Signed Message, created from `s`. This
     * produces hash corresponding to the one signed with the
     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
     * JSON-RPC method as part of EIP-191.
     *
     * See {recover}.
     */
    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n", Strings.toString(s.length), s));
    }

    /**
     * @dev Returns an Ethereum Signed Typed Data, created from a
     * `domainSeparator` and a `structHash`. This produces hash corresponding
     * to the one signed with the
     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
     * JSON-RPC method as part of EIP-712.
     *
     * See {recover}.
     */
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
    }
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)

pragma solidity ^0.8.0;

/**
 * @dev String operations.
 */
library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    /**
     * @dev Converts a `uint256` to its ASCII `string` decimal representation.
     */
    function toString(uint256 value) internal pure returns (string memory) {
        // Inspired by OraclizeAPI's implementation - MIT licence
        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
     */
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    /**
     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
     */
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}