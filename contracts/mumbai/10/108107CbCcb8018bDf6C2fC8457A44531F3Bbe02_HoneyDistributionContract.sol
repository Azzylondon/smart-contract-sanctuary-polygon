// SPDX-License-Identifier: MIT
pragma solidity 0.8.10;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./interfaces/IUniswapFactory.sol";
import "./interfaces/IUniswapV2Router02.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract HoneyDistributionContract is Ownable {

    // The constant used to calculate percentages, allows percentages to have 1 decimal place (ie 15.5%)
    uint constant BASIS_POINTS = 1000;

    uint public PercentToSell = 1000;

    address HoneyAddress;
    IUniswapV2Router02 uniswapRouter;

     struct FeeAllocation {
        address wallet;
        uint percent;
    }

    mapping(address => bool) whitelistedAddresses;

    // List of wallet addresses and percentages to allocate sales tax to
    FeeAllocation[] feeAllocations;

    constructor(address _honeyAddress, address _uniswapRouter) {
        HoneyAddress = _honeyAddress;

        //set router and approve it for all honey transfers
        uniswapRouter = IUniswapV2Router02(_uniswapRouter);

        IERC20(_honeyAddress).approve(_uniswapRouter, 2**256 -1);

        //Allow the deployer to sell/distribute funds
        whitelistedAddresses[msg.sender] = true;
    }

    /**
    * @dev This sells a set amount of honey to the liquidity pool for matic
    * Requires the caller to be the honey token address
    */
    function sellForMatic(bool _claimFees) external {

        require(whitelistedAddresses[msg.sender], "Don't have permission call this function");

        uint balance = IERC20(HoneyAddress).balanceOf(address(this));

        uint amountToSell = (balance * PercentToSell) / BASIS_POINTS;

        if(amountToSell > 0) {

            address[] memory path = new address[](2);
            path[0] = HoneyAddress;
            path[1] = uniswapRouter.WETH();
        
            uint deadline = block.timestamp + 15;

            uniswapRouter.swapExactTokensForETH(amountToSell, 0, path, address(this), deadline);

        }

        if(_claimFees) {
            claimFees();
        }


    }

    

    /**
    * @dev This allows the contract to revieve matic by selling honey to the liquidity pool
    */
    receive() external payable {}


    /**
    * @dev Claims the fees generated by the sales taxes, and send the honey + matic to the appropriate wallets, in the appropriate ratio
    * Requires the caller to be the owner of the contract
    */
    function claimFees() public {

        require(whitelistedAddresses[msg.sender], "Don't have permission call this function");

        IERC20 honey = IERC20(HoneyAddress);

        FeeAllocation[] memory _feeAllocations = feeAllocations;

        require(_feeAllocations.length > 0, "Fee allocations not set");

        uint maticBalance = address(this).balance;

        uint honeyBalance = honey.balanceOf(address(this));

        for(uint i = 0; i < _feeAllocations.length; i++) {

            uint maticToClaim = (maticBalance * _feeAllocations[i].percent) / BASIS_POINTS;

            uint honeyToClaim = (honeyBalance * _feeAllocations[i].percent) / BASIS_POINTS;

            if(maticToClaim > 0) {

                (bool sent, ) = _feeAllocations[i].wallet.call{value: maticToClaim}("");
                require(sent, "Failed to send Matic");

            }

            if(honeyToClaim > 0) {

                honey.transfer(_feeAllocations[i].wallet, honeyToClaim);

            }

        }

    }

   /**
    * @dev Sets how the fees will be allocated when withdrawn
    * Requires the caller to be the owner of the contract
    */
    function setFeeAllocations(address[] calldata wallets, uint[] calldata percents) external onlyOwner {

        require(wallets.length == percents.length, "wallets and percents need to be the same length");

        uint totalPercent;

        uint feeAllocationsLength = feeAllocations.length;

        for(uint i = 0; i < wallets.length; i++) {

            FeeAllocation memory feeAllocation = FeeAllocation(wallets[i], percents[i]);

            totalPercent += feeAllocation.percent;

            if(i >= feeAllocationsLength) {
                feeAllocations.push(feeAllocation);
            }else {
                feeAllocations[i] = feeAllocation;
            }
           

        }

        require(totalPercent == BASIS_POINTS, "Total percent does not add to 100%");

    }

    /**
    * @dev Sets the percent of the sales tax collected that will be sold to the liqudity pool for matic
    * Requires the caller to be the owner of the contract
    */
    function setPercentOfFeesToSell(uint _percent) external onlyOwner {

        require(_percent <= BASIS_POINTS, "Percent cant be over 100%");
        PercentToSell = _percent;

    }

    /**
    * @dev Set the router address for the pool that will be selling to
    * Requires the caller to be the owner of the contract
    */
    function setUniswapRouter(address liquidityPool) external onlyOwner {

        require(liquidityPool != address(0), "Zero Address");

        uniswapRouter = IUniswapV2Router02(liquidityPool);

        IERC20(HoneyAddress).approve(liquidityPool, 2**256 -1);

    }

    /**
    * @dev Sets addresses that are able to sell and distibute funds to wallets
    */
    function setWhiteListedAddress(address _address, bool value) external onlyOwner {

        require(_address != address(0), "Zero Address");

        whitelistedAddresses[_address] = value;

    }




}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)

pragma solidity ^0.8.0;

import "../utils/Context.sol";

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

//SPDX-License-Identifier: Unlicense
pragma solidity 0.8.10;
interface IUniswapV2Factory {
    event PairCreated(address indexed token0, address indexed token1, address pair, uint);

    function feeTo() external view returns (address);
    function feeToSetter() external view returns (address);

    function getPair(address tokenA, address tokenB) external view returns (address pair);
    function allPairs(uint) external view returns (address pair);
    function allPairsLength() external view returns (uint);

    function createPair(address tokenA, address tokenB) external returns (address pair);

    function setFeeTo(address) external;
    function setFeeToSetter(address) external;
}

//SPDX-License-Identifier: Unlicense
pragma solidity 0.8.10;
import "./IUniswapV2Router01.sol";

interface IUniswapV2Router02 is IUniswapV2Router01 {
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)

pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `to`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address to, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `from` to `to` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)

pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

//SPDX-License-Identifier: Unlicense
pragma solidity 0.8.10;
interface IUniswapV2Router01 {
    function factory() external pure returns (address);
    function WETH() external pure returns (address);

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB, uint liquidity);
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountToken, uint amountETH);
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountA, uint amountB);
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountToken, uint amountETH);
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external returns (uint[] memory amounts);
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        returns (uint[] memory amounts);
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        payable
        returns (uint[] memory amounts);

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}