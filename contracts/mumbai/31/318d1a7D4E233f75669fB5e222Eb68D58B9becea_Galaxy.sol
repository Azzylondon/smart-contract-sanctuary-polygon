/**
 *Submitted for verification at polygonscan.com on 2022-04-12
*/

// SPDX-License-Identifier: GPL-3.0
// File: @chainlink/contracts/src/v0.8/VRFRequestIDBase.sol


pragma solidity ^0.8.0;

contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol


pragma solidity ^0.8.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}

// File: @chainlink/contracts/src/v0.8/VRFConsumerBase.sol


pragma solidity ^0.8.0;



/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: contracts/interfaces/Planet-Universe-Interface-PDUST.sol



pragma solidity ^0.8.0;

interface PlanetUniverseInterfacePDUST {
    function mint(address to, uint256 amount) external;
    function burn(address from, uint256 amount) external;
    function updateOriginAccess() external;
    function balanceOf(address account) external returns (uint256);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
   
}
// File: contracts/interfaces/Planet-UniverseGame-Interface.sol



pragma solidity ^0.8.0;

interface PlanetUniverseGameInterface {

}
// File: @openzeppelin/contracts/utils/introspection/IERC165.sol



pragma solidity ^0.8.0;

/**
 * @dev Interface of the ERC165 standard, as defined in the
 * https://eips.ethereum.org/EIPS/eip-165[EIP].
 *
 * Implementers can declare support of contract interfaces, which can then be
 * queried by others ({ERC165Checker}).
 *
 * For an implementation, see {ERC165}.
 */
interface IERC165 {
    /**
     * @dev Returns true if this contract implements the interface defined by
     * `interfaceId`. See the corresponding
     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
     * to learn more about how these ids are created.
     *
     * This function call must use less than 30 000 gas.
     */
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

// File: @openzeppelin/contracts/token/ERC721/IERC721.sol



pragma solidity ^0.8.0;


/**
 * @dev Required interface of an ERC721 compliant contract.
 */
interface IERC721 is IERC165 {
    /**
     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.
     */
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.
     */
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    /**
     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.
     */
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    /**
     * @dev Returns the number of tokens in ``owner``'s account.
     */
    function balanceOf(address owner) external view returns (uint256 balance);

    /**
     * @dev Returns the owner of the `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function ownerOf(uint256 tokenId) external view returns (address owner);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Transfers `tokenId` token from `from` to `to`.
     *
     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    /**
     * @dev Gives permission to `to` to transfer `tokenId` token to another account.
     * The approval is cleared when the token is transferred.
     *
     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.
     *
     * Requirements:
     *
     * - The caller must own the token or be an approved operator.
     * - `tokenId` must exist.
     *
     * Emits an {Approval} event.
     */
    function approve(address to, uint256 tokenId) external;

    /**
     * @dev Returns the account approved for `tokenId` token.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function getApproved(uint256 tokenId) external view returns (address operator);

    /**
     * @dev Approve or remove `operator` as an operator for the caller.
     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.
     *
     * Requirements:
     *
     * - The `operator` cannot be the caller.
     *
     * Emits an {ApprovalForAll} event.
     */
    function setApprovalForAll(address operator, bool _approved) external;

    /**
     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.
     *
     * See {setApprovalForAll}
     */
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}

// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol


// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)

pragma solidity ^0.8.0;


/**
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension
 * @dev See https://eips.ethereum.org/EIPS/eip-721
 */
interface IERC721Enumerable is IERC721 {
    /**
     * @dev Returns the total amount of tokens stored by the contract.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.
     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.
     */
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    /**
     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.
     * Use along with {totalSupply} to enumerate all tokens.
     */
    function tokenByIndex(uint256 index) external view returns (uint256);
}

// File: contracts/interfaces/Planet-Universe-Interface.sol



pragma solidity ^0.8.0;


interface PlanetUniverseInterface is IERC721Enumerable {

  struct PlanetAlien {
        bool isPlanet;
        uint8[17] traitarray;
        uint8 rankIndex;
        uint8 breedingAmount;
        uint8 generation;
        uint8 buildingPlots;
    }

    function mint(address recipient, uint256 seed) external;
    function totalMinted() external returns (uint16);
    function getMaxSupplyTotal() external view returns (uint256);
    function getMaxPlanetSupplyGen0() external view returns (uint256);
    function getMaxPlanetSupplyPresaleGen0() external view returns (uint256);
    function getMaxPlanetSupplyEarlyAdopterSaleGen0() external view returns (uint256);
    function getMaxPreSaleMintAmount() external view returns (uint256);
    function getMaxEarlyAdopterSaleMintAmount() external view returns (uint256);
    function getTotalPresaleMints() external view returns (uint256);
    function getTotalEarlyAdopterSaleMints() external view returns (uint256);
    function getTotalSaleMints() external view returns (uint256);
    function getTotalMinted() external view returns (uint256);
    function getContractPresale() external view returns (bool);
    function getContractEarlyAdopterSale() external view returns (bool);
    function getContractSale() external view returns (bool);
    function getAddressMintedPreSaleBalance(address _key) external view returns (uint256);
    function getAddressMintedEarlyAdopterSaleBalance(address _key) external view returns (uint256);
    function getAddressMintedSaleBalance(address _key) external view returns (uint256);
    function setAddressMintedPreSaleBalance(address recipient) external;
    function setAddressMintedEarlyAdopterSaleBalance(address recipient) external;
    function setAddressMintedSaleBalance(address recipient) external;
    function getTokenWriteBlock(uint256 tokenId) external view returns(uint64);
    function setTotalPresaleMints() external;
    function setTotalEarlyAdopterSaleMints() external;
    function setTotalSaleMints() external;
    function setCounterGen0MintedTotal() external;
    function setCounterGen1MintedTotal() external;
    function isWhitelisted(address _user) external view returns (bool);
    function isEarlyAdopter(address _user) external view returns (bool);
    function getTokenTraits(uint256 tokenId) external view returns (PlanetAlien memory);
    function isPlanet(uint256 tokenId) external view returns(bool);
    function isAlien(uint256 tokenId) external view returns(bool);
    function lowerBreedingAmount(uint256 tokenId) external;
    function whatisBreedingAmount(uint256 tokenId) external view returns(uint8);
    function isAlienToken(uint256 tokenId) external view returns (bool istokenalien);
}



// File: contracts/interfaces/Planet-Universe-Interface-Galaxy.sol



pragma solidity ^0.8.0;

interface PlanetUniverseInterfaceGalaxy {
function addPlanetToGalaxyAndEarn(address account, uint16[] calldata tokenIds) external;
function randomAlienOwner(uint256 seed) external view returns (address);
}
// File: @openzeppelin/contracts/security/ReentrancyGuard.sol


// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)

pragma solidity ^0.8.0;

/**
 * @dev Contract module that helps prevent reentrant calls to a function.
 *
 * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
 * available, which can be applied to functions to make sure there are no nested
 * (reentrant) calls to them.
 *
 * Note that because there is a single `nonReentrant` guard, functions marked as
 * `nonReentrant` may not call one another. This can be worked around by making
 * those functions `private`, and then adding `external` `nonReentrant` entry
 * points to them.
 *
 * TIP: If you would like to learn more about reentrancy and alternative ways
 * to protect against it, check out our blog post
 * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].
 */
abstract contract ReentrancyGuard {
    // Booleans are more expensive than uint256 or any type that takes up a full
    // word because each write operation emits an extra SLOAD to first read the
    // slot's contents, replace the bits taken up by the boolean, and then write
    // back. This is the compiler's defense against contract upgrades and
    // pointer aliasing, and it cannot be disabled.

    // The values being non-zero value makes deployment a bit more expensive,
    // but in exchange the refund on every call to nonReentrant will be lower in
    // amount. Since refunds are capped to a percentage of the total
    // transaction's gas, it is best to keep them low in cases like this one, to
    // increase the likelihood of the full refund coming into effect.
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    /**
     * @dev Prevents a contract from calling itself, directly or indirectly.
     * Calling a `nonReentrant` function from another `nonReentrant`
     * function is not supported. It is possible to prevent this from happening
     * by making the `nonReentrant` function external, and making it call a
     * `private` function that does the actual work.
     */
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
}

// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol



pragma solidity ^0.8.0;

/**
 * @title ERC721 token receiver interface
 * @dev Interface for any contract that wants to support safeTransfers
 * from ERC721 asset contracts.
 */
interface IERC721Receiver {
    /**
     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}
     * by `operator` from `from`, this function is called.
     *
     * It must return its Solidity selector to confirm the token transfer.
     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.
     *
     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.
     */
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}

// File: @openzeppelin/contracts/utils/Context.sol



pragma solidity ^0.8.0;

/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

// File: @openzeppelin/contracts/security/Pausable.sol


// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which allows children to implement an emergency stop
 * mechanism that can be triggered by an authorized account.
 *
 * This module is used through inheritance. It will make available the
 * modifiers `whenNotPaused` and `whenPaused`, which can be applied to
 * the functions of your contract. Note that they will not be pausable by
 * simply including this module, only once the modifiers are put in place.
 */
abstract contract Pausable is Context {
    /**
     * @dev Emitted when the pause is triggered by `account`.
     */
    event Paused(address account);

    /**
     * @dev Emitted when the pause is lifted by `account`.
     */
    event Unpaused(address account);

    bool private _paused;

    /**
     * @dev Initializes the contract in unpaused state.
     */
    constructor() {
        _paused = false;
    }

    /**
     * @dev Returns true if the contract is paused, and false otherwise.
     */
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is not paused.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    /**
     * @dev Modifier to make a function callable only when the contract is paused.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    /**
     * @dev Triggers stopped state.
     *
     * Requirements:
     *
     * - The contract must not be paused.
     */
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    /**
     * @dev Returns to normal state.
     *
     * Requirements:
     *
     * - The contract must be paused.
     */
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

// File: @openzeppelin/contracts/access/Ownable.sol


// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)

pragma solidity ^0.8.0;


/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

// File: contracts/Planet-Universe-Galaxy.sol


// Galaxy is the staking contract

pragma solidity ^0.8.0;










contract Galaxy is PlanetUniverseInterfaceGalaxy, Ownable, ReentrancyGuard, Pausable, IERC721Receiver, VRFConsumerBase {
    
// Building block to store a Stake, which contains [tokenId, value, owner]
  struct Stake {
    uint16 tokenId;
    uint80 value;
    address owner;
    }

// Constants for this contract
  uint8 public constant MAX_RANK = 8; //RANK 5-8 for Aliens
  uint256 public constant DAILY_PDUST_RATE = 12000000 ether; // Planets earn 12000 $PDUST per day
  uint256 public constant MINIMUM_TO_EXIT = 1 days; // Planets and Aliens must spend 1 days in the galaxy before they can be unstaked
  uint256 public constant MAXIMUM_GLOBAL_PDUST = 2880000000 ether; // The total of earnable $PDUST earned through staking will be alot of chee$e
  uint256 public constant ALIEN_CLAIM_TAX_PERCENTAGE = 20; // Aliens take a 20% tax on all $GP claimed, divided by RANK 5-8 the Chee$e will be divided

// Private parts for this contract
  uint256 private totalRankStaked; // Total Rank of Aliens staked to show to the players how many aliens staked by rank
  uint256 private counterPlanetsStaked; // Total amount of Planets staked for the view for the website
  uint256 private lastClaimTimestamp; // The last timestamp $PDUST was claimed by anyone, also supplies us with protection against double claims, claims on top off claims etc
  uint256 private unaccountedRewards = 0; // Internal private for when the game launches there will be a small period when the claims (tax) wont be claimed because aliens are not staked yet
  uint256 private pdustPerRank = 0; // amount of $PDUST is put aside for each rank of alien staked, based on their rank

// Events
  event TokenStaked(address indexed owner, uint256 indexed tokenId, uint256 value);
  event PlanetClaimedPDUST(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);
  event AlienClaimedPDUST(uint256 indexed tokenId, bool indexed unstaked, uint256 earned);

  constructor() VRFConsumerBase(0x8C7382F9D8f56b33781fE506E897a4F1e2d17255, 0x326C977E6efc84E512bB9C30f76E30c160eD06FB) {
    keyHash = 0x6e75b569a01ef56d18cab6a8e71e6600d6ce853834d4a5748b720d06f878b3a4;
    fee = 0.1 * 10 ** 15; // 0.0001 LINK (Varies by network) 
    _pause();
  }

// Reference to Game Interface part of the CORE CONFIG immutables
PlanetUniverseGameInterface public game;
// Reference to Planet Universe NFT collection part of the CORE CONFIG immutables
PlanetUniverseInterface public PlanetUniverseNFT;
// Reference to Planet Dust Interface part of the CORE CONFIG immutables
PlanetUniverseInterfacePDUST public pdust;

// Mappings
  mapping(uint256 => Stake) private galaxy; //Mapping a long string Stake to galaxy
  mapping(uint256 => Stake[]) private ufo; // Maps rank of the aliens to their UFOs so we know how much tax they claim
  mapping(uint256 => uint256) private ufoLocation; // Maps the location of the alien UFO to know where they are in the galaxy for staking/stealing
  
// Some public variables for views/trackers
  uint256 public totalPDUSTEarned; // The amount of $PDUST earned so far is used for a counter on the website

// Chainlink setup variables
    bytes32 internal keyHash;
    uint256 internal fee;
    uint256 public randomResult;

// Contract checking modifier to protect routes and to make them only run when the contracts have been set
  modifier requireContractsSet() {
      require(address(PlanetUniverseNFT) != address(0) && address(game) != address(0) && address(pdust) != address(0) 
        , "Ratigan checks all the contracts...The contracts not set sir!");
      _;
  }

// Set the contracts so we can link these 
  function setContracts(address _nft, address _game, address _pdust) external onlyOwner {
    PlanetUniverseNFT = PlanetUniverseInterface(_nft);
    pdust = PlanetUniverseInterfacePDUST(_pdust);
    game = PlanetUniverseGameInterface(_game);
  }

// Adds Planets to the Galaxy*@param [account] the address of the staker * @param [tokenIds] the IDs of the Planet to stake
  function addPlanetToGalaxyAndEarn(address account, uint16[] calldata tokenIds) external override nonReentrant {
    require(tx.origin == msg.sender || msg.sender == address(game), "Ratigan says that only the game contract or the origin sender can call this to protect cheese"); //Might be able to clean game here??
    require(account == tx.origin, "account to sender mismatch");
    for (uint i = 0; i < tokenIds.length; i++) {
      if (msg.sender != address(game)) { // dont do this step if its a mint + stake
        require(PlanetUniverseNFT.ownerOf(tokenIds[i]) == msg.sender, "Ratigan checks your pocket, sir/madam you don't own this token");
        PlanetUniverseNFT.transferFrom(msg.sender, address(this), tokenIds[i]);
        
      } else if (tokenIds[i] == 0) {
        continue; // there may be gaps in the array for stolen tokens
    }
        if (PlanetUniverseNFT.isPlanet(tokenIds[i])) 
          _addPlanetToGalaxy(account, tokenIds[i]);
        else 
          _addAlienToUFO(account, tokenIds[i]);
  }
}

// Sends a single planet to the galaxy, @param [account] the wallet address of the staker, @param [tokenId] the ID of NFT to send to the galaxy
  function _addPlanetToGalaxy(address account, uint256 tokenId) internal requireContractsSet _updateEarnings {
    galaxy[tokenId] = Stake({
      owner: account,
      tokenId: uint16(tokenId),
      value: uint80(block.timestamp)
    });
    counterPlanetsStaked += 1;
    emit TokenStaked(account, tokenId, block.timestamp);
  }

// Adds a single Alien to the UFO * @param [account] the address of the staker @param [tokenId] the ID of the Alien to add to the FlighUFO
  function _addAlienToUFO(address account, uint256 tokenId) internal {
    uint8 rank = _rankForAlien(tokenId);
    totalRankStaked += rank; // Portion of earnings ranges from 8 to 5
    ufoLocation[tokenId] = ufo[rank].length; // Store the location of the dragon in the Flight
    ufo[rank].push(Stake({
      owner: account,
      tokenId: uint16(tokenId),
      value: uint80(pdustPerRank)
    })); // Add the dragon to the Flight
    emit TokenStaked(account, tokenId, pdustPerRank);
  }

// Calculations

// Calculation view for website and to start the claim
  function calculateRewards(uint256 tokenId) external view returns (uint256 owed) {
    uint64 lastTokenWrite = PlanetUniverseNFT.getTokenWriteBlock(tokenId);
    // Must check this, as getTokenTraits will be allowed since this contract is an admin protection and vermin
    require(lastTokenWrite < block.number, "Ratigan suspects vermin trying to steal chee$e in the same block!");
    Stake memory stake = galaxy[tokenId];
    if(PlanetUniverseNFT.isPlanet(tokenId)) {
      if (totalPDUSTEarned < MAXIMUM_GLOBAL_PDUST) {
        owed = (block.timestamp - stake.value) * DAILY_PDUST_RATE / 1 days;
      } else if (stake.value > lastClaimTimestamp) {
        owed = 0; // $PDUST production stopped already
      } else {
        owed = (lastClaimTimestamp - stake.value) * DAILY_PDUST_RATE / 1 days; // stop earning additional $PDUST if it's all been earned
      }
    }
    else {
      uint8 rank = _rankForAlien(tokenId);
      owed = (rank) * (pdustPerRank - stake.value); // Calculate portion of tokens based on Rank of the Alien
    }
  }

// Starting the claim $PDUST and minting 
  function claimFromGalaxy(uint16[] calldata tokenId, bool unstake) external _updateEarnings nonReentrant {
    require(tx.origin == msg.sender || msg.sender == address(game), "Ratigan says that only the game contract or the origin sender can call this to protect cheese"); //Might be able to clean game here??
    uint256 owed = 0;
    for (uint i = 0; i < tokenId.length; i++) {
      if (PlanetUniverseNFT.isPlanet(tokenId[i])) {
        owed += _claimPlanetFromGalaxy(tokenId[i], unstake);
      }
      else {
        owed += _claimAlienFromUFO(tokenId[i], unstake);
      }
    }
    pdust.updateOriginAccess();
    if (owed == 0) {
      return;
    }
    pdust.mint(msg.sender, owed);
  }

// Claiming, calculating and unstaking
// Claim Planets by param [tokenId or id's] decide wether they want to unstake yes or no @param [unstake]
  function _claimPlanetFromGalaxy(uint256 tokenId, bool unstake) internal returns (uint256 owed) {
    Stake memory stake = galaxy[tokenId];
    require(stake.owner == msg.sender, "Ratigan checks your pocket, sir/madam you don't own this token");
    uint256 startseed = 0;
    if (totalPDUSTEarned < MAXIMUM_GLOBAL_PDUST) {
      owed = (block.timestamp - stake.value) * DAILY_PDUST_RATE / 1 days;
    } else if (stake.value > lastClaimTimestamp) {
      owed = 0; // $PDUST has been distributed
    } else {
      owed = (lastClaimTimestamp - stake.value) * DAILY_PDUST_RATE / 1 days; // Stop earning additional $PDUST if it's all been earned
    }
    if (unstake) {
      startseed = randomseed();
      if (random(startseed) & 1 == 1) { // 50% chance of all $PDUST is stolen when unstaking, thats the risk sir!
        _payAlienTax(owed);
        owed = 0;
      }
      delete galaxy[tokenId];
      counterPlanetsStaked -= 1;
  // Always transfer last to guard against reentrance
      PlanetUniverseNFT.safeTransferFrom(address(this), msg.sender, tokenId, "Ratigan says, here you are sir"); // Snend back the planet to its owner
    } else {
      _payAlienTax(owed * ALIEN_CLAIM_TAX_PERCENTAGE / 100); // % of PDUST to Aliens
      owed = owed * (100 - ALIEN_CLAIM_TAX_PERCENTAGE) / 100; // % remainder goes to Planet owner
      galaxy[tokenId] = Stake({
        owner: msg.sender,
        tokenId: uint16(tokenId),
        value: uint80(block.timestamp)
      }); // reset stake to start at 0... might need some sort of check to fuck over frontrunners... resetting before finish?
    }
    emit PlanetClaimedPDUST(tokenId, unstake, owed);
  }

// Claim Aliens by param [tokenId or id's] decide wether they want to unstake yes or no @param [unstake]
  function _claimAlienFromUFO(uint256 tokenId, bool unstake) internal returns (uint256 owed) {
    require(PlanetUniverseNFT.ownerOf(tokenId) == address(this), "Ratigan checks your pocket, sir/madam you don't own this token");
    uint8 rank = _rankForAlien(tokenId);
    Stake memory stake = ufo[rank][ufoLocation[tokenId]];
    require(stake.owner == msg.sender, "Ratigan checks your pocket, sir/madam you don't own this token");
    owed = (rank) * (pdustPerRank - stake.value); // Calculate portion of tokens based on Rank
    if (unstake) {
      totalRankStaked -= rank; // Remove rank from total staked to start on position 1 in the UFO galaxy
      Stake memory lastStake = ufo[rank][ufo[rank].length - 1];
      ufo[rank][ufoLocation[tokenId]] = lastStake; // Shuffle last Alien to current position
      ufoLocation[lastStake.tokenId] = ufoLocation[tokenId];
      ufo[rank].pop(); // Remove duplicate from the same population of UFO's in flight
      delete ufoLocation[tokenId]; // Delete old mapping of previous locations, Always remove last to guard against reentrance or from the claim. Protected 2 ways... one by the claim one by the UFO position-/delete
      PlanetUniverseNFT.safeTransferFrom(address(this), msg.sender, tokenId, "Ratigan says Here is your alien back, Sir"); // Send back Alien to its rightfull owner
    } else {
      ufo[rank][ufoLocation[tokenId]] = Stake({
        owner: msg.sender,
        tokenId: uint16(tokenId),
        value: uint80(pdustPerRank)
      }); // Reset the stake back to 0. Might have to guard against reentrency....?
    }
    emit AlienClaimedPDUST(tokenId, unstake, owed);
  }

// Calculations
// * add $PDUST to claimable pot for the UFO taxers * @param [amount] $PDUST to add to the pot
  function _payAlienTax(uint256 amount) internal {
    if (totalRankStaked == 0) { // if there's no staked Aliens
      unaccountedRewards += amount; // keep track of $PDUST due for Aliens
      return;
    }
    // makes sure to include any unaccounted $PDUST for when the game is launched! <3 WnD
    pdustPerRank += (amount + unaccountedRewards) / totalRankStaked;
    unaccountedRewards = 0;
  }

// Update the earnings actively
  modifier _updateEarnings() {
    if (totalPDUSTEarned < MAXIMUM_GLOBAL_PDUST) {
      totalPDUSTEarned += 
        (block.timestamp - lastClaimTimestamp) * counterPlanetsStaked * DAILY_PDUST_RATE / 1 days; 
      lastClaimTimestamp = block.timestamp;
    }
    _;
  }

// Checking rank of an Alien * gets the rank score of an alien * @param [tokenId] the ID of the Alien to get the rank score for * @return the rank score of the Dragon (5-8) but its by index so 0-3
  function _rankForAlien(uint256 tokenId) internal view returns (uint8) {
    PlanetUniverseInterface.PlanetAlien memory s = PlanetUniverseNFT.getTokenTraits(tokenId);
    return MAX_RANK - s.rankIndex; // rank index is 0-3
  }

// Randomness. During testing we saw that it is best not to make a generic randomized option, in case of integrity of the chain. Also make them seperate for better security
// Could have programmed this into 1 Randomizer interface, but I felt it was stricter to use internal private views

// Randomness fuctionality 
    
  function getRandomNumber() public onlyOwner returns (bytes32 requestId) {
    require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK - fill contract with faucet");
    return requestRandomness(keyHash, fee);
  }

// Callback function used by VRF Coordinator
  function fulfillRandomness(bytes32, uint256 randomness) internal override {
    randomResult = randomness;
  }

// Random function to get a seed to create a nice number feed by [first generation seed]
  function random(uint256 seed) public view returns (uint256) {
    return uint256(keccak256(abi.encodePacked(
      tx.origin,
      blockhash(block.number - 1),
      block.timestamp,
      seed,
      randomResult
    )));
  }

// To generate a first iteration seed
  function randomseed() private view returns (uint) {
    return uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp)));
  } 

// Stealing
// * chooses a random Alien thief when a newly minted token is stolen* @param seed a random value to choose a Alien from* @return the owner of the randomly selected Alien thief
  function randomAlienOwner(uint256 seed) external view override returns (address) {
    if (totalRankStaked == 0) {
      return address(0x0);
    }
    uint256 bucket = (seed & 0xFFFFFFFF) % totalRankStaked; // choose a value from 0 to total rank staked
    uint256 cumulative;
    seed >>= 32; // loop through each bucket of Aliens with the same rank score to find a candidate to steal
    for (uint i = MAX_RANK - 3; i <= MAX_RANK; i++) {
      cumulative += ufo[i].length * i;
      // if the value is not inside of that bucket, keep going until you find an alien
      if (bucket >= cumulative) continue;
      // get the address of a random Alien with that rank score
      return ufo[i][seed % ufo[i].length].owner;
    }
    return address(0x0);
  }

  function onERC721Received(
        address,
        address from,
        uint256,
        bytes calldata
    ) external pure override returns (bytes4) {
      require(from == address(0x0), "Cannot send to Tower directly");
      return IERC721Receiver.onERC721Received.selector;
    }
}