/**
 *Submitted for verification at polygonscan.com on 2022-09-08
*/

// File: @chainlink/contracts/src/v0.8/VRFRequestIDBase.sol


pragma solidity ^0.8.0;

contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}

// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol


pragma solidity ^0.8.0;

interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);

  function approve(address spender, uint256 value) external returns (bool success);

  function balanceOf(address owner) external view returns (uint256 balance);

  function decimals() external view returns (uint8 decimalPlaces);

  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);

  function increaseApproval(address spender, uint256 subtractedValue) external;

  function name() external view returns (string memory tokenName);

  function symbol() external view returns (string memory tokenSymbol);

  function totalSupply() external view returns (uint256 totalTokensIssued);

  function transfer(address to, uint256 value) external returns (bool success);

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);

  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}

// File: @chainlink/contracts/src/v0.8/VRFConsumerBase.sol


pragma solidity ^0.8.0;



/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;

  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;

  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;

  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;

  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}

// File: contracts/5_LotteryGame.sol


pragma solidity ^0.8.7;


contract LotteryGame is VRFConsumerBase {
    address public owner;
    address payable[] public players;
    address[] public plrs;
    mapping (address => uint256) public playerBalances;
    mapping (address => uint256) public playerLuckPoints;
    uint public lotteryId;
    mapping (uint => address payable) public lotteryHistory;
    uint256 public resultDecarationTime = block.timestamp + 30 days;
    bytes32 internal keyHash; // identifies which Chainlink oracle to use
    uint internal fee;        // fee to get random number
    uint public randomResult;
    struct UserBalanceObject {
        address addr;
        uint funds;
    }
    UserBalanceObject[] userBalanceObject;

     constructor()
        VRFConsumerBase(
            0xAE975071Be8F8eE67addBC1A82488F1C24858067, // VRF coordinator
            0xb0897686c545045aFc77CF20eC7A532E3120E0F1  // LINK token address
        ) {
            keyHash = 0xcc294a196eeeb44da2888d17c0625cc88d70d9760a69d58d853ba6581a9ab0cd; // 500k Key Hash
            fee = 0.0005 * 10 ** 18; // 0.0005 LINK

            owner = msg.sender;
            lotteryId = 1;
        }

    function getRandomNumber() public returns (bytes32 requestId) {
        require(LINK.balanceOf(address(this)) >= fee, "Not enough LINK in contract");
        return requestRandomness(keyHash, fee);
    }

    function fulfillRandomness(bytes32 , uint randomness) internal override {
        randomResult = randomness;
        declareResults();
    }

    // function getAllPlayerAddresses() public view returns (address payable[] memory) {
    //     address[] memory returnArray = new address payable[](players);
    //     for (uint i = 0; i < players; i++) {
    //         returnArray[i] = players[i];
    //     }
    //     return returnArray;
    // }

    // function getAllPlayerBalances(uint[] indexes) public returns (address[], uint[]) {
    //     address[] memory addrs = new address[](indexes.length);
    //     uint[] memory funds = new uint[](indexes.length);
    //     for (uint i = 0; i < indexes.length; i++) {
    //         Person storage person = people[indexes[i]];
    //         addrs[i] = person.addr;
    //         funds[i] = person.funds;
    //     }
    //     return (addrs, funds);
    // }

    // function getAllPlayerBalances() public returns (address[], uint[]) {
    //     address[] memory addrs = new address[](indexes.length);
    //     uint[] memory funds = new uint[](indexes.length);
    //     for (uint i = 0; i < indexes.length; i++) {
    //         UserBalanceObject storage userBalanceObject = people[indexes[i]];
    //         addrs[i] = person.addr;
    //         funds[i] = person.funds;
    //     }
    //     return (addrs, funds);
    // }

    // Get user balance
    function getPlayerBalance() public view returns (uint256) {
        return playerBalances[msg.sender];
    }

    // Get user winning luck points
    function getPlayerLuckPoints() public view returns (uint256) {
        return playerLuckPoints[msg.sender];
    }

    function getAllPlayersAddresses() public view returns (address[] memory) {
        return plrs;
    }

    // Get lottery pool balance
    function getPoolBalance() public view returns (uint256) {
        return address(this).balance;
    }

    // Get players count
    function getPlayersCount() public view returns (uint) {
        return players.length;
    }

    // Special function receive() that calls stake()
    receive() external payable {
        stake();
    }

    // Stake users amount in the pool
    // Also assigns 'winning chance' points to the user
    function stake() public payable {
        // require(_amount > .01 ether);
        require(msg.value > .001 ether);
        // require(_amount > 0);
        players.push(payable(msg.sender));
        plrs.push(msg.sender);
        playerBalances[msg.sender] += msg.value;

        if (block.timestamp < resultDecarationTime - 27 days) {
            playerLuckPoints[msg.sender] += msg.value / .001 ether * 187 / 10; // 18.7;
        } else if (block.timestamp < resultDecarationTime - 24 days) {
            playerLuckPoints[msg.sender] += msg.value / .001 ether * 83 / 5; // 16.6;
        } else if (block.timestamp < resultDecarationTime - 21 days) {
            playerLuckPoints[msg.sender] += msg.value / .001 ether * 143 / 10; //14.3;
        } else if (block.timestamp < resultDecarationTime - 18 days) {
            playerLuckPoints[msg.sender] += msg.value / .001 ether * 63 / 5; // 12.6;
        } else if (block.timestamp < resultDecarationTime - 15 days) {
            playerLuckPoints[msg.sender] += msg.value / .001 ether * 54 / 5; // 10.8;
        } else if (block.timestamp < resultDecarationTime - 12 days) {
            playerLuckPoints[msg.sender] += msg.value / .001 ether * 9; // 9;
        } else if (block.timestamp < resultDecarationTime - 9 days) {
            playerLuckPoints[msg.sender] += msg.value / .001 ether * 36 / 5; // 7.2;
        } else if (block.timestamp < resultDecarationTime - 6 days) {
            playerLuckPoints[msg.sender] += msg.value / .001 ether * 27 / 5; // 5.4;      
        } else if (block.timestamp < resultDecarationTime - 9 days) {
            playerLuckPoints[msg.sender] += msg.value / .001 ether * 18 / 5; // 3.6;     
        } else {
            playerLuckPoints[msg.sender] += msg.value / .001 ether * 9 / 5; // 1.8;
        }
    }

    // Get a array of random numbers
    // Use: generateArrayOfRandomNumbers(chainlinkResult, 11);
    function generateArrayOfRandomNumbers(uint256 randomValue, uint256 n) public pure returns (uint256[] memory expandedValues) {
        expandedValues = new uint256[](n);
        for (uint256 i = 0; i < n; i++) {
            expandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));
        }
        return expandedValues;
    }

    // Get a single random number
    // Use: generateRandomNumber(chainlinkResult)
    function generateRandomNumber(uint256 randomValue) public pure returns (uint256) {
        return uint256(keccak256(abi.encode(randomValue, 0)));
    }

     // Get winners count
    function getWinnersCount() public view returns (uint256) {
        uint playersCount = getPlayersCount();
        uint winnerAmountToPick;
        if (playersCount > 0 && playersCount < 20) {
            winnerAmountToPick = 1; // pick 1 winner
        } else if (playersCount > 20 && playersCount < 33) {
            winnerAmountToPick = 2; // pick 2 winners
        } else if (playersCount > 33 && playersCount < 66) {
            winnerAmountToPick = 4; // pick 4 winners
        } else if (playersCount > 66 && playersCount < 100) {
            winnerAmountToPick = 6; // pick 6 winners
        } else {
            winnerAmountToPick = 6 * playersCount / 100; 
        }
        return winnerAmountToPick;
    }

    // Reset players data
    // Use: resetPlayersData(0)
    function resetPlayersData(uint256 value) public {
        for (uint i=0; i< players.length ; i++) {
            playerBalances[players[i]] = value;
            playerLuckPoints[players[i]] = value;
        }
    }

     // Declare lottery winners
    function declareResults() public {
        // Get total count of winners to pick
        // uint winnerAmountToPick = getWinnersCount();

        // Set the number of people to pick for each winning position
        // uint firstPlaceCount = winnerAmountToPick * 1 / 6; // 49.8% of pool
        // uint secondPlaceCount = winnerAmountToPick * 2 / 6; // 33.2% of pool
        // uint thirdPlaceCount = winnerAmountToPick - (firstPlaceCount + secondPlaceCount); // 16.6% of pool

        // Weighted points lucky winner logic
        // uint randomNum = 
        uint index = randomResult % players.length;
        players[index].transfer(address(this).balance);

        // Record lottery count
        lotteryHistory[lotteryId] = players[index];
        lotteryId++;

        // Reset the players array/mapping for new lottery round
        players = new address payable[](0);
        plrs = new address payable[](0);
        resultDecarationTime = block.timestamp + 30 days;
        resetPlayersData(0);
    }

    // For testing
    function withdrawEntireBalance() public {
        require(owner == msg.sender, "Only owner can withdraw balance");
        address payable payableOwner = payable(owner);
        payableOwner.transfer(address(this).balance);
        resetPlayersData(0);
    }
}